[
    {
        "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/matabele/action-maketid/filter\": {\n            \"created\": \"20160125090842763\",\n            \"text\": \"Provides the filter `[maketid[]]` to create one or more unique titles.\\n\\n; Placeholders\\n: `%date%` — a datestamp of the current time (format: `YYYY0MM0DD0hh0mm0ss`)\\n: `%count%` — current count (see options: ''min'', ''inc'', ''max'')\\n: `%max%` — max number generated\\n: `%tiddler%` — defined ''tiddler'' or current\\n: `%title%` — input title\\n: when not operating on input titles, the (current) tiddler title\\n\\n: `<<variable>>`\\n: `{{text!!reference}}`\\n; Options\\n: `min:1` — starting number\\n: `inc:1` — increment\\n: `max:2` — max number\\n: `sep:-` — separator before unique count\\n: `date-format:<dateFormatString>` — for `%date%`\\n: `pad:max` — zero-pad count to length of max\\n: `pad:5` — zero-pad count to 5 digits: 00001\",\n            \"title\": \"$:/plugins/matabele/action-maketid/filter\",\n            \"modified\": \"20160125094706876\"\n        },\n        \"$:/plugins/matabele/action-maketid/widget\": {\n            \"created\": \"20160125091509546\",\n            \"text\": \"! Introduction\\n\\nThe ''action-maketid'' widget is an action widget designed to create a new tiddler, with the built in functionality to set the values of the title, tags and fields. The new tiddler may be hidden, displayed in the story river or opened for editing.\\n\\nThe ''action-maketid'' widget may be used to do any of the following.\\n\\n* create a new tiddler with or without the use of a template\\n* set a unique title for the new tiddler\\n* manipulate the 'tags' field by applying a sub-filter expression\\n* set the values for any number of fields for the new tiddler (overwriting template values)\\n* hide the new tiddler in the background, navigate to the new tiddler (the default) or open the new tiddler for editing\\n\\n! Content and Attributes\\n\\n|Attribute |Explanation |h\\n|$title |The title for the new tiddler (if not provided, defaults to 'currentTiddler') |\\n|$tags |Option to apply a subfilter to the 'tags' field |\\n|$template |Option to name the template to use |\\n|$navigate= |\\\"show\\\" navigates to the new tiddler (default) : \\\"hide\\\" creates the new tiddler in the background : \\\"edit\\\" navigates to and opens the new tiddler for editing |\\n|{attributes not starting with $} |Values may be set for any number of fields (overwriting template values) -- each attribute name specifies a field, with the attribute value providing the value to assign to the field |\",\n            \"title\": \"$:/plugins/matabele/action-maketid/widget\",\n            \"tags\": \"\",\n            \"modified\": \"20160125094720565\"\n        },\n        \"$:/plugins/matabele/filters/maketid.js\": {\n            \"created\": \"20160116094148552\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/matabele/filters/maketid.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nGenerates a list of tiddler titles\\n\\\\*/\\n(function() {\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\t//Fetch the titles from the current list\\n\\tvar prepare_results = function(source) {\\n\\t\\tvar results = [];\\n\\t\\tsource(function(tiddler, title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t\\treturn results;\\n\\t};\\n\\n\\t/*\\n\\tGenerate a list of unique titles\\n\\t*/\\n\\texports.maketid = function(source, operator, options) {\\n\\t\\tvar date, ex, input, match,\\n\\t\\t\\twidget = options.widget,\\n\\t\\t\\twiki = options.wiki,\\n\\t\\t\\tresults = [];\\n\\t\\t// Make defaults\\n\\t\\tvar m = {\\n\\t\\t\\tinc: 1,\\n\\t\\t\\tmin: 1,\\n\\t\\t\\tsep: \\\" \\\",\\n\\t\\t\\ttiddler: widget ? widget.getVariable(\\\"currentTiddler\\\") : \\\"\\\"\\n\\t\\t};\\n\\t\\t// The regular expressions for replacing placeholders\\n\\t\\tvar reTITLE = /\\\\%TITLE\\\\%/mgi,\\n\\t\\t\\treCOUNT = /\\\\%COUNT\\\\%/mgi,\\n\\t\\t\\treDATE = /\\\\%DATE\\\\%/mgi,\\n\\t\\t\\treMAX = /\\\\%MAX\\\\%/mgi,\\n\\t\\t\\treTIDDLER = /\\\\%TIDDLER\\\\%/mgi,\\n\\t\\t\\t// The regex for make options\\n\\t\\t\\treVAR = /^\\\\s*([\\\\$\\\\w\\\\d\\\\-\\\\_\\\\/]*):(.*)(?:\\\\s*)$/;\\n\\t\\t//Replaces {{text!!references}} in the make expression\\n\\t\\tvar replaceRefs = function(match, ref) {\\n\\t\\t\\treturn wiki.getTextReference(ref, \\\"\\\", m.tiddler);\\n\\t\\t};\\n\\t\\t//Replaces <<variables>> in the make expression\\n\\t\\tvar replaceVars = function(match, v) {\\n\\t\\t\\treturn widget ? widget.getVariable(v) : \\\"\\\";\\n\\t\\t};\\n\\t\\t// triggers replacing of both variables and text references in an expression\\n\\t\\tvar replaceRV = function(e) {\\n\\t\\t\\treturn e\\n\\t\\t\\t\\t.replace(/{{([^}]*)}}/mg, replaceRefs)\\n\\t\\t\\t\\t.replace(/<<([^>]*)>>/mg, replaceVars);\\n\\t\\t};\\n\\t\\t// Iterate until a unique title is found\\n\\t\\tvar unique = function(list, title) {\\n\\t\\t\\tvar c = 0,\\n\\t\\t\\t\\tresult = title;\\n\\t\\t\\twhile(options.wiki.tiddlerExists(result) || options.wiki.isShadowTiddler(\\n\\t\\t\\t\\t\\tresult) || options.wiki.findDraft(result) || list.indexOf(result) >= 0) {\\n\\t\\t\\t\\tresult = (title + m.sep + (++c));\\n\\t\\t\\t}\\n\\t\\t\\treturn result;\\n\\t\\t};\\n\\n\\t\\tvar titles = prepare_results(source);\\n\\t\\tvar len = titles.length;\\n\\t\\t// Return errors\\n\\t\\ttry {\\n\\t\\t\\t$tw.utils.each(\\n\\t\\t\\t\\t// Operand item, split via \\\"\\\\\\\"\\n\\t\\t\\t\\t(operator.operand || \\\"\\\").split(\\\"\\\\\\\\\\\"),\\n\\t\\t\\t\\tfunction(arg) {\\n\\t\\t\\t\\t\\tvar v;\\n\\t\\t\\t\\t\\t// Skip empty\\n\\t\\t\\t\\t\\targ = arg.trim();\\n\\t\\t\\t\\t\\tif(arg) {\\n\\t\\t\\t\\t\\t\\t// Test for make option\\n\\t\\t\\t\\t\\t\\tmatch = reVAR.exec(arg);\\n\\t\\t\\t\\t\\t\\t// Is option?\\n\\t\\t\\t\\t\\t\\tif(match) {\\n\\t\\t\\t\\t\\t\\t\\t// Check options\\n\\t\\t\\t\\t\\t\\t\\tswitch(match[1]) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\\"min\\\":\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\\"max\\\":\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\\"inc\\\":\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Get any of these as integer while replacing any variables or text-references\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tv = parseInt(replaceRV(match[2]));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Not an integer or smaller than 0?\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif(isNaN(v) || v < 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tv = 1;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Set option to value\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tm[match[1]] = v;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\\"sep\\\":\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tm.sep = match[2];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\\"pad\\\":\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tm.pad = parseInt(match[2]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\\"tiddler\\\":\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tm.tiddler = match[2];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\tcase \\\"date-format\\\":\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tm.dateFormat = match[2].trim();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t// Otherwise, if not an option, only once\\n\\t\\t\\t\\t\\t\\t} else if(m.expr === undefined) {\\n\\t\\t\\t\\t\\t\\t\\tm.expr = arg;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t);\\n\\t\\t\\t// No expression?\\n\\t\\t\\tif(m.expr === undefined) {\\n\\t\\t\\t\\tm.expr = \\\"%tiddler%\\\";\\n\\t\\t\\t}\\n\\t\\t\\t// Padding defined but NaN\\n\\t\\t\\tif(m.pad !== undefined && isNaN(m.pad)) {\\n\\t\\t\\t\\tm.pad = m.max ? m.max.toString().length : 2;\\n\\t\\t\\t}\\n\\t\\t\\t// Has input titles?\\n\\t\\t\\tinput = !(len === 1 && !titles[0]);\\n\\t\\t\\t// Operating on input titles?\\n\\t\\t\\tif(input) {\\n\\t\\t\\t\\tm.max = m.max ? Math.min(len, m.max) : len;\\n\\t\\t\\t}\\n\\t\\t\\t// Max undefined or smaller than min\\n\\t\\t\\tif(!m.max || m.max < m.min) {\\n\\t\\t\\t\\tm.max = m.min;\\n\\t\\t\\t}\\n\\t\\t\\t// Init counter\\n\\t\\t\\tm.count = m.min;\\n\\t\\t\\t// No date format\\n\\t\\t\\tif(reDATE.test(m.expr)) {\\n\\t\\t\\t\\tvar start = m.dateFormat || \\\"0hh:0mm, DD/MM/YYYY\\\";\\n\\t\\t\\t\\tdate = $tw.utils.formatDateString(new Date(), start);\\n\\t\\t\\t}\\n\\t\\t\\tdo {\\n\\t\\t\\t\\t// Copy expression while replacing any variables or text-references\\n\\t\\t\\t\\tex = replaceRV(m.expr);\\n\\t\\t\\t\\t// Replace placeholders\\n\\t\\t\\t\\tex = unique(results, ex\\n\\t\\t\\t\\t\\t.replace(reTIDDLER, m.tiddler)\\n\\t\\t\\t\\t\\t.replace(reTITLE, input ? titles[m.count - 1] : m.tiddler)\\n\\t\\t\\t\\t\\t.replace(reMAX, m.max)\\n\\t\\t\\t\\t\\t.replace(reCOUNT, m.pad ? $tw.utils.pad(m.count, m.pad) : m.count)\\n\\t\\t\\t\\t\\t.replace(reDATE, date)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t// Add to output\\n\\t\\t\\t\\tresults.push(ex);\\n\\t\\t\\t\\t// Next generated item\\n\\t\\t\\t\\tm.count = m.count + m.inc;\\n\\t\\t\\t} while (m.count <= m.max);\\n\\t\\t} catch(e) {\\n\\t\\t\\treturn [\\\"Error in make filter:\\\\n\\\" + e];\\n\\t\\t}\\n\\t\\treturn results;\\n\\t};\\n\\n})();\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/matabele/filters/maketid.js\",\n            \"tags\": \"\",\n            \"module-type\": \"filteroperator\",\n            \"modified\": \"20160125094728377\"\n        },\n        \"$:/plugins/matabele/widgets/action-maketid.js\": {\n            \"created\": \"20160117152758234\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/matabele/widgets/action-maketid.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to create new tiddlers\\n\\\\*/\\n(function() {\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\tvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\tvar MakeTidWidget = function(parseTreeNode, options) {\\n\\t\\tthis.initialise(parseTreeNode, options);\\n\\t};\\n\\n\\t/*\\n\\tInherit from the base widget class\\n\\t*/\\n\\tMakeTidWidget.prototype = new Widget();\\n\\n\\t/*\\n\\tRender this widget into the DOM\\n\\t*/\\n\\tMakeTidWidget.prototype.render = function(parent, nextSibling) {\\n\\t\\tthis.parentDomNode = parent;\\n\\t\\tthis.computeAttributes();\\n\\t\\tthis.execute();\\n\\t\\tthis.renderChildren(parent, nextSibling);\\n\\t};\\n\\n\\t/*\\n\\tCompute the internal state of the widget\\n\\t*/\\n\\tMakeTidWidget.prototype.execute = function() {\\n\\t\\tthis.tidTitle = this.getAttribute(\\\"$title\\\", this.getVariable(\\n\\t\\t\\t\\\"currentTiddler\\\"));\\n\\t\\tthis.tidTemplate = (this.getAttribute(\\\"$template\\\"))\\n\\t\\t \\t? this.getAttribute(\\\"$template\\\")\\n\\t\\t\\t: this.getAttribute(\\\"$skeleton\\\", \\\"\\\");\\n\\t\\tthis.tidNavigate = this.getAttribute(\\\"$navigate\\\", \\\"show\\\");\\n\\t\\tthis.filtertags = this.getAttribute(\\\"$tags\\\");\\n\\t\\tthis.makeChildWidgets();\\n\\t};\\n\\n\\t/*\\n\\tSelectively refreshes the widget if needed.\\n\\t*/\\n\\tMakeTidWidget.prototype.refresh = function(changedTiddlers) {\\n\\t\\tvar changedAttributes = this.computeAttributes();\\n\\t\\tif(changedAttributes.$navigate || changedAttributes.$template ||\\n\\t\\t\\tchangedAttributes.$title || changedAttributes.$tags) {\\n\\t\\t\\tthis.refreshSelf();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t};\\n\\n\\t/*\\n\\tInvoke the action associated with this widget\\n\\t*/\\n\\tMakeTidWidget.prototype.invokeAction = function(triggeringWidget, event) {\\n\\t\\tvar tiddler;\\n\\t\\t// Fetch creation fields\\n\\t\\tvar modifications = this.wiki.getCreationFields();\\n\\t\\t// Check if the title is unique, else make a new one\\n\\t\\tvar title = this.wiki.generateNewTitle(this.tidTitle || $tw.language\\n\\t\\t\\t.getString(\\n\\t\\t\\t\\t\\\"DefaultNewTiddlerTitle\\\"));\\n\\t\\tmodifications.title = title;\\n\\t\\t// Merge any fields specified\\n\\t\\t$tw.utils.each(this.attributes, function(attribute, name) {\\n\\t\\t\\tif(name.charAt(0) !== \\\"$\\\" && name !== \\\"title\\\") {\\n\\t\\t\\t\\tmodifications[name] = attribute;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// Make a clone of the template if specified\\n\\t\\tif(this.tidTemplate && this.wiki.getTiddler(this.tidTemplate) !== undefined) {\\n\\t\\t\\tvar mod;\\n\\t\\t\\ttiddler = this.wiki.getTiddler(this.tidTemplate);\\n\\t\\t\\t// Remove any modification fields from the template (this is a new tiddler)\\n\\t\\t\\tfor(mod in this.wiki.getModificationFields()) {\\n\\t\\t\\t\\tdelete tiddler[mod];\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\ttiddler = {};\\n\\t\\t}\\n\\t\\t// Save the clone\\n\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler, modifications));\\n\\t\\t//Set the tags in the case that the $tags= attribute is specified\\n\\t\\tif(this.filtertags) {\\n\\t\\t\\tvar tagfilter = \\\"[list[\\\" + title + \\\"!!tags]] \\\" + this.filtertags;\\n\\t\\t\\tthis.wiki.setText(title, \\\"tags\\\", undefined, $tw.utils.stringifyList(this.wiki\\n\\t\\t\\t\\t.filterTiddlers(tagfilter, this)));\\n\\t\\t}\\n\\t\\t// Control navigation to the new tiddler\\n\\t\\tswitch(this.tidNavigate) {\\n\\t\\t\\tcase \\\"edit\\\":\\n\\t\\t\\t\\tthis.dispatchEvent({\\n\\t\\t\\t\\t\\ttype: \\\"tm-edit-tiddler\\\",\\n\\t\\t\\t\\t\\tparam: title\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"show\\\":\\n\\t\\t\\t\\tvar bounds = this.parentDomNode.getBoundingClientRect();\\n\\t\\t\\t\\tthis.dispatchEvent({\\n\\t\\t\\t\\t\\ttype: \\\"tm-navigate\\\",\\n\\t\\t\\t\\t\\tnavigateTo: title,\\n\\t\\t\\t\\t\\tnavigateFromTitle: this.getVariable(\\\"storyTiddler\\\"),\\n\\t\\t\\t\\t\\tnavigateFromNode: this,\\n\\t\\t\\t\\t\\tnavigateFromClientRect: {\\n\\t\\t\\t\\t\\t\\ttop: bounds.top,\\n\\t\\t\\t\\t\\t\\tleft: bounds.left,\\n\\t\\t\\t\\t\\t\\twidth: bounds.width,\\n\\t\\t\\t\\t\\t\\tright: bounds.right,\\n\\t\\t\\t\\t\\t\\tbottom: bounds.bottom,\\n\\t\\t\\t\\t\\t\\theight: bounds.height\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tnavigateSuppressNavigation: event.metaKey || event.ctrlKey ||\\n\\t\\t\\t\\t\\t\\t(event.button === 1)\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"hide\\\":\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\treturn true; // Action was invoked\\n\\t};\\n\\n\\texports[\\\"action-maketid\\\"] = MakeTidWidget;\\n\\n})();\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/matabele/widgets/action-maketid.js\",\n            \"tags\": \"\",\n            \"module-type\": \"widget\",\n            \"modifier\": \"Matabele\",\n            \"modified\": \"20160125094735714\",\n            \"creator\": \"Matabele\"\n        }\n    }\n}",
        "version": "0.0.2",
        "type": "application/json",
        "title": "$:/plugins/matabele/action-maketid",
        "plugin-type": "plugin",
        "modified": "NaNNaNNaNNaNNaNNaNNaN",
        "list": "filter widget",
        "description": "Widget and filter operator to create new tiddlers",
        "dependents": "",
        "created": "NaNNaNNaNNaNNaNNaNNaN",
        "core-version": ">=5.1.8",
        "author": "Matabele"
    }
]