author: Joshua Fontany
core-version: >=5.1.22
dependents: none
description: Complex JSON and CSV Support (Modloader not required)
list: readme history license
name: Json Mangler
plugin-type: plugin
source: https://github.com/joshuafontany/TW5-JsonMangler
title: $:/plugins/joshuafontany/jsonmangler
type: application/json
version: 2.2.0+standAlone

{
    "tiddlers": {
        "$:/config/type/application/csv": {
            "title": "$:/config/type/application/csv",
            "tags": "",
            "headers": "yes",
            "per_page": "10",
            "start_page": "1",
            "peek": "yes",
            "import_type": "tiddlers",
            "primary_key": "-1",
            "import_title_tiddlers": "[<currentTiddler>split[.csv]limit[1]split[/]!match:caseinsensitive[csv]join[/]addprefix[Data/]]",
            "import_title_json": "[<currentTiddler>split[.csv]limit[1]split[/]!match:caseinsensitive[csv]join[/]addprefix[JsonData/]]",
            "import_title_array": "[<currentTiddler>split[.csv]limit[1]split[/]!match:caseinsensitive[csv]join[/]addprefix[Json/]]",
            "import_subtitle_tiddlers": "[<currentTiddler>split[.csv]limit[1]split[/]!match:caseinsensitive[csv]join[/]addprefix[Data/]addsuffix[/]addsuffix<primaryKey>]",
            "import_subtitle_json": "[<currentTiddler>split[.csv]limit[1]split[/]!match:caseinsensitive[csv]join[/]addprefix[JsonData/]addsuffix[/]addsuffix<primaryKey>]",
            "import_named_columns": "[<columnName>]",
            "import_numbered_columns": "[<columnNumber>addprefix[field_]]",
            "debug": "no",
            "preview": "250",
            "skip_empty": "yes",
            "delimiter": "",
            "newline": "",
            "quote_char": "",
            "escape_char": "",
            "text": ""
        },
        "$:/language/Docs/Types/application/csv": {
            "title": "$:/language/Docs/Types/application/csv",
            "created": "NaNNaNNaNNaNNaNNaNNaN",
            "description": "CSV data",
            "group": "Developer",
            "group-sort": "2",
            "modified": "NaNNaNNaNNaNNaNNaNNaN",
            "name": "application/csv",
            "tags": "",
            "type": "",
            "text": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/history": {
            "title": "$:/plugins/joshuafontany/jsonmangler/history",
            "text": "* 2.2.0\r\n    ** TW 5.1.22 Release Sync-up.\r\n    ** Moved the Plugin Management Control Panel tab to its own plugin (seperate github repo).\r\n    ** Updated `has` filter operator that can use json pointers with the `index` suffix.\r\n    ** Improved CSV (Character Seperated Value) tiddler handling and importing.\r\n    ** Bugfixes (various).\r\n* 2.1.1\r\n    ** Changed the `indexes` operator to return only the immediate (root) properties by default. Now accepts an `:all` suffix to return all paths.\r\n* 2.1.0\r\n    ** Improved the `indexes` filter operator. See the documentation in the example wiki.\r\n* 2.0 - 2.0.10\r\n    ** See the [ext[https://github.com/joshuafontany/TW5-JsonMangler/releases|GitHub release history...]"
        },
        "$:/plugins/joshuafontany/jsonmangler/license.md": {
            "title": "$:/plugins/joshuafontany/jsonmangler/license.md",
            "text": "The MIT License (MIT)\r\nCopyright (c) 2018 Joshua Fontany\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "type": "text/html"
        },
        "$:/plugins/joshuafontany/jsonmangler/license": {
            "title": "$:/plugins/joshuafontany/jsonmangler/license",
            "created": "20181203191556554",
            "type": "text/vnd.tiddlywiki",
            "text": "The MIT License (MIT)\r\nCopyright (c) 2018 <$link to=\"https://github.com/joshuafontany\">Joshua Fontany</$link>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        "$:/core/modules/editor/factory.js": {
            "title": "$:/core/modules/editor/factory.js",
            "module-type": "library",
            "type": "application/javascript",
            "text": "/*\\\ntitle: $:/core/modules/editor/factory.js\ntype: application/javascript\nmodule-type: library\n\nFactory for constructing text editor widgets with specified engines for the toolbar and non-toolbar cases\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar DEFAULT_MIN_TEXT_AREA_HEIGHT = \"100px\"; // Minimum height of textareas in pixels\n\n// Configuration tiddlers\nvar HEIGHT_MODE_TITLE = \"$:/config/TextEditor/EditorHeight/Mode\";\nvar ENABLE_TOOLBAR_TITLE = \"$:/config/TextEditor/EnableToolbar\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nfunction editTextWidgetFactory(toolbarEngine,nonToolbarEngine) {\n\n\tvar EditTextWidget = function(parseTreeNode,options) {\n\t\t// Initialise the editor operations if they've not been done already\n\t\tif(!this.editorOperations) {\n\t\t\tEditTextWidget.prototype.editorOperations = {};\n\t\t\t$tw.modules.applyMethods(\"texteditoroperation\",this.editorOperations);\n\t\t}\n\t\tthis.initialise(parseTreeNode,options);\n\t};\n\n\t/*\n\tInherit from the base widget class\n\t*/\n\tEditTextWidget.prototype = new Widget();\n\n\t/*\n\tRender this widget into the DOM\n\t*/\n\tEditTextWidget.prototype.render = function(parent,nextSibling) {\n\t\t// Save the parent dom node\n\t\tthis.parentDomNode = parent;\n\t\t// Compute our attributes\n\t\tthis.computeAttributes();\n\t\t// Execute our logic\n\t\tthis.execute();\n\t\t// Create the wrapper for the toolbar and render its content\n\t\tif(this.editShowToolbar) {\n\t\t\tthis.toolbarNode = this.document.createElement(\"div\");\n\t\t\tthis.toolbarNode.className = \"tc-editor-toolbar\";\n\t\t\tparent.insertBefore(this.toolbarNode,nextSibling);\n\t\t\tthis.renderChildren(this.toolbarNode,null);\n\t\t\tthis.domNodes.push(this.toolbarNode);\n\t\t}\n\t\t// Create our element\n\t\tvar editInfo = this.getEditInfo(),\n\t\t\tEngine = this.editShowToolbar ? toolbarEngine : nonToolbarEngine;\n\t\tthis.engine = new Engine({\n\t\t\t\twidget: this,\n\t\t\t\tvalue: editInfo.value,\n\t\t\t\ttype: editInfo.type,\n\t\t\t\tparentNode: parent,\n\t\t\t\tnextSibling: nextSibling\n\t\t\t});\n\t\t// Call the postRender hook\n\t\tif(this.postRender) {\n\t\t\tthis.postRender();\n\t\t}\n\t\t// Fix height\n\t\tthis.engine.fixHeight();\n\t\t// Focus if required\n\t\tif(this.editFocus === \"true\" || this.editFocus === \"yes\") {\n\t\t\tthis.engine.focus();\n\t\t}\n\t\t// Add widget message listeners\n\t\tthis.addEventListeners([\n\t\t\t{type: \"tm-edit-text-operation\", handler: \"handleEditTextOperationMessage\"}\n\t\t]);\n\t};\n\n\t/*\n\tGet the tiddler being edited and current value\n\t*/\n\tEditTextWidget.prototype.getEditInfo = function() {\n\t\t// Get the edit value\n\t\tvar self = this,\n\t\t\tvalue,\n\t\t\ttype = \"text/plain\",\n\t\t\tupdate;\n\t\tif(this.editIndex) {\n\t\t\tvalue = this.wiki.extractTiddlerDataItem(this.editTitle,this.editIndex,this.editDefault);\n\t\t\tupdate = function(value) {\n\t\t\t\tvar data = self.wiki.getTiddlerData(self.editTitle,{});\n\t\t\t\tvar unEq = !($tw.utils.jsonIsEqual(value, $tw.utils.jsonGet(data, self.editIndex)));\n\t\t\t\tif(unEq) {\n\t\t\t\t\t$tw.utils.jsonSet(data, self.editIndex, value);\n\t\t\t\t\tself.wiki.setTextReference(self.editTitle, $tw.utils.jsonOrderedStringify(data));\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\t// Get the current tiddler and the field name\n\t\t\tvar tiddler = this.wiki.getTiddler(this.editTitle);\n\t\t\tif(tiddler) {\n\t\t\t\t// If we've got a tiddler, the value to display is the field string value\n\t\t\t\tvalue = tiddler.getFieldString(this.editField);\n\t\t\t\tif(this.editField === \"text\") {\n\t\t\t\t\ttype = tiddler.fields.type || \"text/vnd.tiddlywiki\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, we need to construct a default value for the editor\n\t\t\t\tswitch(this.editField) {\n\t\t\t\t\tcase \"text\":\n\t\t\t\t\t\tvalue = \"Type the text for the tiddler '\" + this.editTitle + \"'\";\n\t\t\t\t\t\ttype = \"text/vnd.tiddlywiki\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"title\":\n\t\t\t\t\t\tvalue = this.editTitle;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(this.editDefault !== undefined) {\n\t\t\t\t\tvalue = this.editDefault;\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate = function(value) {\n\t\t\t\tvar tiddler = self.wiki.getTiddler(self.editTitle),\n\t\t\t\t\tupdateFields = {\n\t\t\t\t\t\ttitle: self.editTitle\n\t\t\t\t\t};\n\t\t\t\tupdateFields[self.editField] = value;\n\t\t\t\tself.wiki.addTiddler(new $tw.Tiddler(self.wiki.getCreationFields(),tiddler,updateFields,self.wiki.getModificationFields()));\n\t\t\t};\n\t\t}\n\t\tif(this.editType) {\n\t\t\ttype = this.editType;\n\t\t}\n\t\treturn {value: value || \"\", type: type, update: update};\n\t};\n\n\t/*\n\tHandle an edit text operation message from the toolbar\n\t*/\n\tEditTextWidget.prototype.handleEditTextOperationMessage = function(event) {\n\t\t// Prepare information about the operation\n\t\tvar operation = this.engine.createTextOperation();\n\t\t// Invoke the handler for the selected operation\n\t\tvar handler = this.editorOperations[event.param];\n\t\tif(handler) {\n\t\t\thandler.call(this,event,operation);\n\t\t}\n\t\t// Execute the operation via the engine\n\t\tvar newText = this.engine.executeTextOperation(operation);\n\t\t// Fix the tiddler height and save changes\n\t\tthis.engine.fixHeight();\n\t\tthis.saveChanges(newText);\n\t};\n\n\t/*\n\tCompute the internal state of the widget\n\t*/\n\tEditTextWidget.prototype.execute = function() {\n\t\t// Get our parameters\n\t\tthis.editTitle = this.getAttribute(\"tiddler\",this.getVariable(\"currentTiddler\"));\n\t\tthis.editField = this.getAttribute(\"field\",\"text\");\n\t\tthis.editIndex = this.getAttribute(\"index\");\n\t\tthis.editDefault = this.getAttribute(\"default\");\n\t\tthis.editClass = this.getAttribute(\"class\");\n\t\tthis.editPlaceholder = this.getAttribute(\"placeholder\");\n\t\tthis.editSize = this.getAttribute(\"size\");\n\t\tthis.editRows = this.getAttribute(\"rows\");\n\t\tthis.editAutoHeight = this.wiki.getTiddlerText(HEIGHT_MODE_TITLE,\"auto\");\n\t\tthis.editAutoHeight = this.getAttribute(\"autoHeight\",this.editAutoHeight === \"auto\" ? \"yes\" : \"no\") === \"yes\";\n\t\tthis.editMinHeight = this.getAttribute(\"minHeight\",DEFAULT_MIN_TEXT_AREA_HEIGHT);\n\t\tthis.editFocusPopup = this.getAttribute(\"focusPopup\");\n\t\tthis.editFocus = this.getAttribute(\"focus\");\n\t\tthis.editTabIndex = this.getAttribute(\"tabindex\");\n\t\t// Get the default editor element tag and type\n\t\tvar tag,type;\n\t\tif(this.editField === \"text\") {\n\t\t\ttag = \"textarea\";\n\t\t} else {\n\t\t\ttag = \"input\";\n\t\t\tvar fieldModule = $tw.Tiddler.fieldModules[this.editField];\n\t\t\tif(fieldModule && fieldModule.editTag) {\n\t\t\t\ttag = fieldModule.editTag;\n\t\t\t}\n\t\t\tif(fieldModule && fieldModule.editType) {\n\t\t\t\ttype = fieldModule.editType;\n\t\t\t}\n\t\t\ttype = type || \"text\";\n\t\t}\n\t\t// Get the rest of our parameters\n\t\tthis.editTag = this.getAttribute(\"tag\",tag);\n\t\tthis.editType = this.getAttribute(\"type\",type);\n\t\t// Make the child widgets\n\t\tthis.makeChildWidgets();\n\t\t// Determine whether to show the toolbar\n\t\tthis.editShowToolbar = this.wiki.getTiddlerText(ENABLE_TOOLBAR_TITLE,\"yes\");\n\t\tthis.editShowToolbar = (this.editShowToolbar === \"yes\") && !!(this.children && this.children.length > 0) && (!this.document.isTiddlyWikiFakeDom);\n\t};\n\n\t/*\n\tSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n\t*/\n\tEditTextWidget.prototype.refresh = function(changedTiddlers) {\n\t\tvar changedAttributes = this.computeAttributes();\n\t\t// Completely rerender if any of our attributes have changed\n\t\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes[\"default\"] || changedAttributes[\"class\"] || changedAttributes.placeholder || changedAttributes.size || changedAttributes.autoHeight || changedAttributes.minHeight || changedAttributes.focusPopup ||  changedAttributes.rows || changedAttributes.tabindex || changedTiddlers[HEIGHT_MODE_TITLE] || changedTiddlers[ENABLE_TOOLBAR_TITLE]) {\n\t\t\tthis.refreshSelf();\n\t\t\treturn true;\n\t\t} else if(changedTiddlers[this.editTitle]) {\n\t\t\tvar editInfo = this.getEditInfo();\n\t\t\tthis.updateEditor(editInfo.value,editInfo.type);\n\t\t}\n\t\tthis.engine.fixHeight();\n\t\tif(this.editShowToolbar) {\n\t\t\treturn this.refreshChildren(changedTiddlers);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/*\n\tUpdate the editor with new text. This method is separate from updateEditorDomNode()\n\tso that subclasses can override updateEditor() and still use updateEditorDomNode()\n\t*/\n\tEditTextWidget.prototype.updateEditor = function(text,type) {\n\t\tthis.updateEditorDomNode(text,type);\n\t};\n\n\t/*\n\tUpdate the editor dom node with new text\n\t*/\n\tEditTextWidget.prototype.updateEditorDomNode = function(text,type) {\n\t\tthis.engine.setText(text,type);\n\t};\n\n\t/*\n\tSave changes back to the tiddler store\n\t*/\n\tEditTextWidget.prototype.saveChanges = function(text) {\n\t\tvar editInfo = this.getEditInfo();\n\t\tif(text !== editInfo.value) {\n\t\t\teditInfo.update(text);\n\t\t}\n\t};\n\n\t/*\n\tCancel Popups\n\t*/\n\tEditTextWidget.prototype.cancelPopups = function() {\n\t\t$tw.popup.cancel(0,this.engine.domNode);\n\t};\n\n\t/*\n\tHandle a dom \"keydown\" event, which we'll bubble up to our container for the keyboard widgets benefit\n\t*/\n\tEditTextWidget.prototype.handleKeydownEvent = function(event) {\n\t\t// Check for a keyboard shortcut\n\t\tif(this.toolbarNode) {\n\t\t\tvar shortcutElements = this.toolbarNode.querySelectorAll(\"[data-tw-keyboard-shortcut]\");\n\t\t\tfor(var index=0; index<shortcutElements.length; index++) {\n\t\t\t\tvar el = shortcutElements[index],\n\t\t\t\t\tshortcutData = el.getAttribute(\"data-tw-keyboard-shortcut\"),\n\t\t\t\t\tkeyInfoArray = $tw.keyboardManager.parseKeyDescriptors(shortcutData,{\n\t\t\t\t\t\twiki: this.wiki\n\t\t\t\t\t});\n\t\t\t\tif($tw.keyboardManager.checkKeyDescriptors(event,keyInfoArray)) {\n\t\t\t\t\tvar clickEvent = this.document.createEvent(\"Events\");\n\t\t\t\t    clickEvent.initEvent(\"click\",true,false);\n\t\t\t\t    el.dispatchEvent(clickEvent);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Propogate the event to the container\n\t\tif(this.propogateKeydownEvent(event)) {\n\t\t\t// Ignore the keydown if it was already handled\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\treturn true;\n\t\t}\n\t\t// Otherwise, process the keydown normally\n\t\treturn false;\n\t};\n\n\t/*\n\tPropogate keydown events to our container for the keyboard widgets benefit\n\t*/\n\tEditTextWidget.prototype.propogateKeydownEvent = function(event) {\n\t\tvar newEvent = this.document.createEventObject ? this.document.createEventObject() : this.document.createEvent(\"Events\");\n\t\tif(newEvent.initEvent) {\n\t\t\tnewEvent.initEvent(\"keydown\", true, true);\n\t\t}\n\t\tnewEvent.keyCode = event.keyCode;\n\t\tnewEvent.which = event.which;\n\t\tnewEvent.metaKey = event.metaKey;\n\t\tnewEvent.ctrlKey = event.ctrlKey;\n\t\tnewEvent.altKey = event.altKey;\n\t\tnewEvent.shiftKey = event.shiftKey;\n\t\treturn !this.parentDomNode.dispatchEvent(newEvent);\n\t};\n\n\treturn EditTextWidget;\n\n}\n\nexports.editTextWidgetFactory = editTextWidgetFactory;\n\n})();\n"
        },
        "$:/core/modules/filters/indexes.js": {
            "title": "$:/core/modules/filters/indexes.js",
            "text": "/*\\\r\ntitle: $:/core/modules/filters/indexes.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for returning the indexes of a data tiddler\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar pointer = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js\");\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.indexes = function(source,operator,options) {\r\n\tvar results = [], descend = function(){return false;}, path = operator.operand || \"\";\r\n\tsource(function(tiddler,title) {\r\n\t\tvar data = options.wiki.getTiddlerDataCached(title);\r\n\t\tif(data) {\r\n\t\t\t//descend defaults to true\r\n\t\t\tif(operator.suffixes) {\r\n\t\t\t\tif ((operator.suffixes[0] || []).indexOf(\"all\") !== -1 ) descend = null;\r\n\t\t\t}\r\n\t\t\tvar pointers = (path.length !== 0)? $tw.utils.jsonIndexes($tw.utils.jsonGet(data, path, false), descend): $tw.utils.jsonIndexes(data, descend);\r\n\t\t\t$tw.utils.pushTop(results, pointers);\r\n\t\t\t}\r\n\t\t});\r\n\treturn results;\r\n};\r\n\r\n})();\r\n",
            "type": "application/javascript",
            "module-type": "filteroperator"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/filters/decodeindex.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/filters/decodeindex.js",
            "text": "/*\\\r\ntitle:  $:/plugins/joshuafontany/jsonmangler/modules/filters/decodeindex.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for encoding json tiddler indexes\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar pointer = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js\");\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.decodeindex = function(source,operator,options) {\r\n    var results = [];\r\n    source(function(tiddler, title) {\r\n        results.push(pointer.unescape(title));\r\n    });\r\n    return results;\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "filteroperator",
            "revision": "0",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/filters/encodeindex.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/filters/encodeindex.js",
            "text": "/*\\\r\ntitle:  $:/plugins/joshuafontany/jsonmangler/modules/filters/encodeindex.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for encoding json tiddler indexes\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar pointer = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js\");\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.encodeindex = function(source,operator,options) {\r\n    var results = [];\r\n    source(function(tiddler, title) {\r\n        results.push(pointer.escape(title));\r\n    });\r\n    return results;\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "filteroperator",
            "revision": "0",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/filters/encodetiddler.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/filters/encodetiddler.js",
            "text": "/*\\\r\ntitle:  $:/plugins/joshuafontany/jsonmangler/modules/filters/encodetiddler.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for encoding a tiddler in order to store it as a json value string\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar pointer = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js\");\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.encodetiddler = function(source,operator,options) {\r\n    var results = [];\r\n    source(function(tiddler, title) {\r\n        var tiddler = $tw.wiki.getTiddler(title),\r\n        fields = {};\r\n        if(tiddler){\r\n            try {\r\n                $tw.utils.each(tiddler.fields,function (value,name) {\r\n                    fields[name] = tiddler.getFieldString(name);\r\n                    \r\n                });\r\n                results.push(JSON.stringify(fields, null, 0));\r\n            } catch (e){};\r\n        }\r\n        \r\n    });\r\n    return results;\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "filteroperator",
            "revision": "0",
            "tags": ""
        },
        "$:/core/modules/filters/has.js": {
            "title": "$:/core/modules/filters/has.js",
            "text": "/*\\\r\ntitle: $:/core/modules/filters/has.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for checking if a tiddler has the specified field or index\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.has = function(source,operator,options) {\r\n\tvar results = [],\r\n\t\tinvert = operator.prefix === \"!\";\r\n\r\n\tif(operator.suffix === \"field\") {\r\n\t\tif(invert) {\r\n\t\t\tsource(function(tiddler,title) {\r\n\t\t\t\tif(!tiddler || (tiddler && (!$tw.utils.hop(tiddler.fields,operator.operand)))) {\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsource(function(tiddler,title) {\r\n\t\t\t\tif(tiddler && $tw.utils.hop(tiddler.fields,operator.operand)) {\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\telse if(operator.suffix === \"index\") {\r\n\t\tif(invert) {\r\n\t\t\tsource(function(tiddler,title) {\r\n\t\t\t\tif(!tiddler || (tiddler && (!$tw.utils.jsonHas($tw.wiki.getTiddlerDataCached(tiddler,Object.create(null)),operator.operand)))) {\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsource(function(tiddler,title) {\r\n\t\t\t\tif(tiddler && $tw.utils.jsonHas($tw.wiki.getTiddlerDataCached(tiddler,Object.create(null)),operator.operand)) {\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tif(invert) {\r\n\t\t\tsource(function(tiddler,title) {\r\n\t\t\t\tif(!tiddler || !$tw.utils.hop(tiddler.fields,operator.operand) || (tiddler.fields[operator.operand] === \"\")) {\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsource(function(tiddler,title) {\r\n\t\t\t\tif(tiddler && $tw.utils.hop(tiddler.fields,operator.operand) && !(tiddler.fields[operator.operand] === \"\" || tiddler.fields[operator.operand].length === 0)) {\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\t\r\n\t\t}\r\n\t}\r\n\treturn results;\r\n};\r\n\r\n})();\r\n",
            "type": "application/javascript",
            "module-type": "filteroperator"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/filters/hasindex.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/filters/hasindex.js",
            "text": "/*\\\r\ntitle:  $:/plugins/joshuafontany/jsonmangler/modules/filters/hasindex.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for checking if a Json data tiddler has the specified index\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.hasindex = function(source,operator,options) {\r\n\tvar results = [],\r\n\t\tinvert = operator.prefix === \"!\";\r\n\t\tif(invert) {\r\n\t\t\tsource(function(tiddler, title) {\r\n\t\t\t\tvar obj;\r\n\t\t\t\ttry {obj = JSON.parse($tw.wiki.getReference(title+\"!!text\"));\r\n\t\t\t\tif(!$tw.utils.jsonHas(obj,operator.operand)) \r\n\t\t\t\t{\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t\t} catch (e){};\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsource(function(tiddler, title) {\r\n\t\t\t\tvar obj;\r\n\t\t\t\ttry {obj = JSON.parse(tiddler.fields.text);\r\n\t\t\t\tif($tw.utils.jsonHas(obj,operator.operand)) \r\n\t\t\t\t{\r\n\t\t\t\t\tresults.push(title);\r\n\t\t\t\t}\r\n\t\t\t\t} catch (e){};\r\n\t\t\t});\r\n\t\t}\r\n\treturn results;\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "filteroperator"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/filters/slugify.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/filters/slugify.js",
            "text": "/*\\\r\ntitle:  $:/plugins/joshuafontany/jsonmangler/modules/filters/slugify.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for slugifying strings.\r\n\"slugify\" ~ to convert to a 'url-optimized' string. \r\nIn this case, a valid tiddler field-name.\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.slugify = function(source,operator,options) {\r\n    var results = [];\r\n    source(function(tiddler, title) {\r\n        $tw.utils.pushTop(results, $tw.utils.slugifyText(options.wiki, title));\r\n    });\r\n    return results;\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "filteroperator",
            "revision": "0",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/filters/tsort.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/filters/tsort.js",
            "text": "/*\\\r\ntitle:  $:/plugins/joshuafontany/jsonmangler/modules/filters/tsort.js\r\ntype: application/javascript\r\nmodule-type: filteroperator\r\n\r\nFilter operator for sorting via tokenization\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar alphanum = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/alphanum.js\");\r\n\r\n/*\r\nExport our filter function\r\n*/\r\nexports.tsort = function(source,operator,options) {\r\n\tvar results = prepare_results(source),\r\n\tinvert = operator.prefix === \"!\",\r\n\tcs = operator.operand === \"true\";\r\n\tcs ? results.sort(alphanum.alphanumCS): results.sort(alphanum.alphanum);\r\n\tif(invert) results.reverse();\r\n\treturn results;\r\n};\r\n\r\nvar prepare_results = function (source) {\r\n\tvar results = [];\r\n\tsource(function(tiddler,title) {\r\n\t\tresults.push(title);\r\n\t});\r\n\treturn results;\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "filteroperator",
            "created": "20190131071312206",
            "modified": "20190214024606691",
            "revision": "0",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/alphanum.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/alphanum.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/modules/libs/alphanum.js\r\ntype: application/javascript\r\nmodule-type: library\r\n\\*/\r\n\r\n/* alphanum.js (C) Brian Huisman\r\n * Based on the Alphanum Algorithm by David Koelle\r\n * The Alphanum Algorithm is discussed at http://www.DaveKoelle.com\r\n *\r\n * Distributed under same license as original\r\n *\r\n * Released under the MIT License - https://opensource.org/licenses/MIT\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n/* ********************************************************************\r\n * Alphanum Array prototype version\r\n *  - Much faster than the sort() function version\r\n *  - Ability to specify case sensitivity at runtime is a bonus\r\n *  * UNFORTUNATELY this introduces bugs in other tiddlywiki code because it \r\n * adds a property to all arrays when they are iterated with for.. in.. loops\r\n\r\nArray.prototype.alphanumSort = function(caseInsensitive) {\r\n  this.sort(function(a, b) {\r\n    function chunkify(t) {\r\n    var tz = new Array();\r\n    var x = 0, y = -1, n = 0, i, j;\r\n\r\n    while (i = (j = t.charAt(x++)).charCodeAt(0)) {\r\n      var m = (i == 46 || (i >=48 && i <= 57));\r\n      if (m !== n) {\r\n        tz[++y] = \"\";\r\n        n = m;\r\n      }\r\n      tz[y] += j;\r\n    }\r\n    return tz;\r\n  }\r\n\r\n  if(caseInsensitive){\r\n    var aa = chunkify(a.toLowerCase());\r\n    var bb = chunkify(b.toLowerCase());\r\n  }\r\n  else {\r\n    var aa = chunkify(a);\r\n    var bb = chunkify(b);\r\n  }\r\n\r\n  for ( var x = 0; aa[x] && bb[x]; x++) {\r\n    if (aa[x] !== bb[x]) {\r\n      var c = Number(aa[x]), d = Number(bb[x]);\r\n      if (c == aa[x] && d == bb[x]) {\r\n        return c - d;\r\n      } else return (aa[x] > bb[x]) ? 1 : -1;\r\n    }\r\n  }\r\n  return aa.length - bb.length;\r\n  });\r\n}\r\n */\r\n\r\n/* ********************************************************************\r\n * Alphanum sort() function version - case sensitive\r\n *  - Slower, but easier to modify for arrays of objects which contain\r\n *    string properties\r\n *\r\n */\r\nexports.alphanumCS = function(a, b) {\r\n  function chunkify(t) {\r\n    var tz = new Array();\r\n    var x = 0, y = -1, n = 0, i, j;\r\n\r\n    while (i = (j = t.charAt(x++)).charCodeAt(0)) {\r\n      var m = (i == 46 || (i >=48 && i <= 57));\r\n      if (m !== n) {\r\n        tz[++y] = \"\";\r\n        n = m;\r\n      }\r\n      tz[y] += j;\r\n    }\r\n    return tz;\r\n  }\r\n\r\n  var aa = chunkify(a);\r\n  var bb = chunkify(b);\r\n\r\n  for (var x = 0; aa[x] && bb[x]; x++) {\r\n    if (aa[x] !== bb[x]) {\r\n      var c = Number(aa[x]), d = Number(bb[x]);\r\n      if (c == aa[x] && d == bb[x]) {\r\n        return c - d;\r\n      } else return (aa[x] > bb[x]) ? 1 : -1;\r\n    }\r\n  }\r\n  return aa.length - bb.length;\r\n}\r\n\r\n\r\n/* ********************************************************************\r\n * Alphanum sort() function version - case insensitive\r\n *  - Slower, but easier to modify for arrays of objects which contain\r\n *    string properties\r\n *\r\n */\r\nexports.alphanum = function(a, b) {\r\n  function chunkify(t) {\r\n    var tz = new Array();\r\n    var x = 0, y = -1, n = 0, i, j;\r\n\r\n    while (i = (j = t.charAt(x++)).charCodeAt(0)) {\r\n      var m = (i == 46 || (i >=48 && i <= 57));\r\n      if (m !== n) {\r\n        tz[++y] = \"\";\r\n        n = m;\r\n      }\r\n      tz[y] += j;\r\n    }\r\n    return tz;\r\n  }\r\n\r\n  var aa = chunkify(a.toLowerCase());\r\n  var bb = chunkify(b.toLowerCase());\r\n\r\n  for (var x = 0; aa[x] && bb[x]; x++) {\r\n    if (aa[x] !== bb[x]) {\r\n      var c = Number(aa[x]), d = Number(bb[x]);\r\n      if (c == aa[x] && d == bb[x]) {\r\n        return c - d;\r\n      } else return (aa[x] > bb[x]) ? 1 : -1;\r\n    }\r\n  }\r\n  return aa.length - bb.length;\r\n}\r\n\r\n\r\n})();\r\n",
            "type": "application/javascript",
            "module-type": "library",
            "created": "20190131071312206",
            "modified": "20190214024606691",
            "revision": "0",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/csv/papaparse.min.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/csv/papaparse.min.js",
            "text": "/* @license\nPapa Parse\nv5.2.0\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=n&&/blob:/i.test((f.location||{}).protocol),a={},h=0,b={parse:function(e,t){var i=(t=t||{}).dynamicTyping||!1;U(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!U(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var r=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(i=f.URL||f.webkitURL||null,r=s.toString(),b.BLOB_URL||(b.BLOB_URL=i.createObjectURL(new Blob([\"(\",r,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var i,r;return t.onmessage=_,t.id=h++,a[t.id]=t}();return r.userStep=t.step,r.userChunk=t.chunk,r.userComplete=t.complete,r.userError=t.error,t.step=U(t.step),t.chunk=U(t.chunk),t.complete=U(t.complete),t.error=U(t.error),delete t.worker,void r.postMessage({input:e,config:t,workerId:r.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?n=t.download?new l(t):new p(t):!0===e.readable&&U(e.read)&&U(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",v=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines);\"string\"==typeof t.newline&&(v=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s)}();var o=new RegExp(q(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||h(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:h(e.data[0])),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function h(e){if(\"object\"!=typeof e)return[];var t=[];for(var i in e)t.push(i);return t}function u(e,t,i){var r=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=y(e[a],a);0<t.length&&(r+=v)}for(var o=0;o<t.length;o++){var h=n?e.length:t[o].length,u=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===i&&n){for(var d=[],l=0;l<h;l++){var c=s?e[l]:l;d.push(t[o][c])}u=\"\"===d.join(\"\").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!f&&(r+=m);var g=n&&s?e[p]:p;r+=y(t[o][g],p)}o<t.length-1&&(!i||0<h&&!f)&&(r+=v)}}return r}function y(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var i=e.toString().replace(o,a),r=\"boolean\"==typeof n&&n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1);return r?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=w,b.ParserHandle=i,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0!==h.length){var e,t,i,r,n=h[0];if(U(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(U(o.error)&&o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){U(a)&&a(e,n.file,n.inputElem),u()},b.parse(n.file,n.instanceConfig)}else U(o.complete)&&o.complete()}function u(){h.splice(0,1),e()}}}function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=E(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&U(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(e);void 0!==i&&(e=i)}this.isFirstChunk=!1,this._halted=!1;var r=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(r,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=r.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(U(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!U(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){U(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var r;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),u.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),n||(r.onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)r.setRequestHeader(t,e[t])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i)}try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:r.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){var t=r.statusText||e;this._sendError(new Error(t))}}function c(e){var r,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),u.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((r=new FileReader).onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)):r=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var i=r.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(r.error)}}function p(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=i.substring(0,t),i=i.substring(t)):(e=i,i=\"\"),this._finished=!i,this.parseChunk(e)}}}function g(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=y(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=y(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=y(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=y(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var a,o,h,r=Math.pow(2,53),n=-r,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)(e[-+]?\\d+)?\\s*$/,u=/(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/,t=this,i=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(U(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;i+=e.data.length,m.preview&&i>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function v(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){if(c&&h&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),h=!1),m.skipEmptyLines)for(var e=0;e<c.data.length;e++)v(c.data[e])&&c.data.splice(e--,1);return _()&&function(){if(!c)return;function e(e){U(m.transformHeader)&&(e=m.transformHeader(e)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var i,r=m.header?{}:[];for(i=0;i<e.length;i++){var n=i,s=e[i];m.header&&(n=i>=l.length?\"__parsed_extra\":l[i]),m.transform&&(s=m.transform(s,n)),s=y(n,s),\"__parsed_extra\"===n?(r[n]=r[n]||[],r[n].push(s)):r[n]=s}return m.header&&(i>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+i,f+t):i<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+i,f+t)),r}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function y(e,t){return i=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[i]&&(m.dynamicTyping[i]=m.dynamicTypingFunction(i)),!0===(m.dynamicTyping[i]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<r)return!0}return!1}(t)?parseFloat(t):u.test(t)?new Date(t):\"\"===t?null:t):t;var i}function k(e,t,i,r){var n={type:e,code:t,message:i};void 0!==r&&(n.row=r),c.errors.push(n)}this.parse=function(e,t,i){var r=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var i=new RegExp(q(t)+\"([^]*?)\"+q(t),\"gm\"),r=(e=e.replace(i,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<r[0].length;if(1===r.length||s)return\"\\n\";for(var a=0,o=0;o<r.length;o++)\"\\n\"===r[o][0]&&a++;return a>=r.length/2?\"\\r\\n\":\"\\r\"}(e,r)),h=!1,m.delimiter)U(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,i,r,n){var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var u=0;u<n.length;u++){var f=n[u],d=0,l=0,c=0;o=void 0;for(var p=new w({comments:r,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(i&&v(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===h||h<l)&&1.99<l&&(a=d,s=f,h=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(h=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=E(m);return m.preview&&m.header&&s.preview++,a=e,o=new w(s),c=o.parse(a,t,i),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=U(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,U(m.complete)&&m.complete(c),a=\"\"}}function q(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function w(e){var O,D=(e=e||{}).delimiter,I=e.newline,T=e.comments,A=e.step,L=e.preview,F=e.fastMode,z=O=void 0===e.quoteChar?'\"':e.quoteChar;if(void 0!==e.escapeChar&&(z=e.escapeChar),(\"string\"!=typeof D||-1<b.BAD_DELIMITERS.indexOf(D))&&(D=\",\"),T===D)throw new Error(\"Comment character same as delimiter\");!0===T?T=\"#\":(\"string\"!=typeof T||-1<b.BAD_DELIMITERS.indexOf(T))&&(T=!1),\"\\n\"!==I&&\"\\r\"!==I&&\"\\r\\n\"!==I&&(I=\"\\n\");var M=0,j=!1;this.parse=function(a,t,i){if(\"string\"!=typeof a)throw new Error(\"Input must be a string\");var r=a.length,e=D.length,n=I.length,s=T.length,o=U(A),h=[],u=[],f=[],d=M=0;if(!a)return R();if(F||!1!==F&&-1===a.indexOf(O)){for(var l=a.split(I),c=0;c<l.length;c++){if(f=l[c],M+=f.length,c!==l.length-1)M+=I.length;else if(i)return R();if(!T||f.substring(0,s)!==T){if(o){if(h=[],b(f.split(D)),S(),j)return R()}else b(f.split(D));if(L&&L<=c)return h=h.slice(0,L),R(!0)}}return R()}for(var p=a.indexOf(D,M),g=a.indexOf(I,M),_=new RegExp(q(z)+q(O),\"g\"),m=a.indexOf(O,M);;)if(a[M]!==O)if(T&&0===f.length&&a.substring(M,M+s)===T){if(-1===g)return R();M=g+n,g=a.indexOf(I,M),p=a.indexOf(D,M)}else{if(-1!==p&&(p<g||-1===g)){if(!(p<m)){f.push(a.substring(M,p)),M=p+e,p=a.indexOf(D,M);continue}var v=x(p,m,g);if(v&&void 0!==v.nextDelim){p=v.nextDelim,m=v.quoteSearch,f.push(a.substring(M,p)),M=p+e,p=a.indexOf(D,M);continue}}if(-1===g)break;if(f.push(a.substring(M,g)),C(g+n),o&&(S(),j))return R();if(L&&h.length>=L)return R(!0)}else for(m=M,M++;;){if(-1===(m=a.indexOf(O,m+1)))return i||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:M}),E();if(m===r-1)return E(a.substring(M,m).replace(_,O));if(O!==z||a[m+1]!==z){if(O===z||0===m||a[m-1]!==z){-1!==p&&p<m+1&&(p=a.indexOf(D,m+1)),-1!==g&&g<m+1&&(g=a.indexOf(I,m+1));var y=w(-1===g?p:Math.min(p,g));if(a[m+1+y]===D){f.push(a.substring(M,m).replace(_,O)),a[M=m+1+y+e]!==O&&(m=a.indexOf(O,M)),p=a.indexOf(D,M),g=a.indexOf(I,M);break}var k=w(g);if(a.substring(m+1+k,m+1+k+n)===I){if(f.push(a.substring(M,m).replace(_,O)),C(m+1+k+n),p=a.indexOf(D,M),m=a.indexOf(O,M),o&&(S(),j))return R();if(L&&h.length>=L)return R(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:M}),m++}}else m++}return E();function b(e){h.push(e),d=M}function w(e){var t=0;if(-1!==e){var i=a.substring(m+1,e);i&&\"\"===i.trim()&&(t=i.length)}return t}function E(e){return i||(void 0===e&&(e=a.substring(M)),f.push(e),M=r,b(f),o&&S()),R()}function C(e){M=e,b(f),f=[],g=a.indexOf(I,M)}function R(e){return{data:h,errors:u,meta:{delimiter:D,linebreak:I,aborted:j,truncated:!!e,cursor:d+(t||0)}}}function S(){A(R()),h=[],u=[]}function x(e,t,i){var r={nextDelim:void 0,quoteSearch:void 0},n=a.indexOf(O,t+1);if(t<e&&e<n&&(n<i||-1===i)){var s=a.indexOf(D,n);if(-1===s)return r;n<s&&(n=a.indexOf(O,n+1)),r=x(s,n,i)}else r={nextDelim:e,quoteSearch:t};return r}},this.abort=function(){j=!0},this.getCharIndex=function(){return M}}function _(e){var t=e.data,i=a[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:v,resume:v};if(U(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else U(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&m(t.workerId,t.results)}function m(e,t){var i=a[e];U(i.userComplete)&&i.userComplete(t),i.terminate(),delete a[e]}function v(){throw new Error(\"Not implemented.\")}function E(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var i in e)t[i]=E(e[i]);return t}function y(e,t){return function(){e.apply(t,arguments)}}function U(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var i=b.parse(t.input,t.config);i&&f.postMessage({workerId:b.WORKER_ID,results:i,finished:!0})}}),(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(u.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(u.prototype)).constructor=g,b});",
            "type": "application/javascript",
            "module-type": "library",
            "version": "5.2.0"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/foreach.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/foreach.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/modules/libs/foreach.js\r\ntype: application/javascript\r\nmodule-type: library\r\n\r\nhttps://github.com/manuelstofer/foreach\r\n\r\nThe MIT License (MIT):\r\n\r\nCopyright (c) 2013 Manuel Stofer\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\\*/\r\n\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\nvar toString = Object.prototype.toString;\r\n\r\nmodule.exports = function forEach (obj, fn, ctx) {\r\n    if (toString.call(fn) !== '[object Function]') {\r\n        throw new TypeError('iterator must be a function');\r\n    }\r\n    var l = obj.length;\r\n    if (l === +l) {\r\n        for (var i = 0; i < l; i++) {\r\n            fn.call(ctx, obj[i], i, obj);\r\n        }\r\n    } else {\r\n        for (var k in obj) {\r\n            if (hasOwn.call(obj, k)) {\r\n                fn.call(ctx, obj[k], k, obj);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "library",
            "created": "20190131071312206",
            "modified": "20190214024606691",
            "revision": "0",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js\r\ntype: application/javascript\r\nmodule-type: library\r\n\r\nhttps://github.com/manuelstofer/json-pointer\r\n\r\nThe MIT License (MIT):\r\n\r\nCopyright (c) 2016 Manuel Stofer\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\\*/\r\n\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar each = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/foreach.js\");\r\n\r\n/**\r\n * Convenience wrapper around the api.\r\n * Calls `.get` when called with an `object` and a `pointer`.\r\n * Calls `.set` when also called with `value`.\r\n * If only supplied `object`, returns a partially applied function, mapped to the object.\r\n *\r\n * @param {Object} obj\r\n * @param {String|Array} pointer\r\n * @param value\r\n * @returns {*}\r\n */\r\n\r\nfunction api (obj, pointer, value) {\r\n    // .set()\r\n    if (arguments.length === 3) {\r\n        return api.set(obj, pointer, value);\r\n    }\r\n    // .get()\r\n    if (arguments.length === 2) {\r\n        return api.get(obj, pointer);\r\n    }\r\n    // Return a partially applied function on `obj`.\r\n    var wrapped = api.bind(api, obj);\r\n\r\n    // Support for oo style\r\n    for (var name in api) {\r\n        if (api.hasOwnProperty(name)) {\r\n            wrapped[name] = api[name].bind(wrapped, obj);\r\n        }\r\n    }\r\n    return wrapped;\r\n}\r\n\r\n/**\r\n * Lookup a json pointer in an object\r\n *\r\n * @param {Object} obj\r\n * @param {String|Array} pointer\r\n * @returns {*}\r\n */\r\napi.get = function get (obj, pointer) {\r\n    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);\r\n\r\n    for (var i = 0; i < refTokens.length; ++i) {\r\n        var tok = refTokens[i];\r\n        if (!(typeof obj == 'object' && tok in obj)) {\r\n            throw new Error('Invalid reference token: ' + tok);\r\n        }\r\n        obj = obj[tok];\r\n    }\r\n    return obj;\r\n};\r\n\r\n/**\r\n * Sets a value on an object\r\n *\r\n * @param {Object} obj\r\n * @param {String|Array} pointer\r\n * @param value\r\n */\r\napi.set = function set (obj, pointer, value) {\r\n    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer),\r\n      nextTok = refTokens[0];\r\n    if (refTokens.length === 0) {\r\n      throw Error('Can not set the root object');\r\n    }\r\n    //throw on a non-numeric key on an existing array object\r\n    function test() {\r\n        if (obj.constructor === Array) {\r\n            if (!nextTok.match(/^\\/*(\\d+|-)$/)) {\r\n                throw \"Json Set Error:/\"+refTokens.join('/')+\"\\n\"+\r\n                \"Unable to set a non-numeric key (\"+nextTok+\") on an exiting array object.\";\r\n            }\r\n        }\r\n    }\r\n    test();\r\n\r\n    for (var i = 0; i < refTokens.length - 1; ++i) {\r\n        var tok = refTokens[i];\r\n        if (tok === '-' && Array.isArray(obj)) {\r\n          tok = obj.length;\r\n        }\r\n\r\n        nextTok = refTokens[i + 1];\r\n\r\n        if (!(tok in obj) || !(obj[tok] === Object(obj[tok]))) {\r\n            if (nextTok.match(/^(\\d+|-)$/)) {\r\n                obj[tok] = [];\r\n            } else {\r\n                obj[tok] = {};\r\n            }\r\n        }      \r\n        obj = obj[tok];\r\n        //throw on a non-numeric key on an existing array object\r\n       test();\r\n    }\r\n    if (nextTok === '-' && Array.isArray(obj)) {\r\n      nextTok = obj.length;\r\n    }\r\n    obj[nextTok] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an attribute\r\n *\r\n * @param {Object} obj\r\n * @param {String|Array} pointer\r\n */\r\napi.remove = function (obj, pointer) {\r\n    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);\r\n    var finalToken = refTokens[refTokens.length -1];\r\n    if (finalToken === undefined) {\r\n        throw new Error('Invalid JSON pointer for remove: \"' + pointer + '\"');\r\n    }\r\n\r\n    var parent = api.get(obj, refTokens.slice(0, -1));\r\n    if (Array.isArray(parent)) {\r\n      var index = +finalToken;\r\n      if (finalToken === '' && isNaN(index)) {\r\n        throw new Error('Invalid array index: \"' + finalToken + '\"');\r\n      }\r\n      Array.prototype.splice.call(parent, index, 1);\r\n    } else {\r\n      delete parent[finalToken];\r\n    }\r\n    if(Object.keys(parent).length == 0 && refTokens.length > 1) {\r\n\t\tapi.remove(obj, refTokens.slice(0, -1));\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns a (pointer -> value) dictionary for an object\r\n *\r\n * @param data\r\n * @returns newData\r\n */\r\n\r\napi.reassign = function (data) {\r\n    if(!data) throw \"pointer error: assign failed, invalid data object\";\r\n\tvar allKeys = Object.keys(data), newData;\r\n\t//Test if Array\r\n\tif(data.constructor === Array){\r\n        newData = Object.assign({}, data);\r\n        data = newData;\r\n    }\r\n    else if(!(data.constructor === Array) && typeof data == \"object\") {\r\n        newData = [];\r\n        //Test top-level keys, convert all numeral keys into the array contents\r\n        //This discards all non-numeric keys! Test for this before calling.\r\n\t\tfor (let i = 0; i < allKeys.length; i++) {\r\n                const key = allKeys[i], newKey = parseInt(allKeys[i], 10);\r\n\t\t\t    if(newKey != NaN) newData[newKey] = data[key];\r\n\t\t}\r\n\t\tdata = newData;\r\n    }\r\n    return data;\r\n};\r\n\r\n/**\r\n * Returns a (pointer -> value) dictionary for an object\r\n *\r\n * @param obj\r\n * @param {function} descend\r\n * @returns {}\r\n */\r\napi.dict = function dict (obj, descend) {\r\n    var results = {};\r\n    api.walk(obj, function (value, pointer) {\r\n        results[pointer] = value;\r\n    }, descend);\r\n    return results;\r\n};\r\n\r\n/**\r\n * Iterates over an object\r\n * Iterator: function (value, pointer) {}\r\n *\r\n * @param obj\r\n * @param {function} iterator\r\n * @param {function} descend\r\n */\r\napi.walk = function walk (obj, iterator, descend) {\r\n    var refTokens = [];\r\n\r\n    descend = descend || function (value) {\r\n        var type = Object.prototype.toString.call(value);\r\n        return type === '[object Object]' || type === '[object Array]';\r\n    };\r\n\r\n    (function next (cur) {\r\n        each(cur, function (value, key) {\r\n            refTokens.push(String(key));\r\n            if (descend(value)) {\r\n                next(value);\r\n            } else {\r\n                iterator(value, api.compile(refTokens));\r\n            }\r\n            refTokens.pop();\r\n        });\r\n    }(obj));\r\n};\r\n\r\n/**\r\n * Tests if an object has a value for a json pointer\r\n *\r\n * @param obj\r\n * @param pointer\r\n * @returns {boolean}\r\n */\r\napi.has = function has (obj, pointer) {\r\n    try {\r\n        api.get(obj, pointer);\r\n    } catch (e) {\r\n        //throw \"pointer error: \" +e.toString();\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Escapes a reference token\r\n *\r\n * @param str\r\n * @returns {string}\r\n */\r\napi.escape = function escape (str) {\r\n    return str.toString().replace(/~/g, '~0').replace(/\\//g, '~1');\r\n};\r\n\r\n/**\r\n * Unescapes a reference token\r\n *\r\n * @param str\r\n * @returns {string}\r\n */\r\napi.unescape = function unescape (str) {\r\n    return str.replace(/~1/g, '/').replace(/~0/g, '~');\r\n};\r\n\r\n/**\r\n * Converts a json pointer into a array of reference tokens\r\n *\r\n * @param pointer\r\n * @returns {Array}\r\n */\r\napi.parse = function parse (pointer) {\r\n    if (pointer === '') { return []; }\r\n    if (pointer.charAt(0) !== '/') { throw new Error('Invalid JSON pointer: ' + pointer); }\r\n\r\n    var arr = [];\r\n    arr = arr.filter(entry => /\\S/.test(entry));\r\n    return pointer.substring(1).split(/\\//).map(api.unescape);\r\n};\r\n\r\n/**\r\n * Builds a json pointer from a array of reference tokens\r\n *\r\n * @param refTokens\r\n * @returns {string}\r\n */\r\napi.compile = function compile (refTokens) {\r\n    if (refTokens.length === 0) { return ''; }\r\n    return '/' + refTokens.map(api.escape).join('/');\r\n};\r\n\r\nmodule.exports = api;\r\n})();",
            "type": "application/javascript",
            "module-type": "library",
            "created": "20181204022819551",
            "modified": "20190214024606691",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/jsonschema_instantiator.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/jsonschema_instantiator.js",
            "text": "/**\n * @name JSON Schema Instantiator\n * @description A simple tool for instantiating JSON Schemas\n * @version 0.4.8\n * @author Tom Arad\n * @see https://github.com/tomarad/JSON-Schema-Instantiator\n * @license MIT 2015\n */\n\n'use strict';\n\n// The JSON Object that defines the default values of certain types.\nvar typesInstantiator = {\n  'string': '',\n  'number': 0,\n  'integer': 0,\n  'null': null,\n  'boolean': false, // Always stay positive?\n  'object': { }\n};\n\n/**\n * Checks whether a variable is a primitive.\n * @param obj - an object.\n * @returns {boolean}\n */\nfunction isPrimitive(obj) {\n  var type = obj.type;\n\n  return typesInstantiator[type] !== undefined;\n}\n\n/**\n * Checks whether a property is on required array.\n * @param property - the property to check.\n * @param requiredArray - the required array\n * @returns {boolean}\n */\nfunction isPropertyRequired(property, requiredArray) {\n  var found = false;\n  requiredArray = requiredArray || [];\n  requiredArray.forEach(function(requiredProperty) {\n      if (requiredProperty === property) {\n        found = true;\n      }\n  });\n  return found;\n}\n\n\nfunction shouldVisit(property, obj, options) {\n    return (!options.requiredPropertiesOnly) || (options.requiredPropertiesOnly && isPropertyRequired(property, obj.required));\n}\n\n/**\n * Instantiate a primitive.\n * @param val - The object that represents the primitive.\n * @returns {*}\n */\nfunction instantiatePrimitive(val) {\n  var type = val.type;\n\n  // Support for default values in the JSON Schema.\n  if (val.hasOwnProperty('default')) {\n    return val.default;\n  }\n\n  return typesInstantiator[type];\n}\n\n/**\n * Checks whether a variable is an enum.\n * @param obj - an object.\n * @returns {boolean}\n */\nfunction isEnum(obj) {\n  return Object.prototype.toString.call(obj.enum) === '[object Array]';\n}\n\n/**\n * Checks whether a variable is an array.\n * @param obj - an object.\n * @returns {boolean}\n */\nfunction isArray(obj) {\n  return Array.isArray(obj);\n}\n\n/**\n * Extracts the type of the object.\n * If the type is an array, set type to first in list of types.\n * If obj.type is not overridden, it will fail the isPrimitive check.\n * Which internally also checks obj.type.\n * @param obj - An object.\n*/\nfunction getObjectType(obj) {\n  // Check if type is array of types.\n  if (isArray(obj.type)) {\n    obj.type = obj.type[0];\n  }\n\n  return obj.type;\n}\n\n/**\n * Instantiate an enum.\n * @param val - The object that represents the primitive.\n * @returns {*}\n */\nfunction instantiateEnum(val) {\n  // Support for default values in the JSON Schema.\n  if (val.default) {\n      return val.default;\n  }\n  if (!val.enum.length) {\n      return undefined;\n  }\n  return val.enum[0];\n}\n\n/**\n * Finds a definition in a schema.\n * Useful for finding references.\n *\n * @param schema    The full schema object.\n * @param ref       The reference to find.\n * @return {*}      The object representing the ref.\n */\nfunction findDefinition(schema, ref) {\n  var propertyPath = ref.split('/').slice(1); // Ignore the #/uri at the beginning.\n  var currentProperty = propertyPath.splice(0, 1)[0];\n\n  var currentValue = schema;\n\n  while (currentProperty) {\n    currentValue = currentValue[currentProperty];\n    currentProperty = propertyPath.splice(0, 1)[0];\n  }\n\n  return currentValue;\n}\n\n/**\n * The main function.\n * Calls sub-objects recursively, depth first, using the sub-function 'visit'.\n * @param schema - The schema to instantiate.\n * @returns {*}\n */\nfunction instantiate(schema, options) {\n  options = options || {};\n\n  /**\n   * Visits each sub-object using recursion.\n   * If it reaches a primitive, instantiate it.\n   * @param obj - The object that represents the schema.\n   * @param name - The name of the current object.\n   * @param data - The instance data that represents the current object.\n   */\n  function visit(obj, name, data) {\n    if (!obj) {\n      return;\n    }\n\n    var i;\n    var type = getObjectType(obj);\n\n    // We want non-primitives objects (primitive === object w/o properties).\n    if (type === 'object' && obj.properties) {\n      data[name] = data[name] || { };\n\n      // Visit each property.\n      for (var property in obj.properties) {\n        if (obj.properties.hasOwnProperty(property)) {\n          if (shouldVisit(property, obj, options)) {\n            visit(obj.properties[property], property, data[name]);\n          }\n        }\n      }\n    } else if (obj.allOf) {\n      for (i = 0; i < obj.allOf.length; i++) {\n        visit(obj.allOf[i], name, data);\n      }\n    } else if (obj.$ref) {\n      obj = findDefinition(schema, obj.$ref);\n      visit(obj, name, data);\n    } else if (type === 'array') {\n      data[name] = [];\n      var len = 0;\n      if (obj.minItems || obj.minItems > 0) {\n        len = obj.minItems;\n      }\n\n      // Instantiate 'len' items.\n      for (i = 0; i < len; i++) {\n        visit(obj.items, i, data[name]);\n      }\n    } else if (isEnum(obj)) {\n      data[name] = instantiateEnum(obj);\n    } else if (isPrimitive(obj)) {\n      data[name] = instantiatePrimitive(obj);\n    }\n  }\n\n  var data = {};\n  visit(schema, 'kek', data);\n  return data['kek'];\n}\n\n// If we're using Node.js, export the module.\nif (typeof module !== 'undefined') {\n  module.exports = {\n    instantiate: instantiate\n  };\n}\n\n'use strict';\n\n/* angular.module('schemaInstantiator', [])\n\n  .service('InstantiatorService', function InstantiatorService() {\n    this.instantiate = instantiate;\n  }); */\n",
            "module-type": "library",
            "tags": "",
            "type": "application/javascript"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/isEqual.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/isEqual.js",
            "text": "/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/keys.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/keys.js",
            "text": "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash_LICENSE.md": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash_LICENSE.md",
            "text": "Copyright JS Foundation and other contributors <https://js.foundation/>\n\nBased on Underscore.js, copyright Jeremy Ashkenas,\nDocumentCloud and Investigative Reporters & Editors <http://underscorejs.org/>\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/lodash/lodash\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code displayed within the prose of the\ndocumentation.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nFiles located in the node_modules and vendor directories are externally\nmaintained libraries used by this software which have their own\nlicenses; we recommend you read them, as their terms may differ from the\nterms above.\n",
            "type": "text/html"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/merge.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/merge.js",
            "text": "/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  return key == '__proto__'\n    ? undefined\n    : object[key];\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    if (isObject(srcValue)) {\n      stack || (stack = new Stack);\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = merge;\n",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/xor.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/xor.js",
            "text": "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array ? array.length : 0;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a cache value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    Set = getNative(root, 'Set'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var index = -1,\n      length = arrays.length;\n\n  while (++index < length) {\n    var result = result\n      ? arrayPush(\n          baseDifference(result, arrays[index], iteratee, comparator),\n          baseDifference(arrays[index], result, iteratee, comparator)\n        )\n      : arrays[index];\n  }\n  return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\n}\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of unique values that is the\n * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n * of the given arrays. The order of result values is determined by the order\n * they occur in the arrays.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.without\n * @example\n *\n * _.xor([2, 1], [2, 3]);\n * // => [1, 3]\n */\nvar xor = baseRest(function(arrays) {\n  return baseXor(arrayFilter(arrays, isArrayLikeObject));\n});\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = xor;\n",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema.js": {
            "text": "/**\n * @name JSON To JSON Schema\n * @description A simple tool for creating JSON Schemas\n * @version 0.2.0\n * @author David Ruzicka\n * @see https://github.com/ruzicka/to-json-schema\n * @license MIT 2017\n */\n\n'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar merge = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/merge.js\");\nvar isEqual = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/isEqual.js\");\n\nvar helpers = require('$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema/helpers.js');\n\nvar defaultOptions = {\n  required: false,\n  postProcessFnc: null,\n\n  strings: {\n    detectFormat: true,\n    preProcessFnc: null\n  },\n  arrays: {\n    mode: 'all'\n  },\n  objects: {\n    preProcessFnc: null,\n    postProcessFnc: null,\n    additionalProperties: true\n  }\n};\n\nvar skipReverseFind = ['hostname', 'host-name', 'alpha', 'alphanumeric', 'regex', 'regexp', 'pattern'];\nvar filteredFormats = helpers.stringFormats.filter(function (item) {\n  return skipReverseFind.indexOf(item) < 0;\n});\n\nfunction getCommonTypeFromArrayOfTypes(arrOfTypes) {\n  var lastVal = void 0;\n  for (var i = 0, length = arrOfTypes.length; i < length; i++) {\n    var currentType = arrOfTypes[i];\n    if (i > 0) {\n      if (currentType === 'integer' && lastVal === 'number') {\n        currentType = 'number';\n      } else if (currentType === 'number' && lastVal === 'integer') {\n        lastVal = 'number';\n      }\n      if (lastVal !== currentType) return null;\n    }\n    lastVal = currentType;\n  }\n  return lastVal;\n}\n\nfunction getCommonArrayItemsType(arr) {\n  return getCommonTypeFromArrayOfTypes(arr.map(function (item) {\n    return helpers.getType(item);\n  }));\n}\n\nvar ToJsonSchema = function () {\n  function ToJsonSchema(options) {\n    _classCallCheck(this, ToJsonSchema);\n\n    this.options = merge({}, defaultOptions, options);\n\n    this.getObjectSchemaDefault = this.getObjectSchemaDefault.bind(this);\n    this.getStringSchemaDefault = this.getStringSchemaDefault.bind(this);\n    this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);\n    this.commmonPostProcessDefault = this.commmonPostProcessDefault.bind(this);\n    this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);\n  }\n\n  /**\n   * Tries to find the least common schema that would validate all items in the array. More details\n   * helpers.mergeSchemaObjs description\n   * @param {array} arr\n   * @returns {object|null}\n   */\n\n\n  _createClass(ToJsonSchema, [{\n    key: 'getCommonArrayItemSchema',\n    value: function getCommonArrayItemSchema(arr) {\n      var _this = this;\n\n      var schemas = arr.map(function (item) {\n        return _this.getSchema(item);\n      });\n      // schemas.forEach(schema => console.log(JSON.stringify(schema, '\\t')))\n      return schemas.reduce(function (acc, current) {\n        return helpers.mergeSchemaObjs(acc, current);\n      }, schemas.pop());\n    }\n  }, {\n    key: 'getObjectSchemaDefault',\n    value: function getObjectSchemaDefault(obj) {\n      var _this2 = this;\n\n      var schema = { type: 'object' };\n      var objKeys = Object.keys(obj);\n      if (objKeys.length > 0) {\n        schema.properties = objKeys.reduce(function (acc, propertyName) {\n          acc[propertyName] = _this2.getSchema(obj[propertyName]); // eslint-disable-line no-param-reassign\n          return acc;\n        }, {});\n      }\n      return schema;\n    }\n  }, {\n    key: 'getObjectSchema',\n    value: function getObjectSchema(obj) {\n      if (this.options.objects.preProcessFnc) {\n        return this.options.objects.preProcessFnc(obj, this.getObjectSchemaDefault);\n      }\n      return this.getObjectSchemaDefault(obj);\n    }\n  }, {\n    key: 'getArraySchemaMerging',\n    value: function getArraySchemaMerging(arr) {\n      var schema = { type: 'array' };\n      var commonType = getCommonArrayItemsType(arr);\n      if (commonType) {\n        schema.items = { type: commonType };\n        if (commonType !== 'integer' && commonType !== 'number') {\n          var itemSchema = this.getCommonArrayItemSchema(arr);\n          if (itemSchema) {\n            schema.items = itemSchema;\n          }\n        } else if (this.options.required) {\n          schema.items.required = true;\n        }\n      }\n      return schema;\n    }\n  }, {\n    key: 'getArraySchemaNoMerging',\n    value: function getArraySchemaNoMerging(arr) {\n      var schema = { type: 'array' };\n      if (arr.length > 0) {\n        schema.items = this.getSchema(arr[0]);\n      }\n      return schema;\n    }\n  }, {\n    key: 'getArraySchemaUniform',\n    value: function getArraySchemaUniform(arr) {\n      var schema = this.getArraySchemaNoMerging(arr);\n\n      if (arr.length > 1) {\n        for (var i = 1; i < arr.length; i++) {\n          if (!isEqual(schema.items, this.getSchema(arr[i]))) {\n            throw new Error('Invalid schema, incompatible array items');\n          }\n        }\n      }\n      return schema;\n    }\n  }, {\n    key: 'getArraySchema',\n    value: function getArraySchema(arr) {\n      if (arr.length === 0) {\n        return { type: 'array' };\n      }\n      switch (this.options.arrays.mode) {\n        case 'all':\n          return this.getArraySchemaMerging(arr);\n        case 'first':\n          return this.getArraySchemaNoMerging(arr);\n        case 'uniform':\n          return this.getArraySchemaUniform(arr);\n        default:\n          throw new Error('Unknown array mode option \\'' + this.options.arrays.mode + '\\'');\n      }\n    }\n  }, {\n    key: 'getStringSchemaDefault',\n    value: function getStringSchemaDefault(value) {\n      var schema = { type: 'string' };\n\n      if (!this.options.strings.detectFormat) {\n        return schema;\n      }\n\n      var index = filteredFormats.findIndex(function (item) {\n        return helpers.isFormat(value, item);\n      });\n      if (index >= 0) {\n        schema.format = filteredFormats[index];\n      }\n\n      return schema;\n    }\n  }, {\n    key: 'getStringSchema',\n    value: function getStringSchema(value) {\n      if (this.options.strings.preProcessFnc) {\n        return this.options.strings.preProcessFnc(value, this.getStringSchemaDefault);\n      }\n      return this.getStringSchemaDefault(value);\n    }\n  }, {\n    key: 'commmonPostProcessDefault',\n    value: function commmonPostProcessDefault(type, schema, value) {\n      // eslint-disable-line no-unused-vars\n      if (this.options.required) {\n        return _extends({}, schema, { required: true });\n      }\n      return schema;\n    }\n  }, {\n    key: 'objectPostProcessDefault',\n    value: function objectPostProcessDefault(schema, obj) {\n      if (this.options.objects.additionalProperties === false && Object.getOwnPropertyNames(obj).length > 0) {\n        return _extends({}, schema, { additionalProperties: false });\n      }\n      return schema;\n    }\n\n    /**\n     * Gets JSON schema for provided value\n     * @param value\n     * @returns {object}\n     */\n\n  }, {\n    key: 'getSchema',\n    value: function getSchema(value) {\n      var type = helpers.getType(value);\n      if (!type) {\n        throw new Error(\"Type of value couldn't be determined\");\n      }\n\n      var schema = void 0;\n      switch (type) {\n        case 'object':\n          schema = this.getObjectSchema(value);\n          break;\n        case 'array':\n          schema = this.getArraySchema(value);\n          break;\n        case 'string':\n          schema = this.getStringSchema(value);\n          break;\n        default:\n          schema = { type: type };\n      }\n\n      if (this.options.postProcessFnc) {\n        schema = this.options.postProcessFnc(type, schema, value, this.commmonPostProcessDefault);\n      } else {\n        schema = this.commmonPostProcessDefault(type, schema, value);\n      }\n\n      if (type === 'object') {\n        if (this.options.objects.postProcessFnc) {\n          schema = this.options.objects.postProcessFnc(schema, value, this.objectPostProcessDefault);\n        } else {\n          schema = this.objectPostProcessDefault(schema, value);\n        }\n      }\n\n      return schema;\n    }\n  }]);\n\n  return ToJsonSchema;\n}();\n\nfunction toJsonSchema(value, options) {\n  var tjs = new ToJsonSchema(options);\n  return tjs.getSchema(value);\n}\n\nmodule.exports = toJsonSchema;",
            "type": "application/javascript",
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema.js",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema/helpers.js": {
            "text": "'use strict';\n\nvar isEqual = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/isEqual.js\");\nvar xor = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/xor.js\");\nvar keys = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/keys.js\");\n\nvar _require = require('$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema/jsonSchemaHelpers.js'),\n    types = _require.types,\n    FORMAT_REGEXPS = _require.FORMAT_REGEXPS,\n    isFormat = _require.isFormat;\n\nvar helpers = {\n\n  stringFormats: keys(FORMAT_REGEXPS),\n\n  isFormat: isFormat,\n\n  typeNames: ['integer', 'number', // make sure number is after integer (for proper type detection)\n  'string', 'array', 'object', 'boolean', 'null', 'date'],\n\n  getType: function getType(val) {\n    return helpers.typeNames.find(function (typeName) {\n      return types[typeName](val);\n    });\n  },\n\n\n  /**\n   * Tries to find the least common schema from two supplied JSON schemas. If it is unable to find\n   * such a schema, it returns null. Incompatibility in structure/types leads to returning null,\n   * except when the difference is only integer/number. Than the 'number' is used instead 'int'.\n   * Types/Structure incompatibility in array items only leads to schema that doesn't specify\n   * items structure/type.\n   * @param {object} schema1 - JSON schema\n   * @param {object} schema2 - JSON schema\n   * @returns {object|null}\n   */\n  mergeSchemaObjs: function mergeSchemaObjs(schema1, schema2) {\n    var schema1Keys = keys(schema1);\n    var schema2Keys = keys(schema2);\n    if (!isEqual(schema1Keys, schema2Keys)) {\n      if (schema1.type === 'array' && schema2.type === 'array') {\n        // TODO optimize???\n        if (isEqual(xor(schema1Keys, schema2Keys), ['items'])) {\n          var schemaWithoutItems = schema1Keys.length > schema2Keys.length ? schema2 : schema1;\n          var schemaWithItems = schema1Keys.length > schema2Keys.length ? schema1 : schema2;\n          var isSame = keys(schemaWithoutItems).reduce(function (acc, current) {\n            return isEqual(schemaWithoutItems[current], schemaWithItems[current]) && acc;\n          }, true);\n          if (isSame) {\n            return schemaWithoutItems;\n          }\n        }\n      }\n      if (schema1.type !== 'object' || schema2.type !== 'object') {\n        return null;\n      }\n    }\n\n    var retObj = {};\n    for (var i = 0, length = schema1Keys.length; i < length; i++) {\n      var key = schema1Keys[i];\n      if (helpers.getType(schema1[key]) === 'object') {\n        var x = helpers.mergeSchemaObjs(schema1[key], schema2[key]);\n        if (!x) {\n          if (schema1.type === 'object' || schema2.type === 'object') {\n            return { type: 'object' };\n          }\n          // special treatment for array items. If not mergeable, we can do without them\n          if (key !== 'items' || schema1.type !== 'array' || schema2.type !== 'array') {\n            return null;\n          }\n        } else {\n          retObj[key] = x;\n        }\n      } else {\n        // simple value schema properties (not defined by object)\n        if (key === 'type') {\n          // eslint-disable-line no-lonely-if\n          if (schema1[key] !== schema2[key]) {\n            if (schema1[key] === 'integer' && schema2[key] === 'number' || schema1[key] === 'number' && schema2[key] === 'integer') {\n              retObj[key] = 'number';\n            } else {\n              return null;\n            }\n          } else {\n            retObj[key] = schema1[key];\n          }\n        } else {\n          if (!isEqual(schema1[key], schema2[key])) {\n            // TODO Is it even possible to take this path?\n            return null;\n          }\n          retObj[key] = schema1[key];\n        }\n      }\n    }\n    return retObj;\n  }\n};\n\nmodule.exports = helpers;",
            "type": "application/javascript",
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema/helpers.js",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema/jsonSchemaHelpers.js": {
            "text": "'use strict';\n\n// content of this file is extracted from jsonschema source\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar types = {\n  string: function testString(instance) {\n    return typeof instance === 'string';\n  },\n\n  number: function testNumber(instance) {\n    // isFinite returns false for NaN, Infinity, and -Infinity\n    return typeof instance === 'number' && isFinite(instance); // eslint-disable-line no-restricted-globals\n  },\n\n  integer: function testInteger(instance) {\n    return typeof instance === 'number' && instance % 1 === 0;\n  },\n\n  boolean: function testBoolean(instance) {\n    return typeof instance === 'boolean';\n  },\n\n  array: function testArray(instance) {\n    return instance instanceof Array;\n  },\n\n  null: function testNull(instance) {\n    return instance === null;\n  },\n\n  date: function testDate(instance) {\n    return instance instanceof Date;\n  },\n\n  any: /* istanbul ignore next: not using this but keeping it here for sake of completeness */\n  function testAny(instance) {\n    // eslint-disable-line no-unused-vars\n    return true;\n  },\n\n  object: function testObject(instance) {\n    return instance && (typeof instance === 'undefined' ? 'undefined' : _typeof(instance)) === 'object' && !(instance instanceof Array) && !(instance instanceof Date);\n  }\n};\n\nvar FORMAT_REGEXPS = {\n  'date-time': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n  date: /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n  time: /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n\n  email: /^(?:[\\w!#$%&'*+-/=?^`{|}~]+\\.)*[\\w!#$%&'*+-/=?^`{|}~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  ipv6: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\\s]*$/,\n\n  color: /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n\n  // hostname regex from: http://stackoverflow.com/a/1420225/5628\n  hostname: /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'utc-millisec': function utcMillisec(input) {\n    return typeof input === 'string' && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n  }, // eslint-disable-line no-restricted-globals\n  regex /* istanbul ignore next: not supporting regex right now */: function regex(input) {\n    // eslint-disable-line space-before-function-paren\n    var result = true;\n    try {\n      new RegExp(input); // eslint-disable-line no-new\n    } catch (e) {\n      result = false;\n    }\n    return result;\n  },\n\n  style: /\\s*(.+?):\\s*([^;]+);?/g,\n  phone: /^\\+(?:[0-9] ?){6,14}[0-9]$/\n};\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];\n\nvar isFormat = function isFormat(input, format) {\n  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {\n    if (FORMAT_REGEXPS[format] instanceof RegExp) {\n      return FORMAT_REGEXPS[format].test(input);\n    }\n    if (typeof FORMAT_REGEXPS[format] === 'function') {\n      return FORMAT_REGEXPS[format](input);\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  types: types,\n  isFormat: isFormat,\n  FORMAT_REGEXPS: FORMAT_REGEXPS\n};",
            "type": "application/javascript",
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema/jsonSchemaHelpers.js",
            "module-type": "library"
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/parsers/csvparser.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/parsers/csvparser.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/modules/parsers/csvparser.js\r\ntype: application/javascript\r\nmodule-type: parser\r\n\r\nThe CSV text parser inserts a $csv widget into the parse-tree, which\r\nprocesses CSV files into a table wrapped in a scrollable div using\r\nthe PapaParse library\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar AppCsvParser = function(type,text,options) {\r\n    // Invoke the widget into the parse-tree\r\n    var element = {\r\n        type: \"csv\",\r\n        tag: \"$csv\"\r\n    };\r\n    this.tree = [element];\r\n};\r\n\r\nexports[\"application/csv\"] = AppCsvParser;\r\n\r\n})();\r\n\r\n",
            "type": "application/javascript",
            "module-type": "parser",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/utils/csvutils.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/utils/csvutils.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/modules/utils/csvutils.js\r\ntype: application/javascript\r\nmodule-type: utils\r\n\r\nVarious csv utility functions added to $tw.utils\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n$tw.utils.registerFileType(\"application/csv\",\"utf8\",\".csv\");\r\n\r\nvar pointer = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js\");\r\nvar alphanum = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/alphanum.js\");\r\n\r\n/* Import the csv parser methods */\r\nvar Papa = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/csv/papaparse.min.js\");\r\n\r\n/* Default Papa Config */\r\nvar default_config = {\r\n\tdelimiter: \"\",\t// auto-detect\r\n\tnewline: \"\",\t// auto-detect\r\n\tquoteChar: '\"',\r\n\tescapeChar: '\"',\r\n\theader: false,\r\n\ttransformHeader: undefined,\r\n\tdynamicTyping: false,\r\n\tpreview: 0,\r\n\tencoding: \"\",\r\n\tworker: false,\r\n\tcomments: false,\r\n\tstep: undefined,\r\n\tcomplete: undefined,\r\n\terror: undefined,\r\n\tdownload: false,\r\n\tdownloadRequestHeaders: undefined,\r\n\tskipEmptyLines: false,\r\n\tchunk: undefined,\r\n\tfastMode: undefined,\r\n\tbeforeFirstChunk: undefined,\r\n\twithCredentials: undefined,\r\n\ttransform: undefined,\r\n\tdelimitersToGuess: [',', '\\t', '|', ';', Papa.RECORD_SEP, Papa.UNIT_SEP]\r\n}\r\n\r\n/* CSV to JSON and JSON to CSV methods */\r\nexports.csvToJson = function (csv_text, papa_config) {\r\n\tif (!csv_text) return;\r\n\tpapa_config = $tw.utils.jsonMerge({}, default_config, papa_config);\r\n\r\n\tvar results = Papa.parse(csv_text, papa_config);\r\n\tif (results){return results;}\r\n};\r\n\r\nexports.csvFromJson = function (csv_text, papa_config) {\r\n\tif (!csv_text) return;\r\n\tpapa_config = $tw.utils.jsonMerge({}, default_config, papa_config);\r\n\r\n\tvar results = Papa.unparse(csv_text, papa_config);\r\n\tif (results){return results;}\r\n};\r\n\r\n/*\r\nDisplays a Csv Import alert to the user.\r\n*/\r\nexports.csvImportAlert = function(title, import_type){\r\n\tif(!title) title = \"unknown tiddler\";\r\n\tvar csvAlert = \"$:/temp/csvAlert/\"+title.replace(/^(\\$\\:\\/)/,\"\");\r\n\tvar alert = $tw.wiki.getTiddler(csvAlert);\r\n\tif (typeof alert == \"undefined\") {\r\n\t\tvar alert = new $tw.Tiddler($tw.wiki.getCreationFields(),{},{\r\n\t\t\ttitle: csvAlert,\r\n\t\t\t\"draft.title\": undefined,\r\n\t\t\t\"draft.of\": undefined\r\n\t\t},$tw.wiki.getModificationFields());\r\n\t}\r\n\tvar modification = $tw.wiki.getModificationFields();\r\n\tmodification.text = \"<div class='cav-alert'>{{$:/core/images/warning}} ''Csv Import''</div>\\n\\n\"+\r\n\t\"[[\"+title+\"]]\\n\\n\"+\"Importing Csv. If this alert remains on-screen then something has gone wrong. Please check the devtools console.\";\r\n\tmodification.tags = \"$:/tags/Alert\"\r\n\t$tw.wiki.addTiddler(new $tw.Tiddler(alert, modification));\r\n\treturn csvAlert;\r\n}\r\n\r\n// Room here for implementing the other PapaParse methods\r\n// Remote reads for database-exports?\r\n// https://www.papaparse.com/docs\r\n\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "utils",
            "created": "20181204014355517",
            "modified": "20190214024606691",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/utils/jsonutils.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/utils/jsonutils.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/modules/utils/jsonutils.js\r\ntype: application/javascript\r\nmodule-type: utils\r\n\r\nVarious json utility functions added to $tw.utils\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar pointer = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/json-pointer.js\");\r\nvar alphanum = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/alphanum.js\");\r\n\r\n/* Import the json schema helper methods */\r\nvar jsonFactory = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/jsonschema_instantiator.js\");\r\nvar toJsonSchema = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/tojsonschema.js\");\r\n\r\n/* Import the lodash _.isEqual(), _.merge(), and _.xor() methods */\r\nexports.jsonIsEqual = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/isEqual.js\"); \r\nexports.jsonMerge = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/merge.js\");\r\nexports.jsonXor = require(\"$:/plugins/joshuafontany/jsonmangler/modules/libs/lodash/xor.js\");\r\n\r\n/*\r\nJSON Schema methods\r\n*/\r\nexports.jsonSchemaInstance = function(schema) {\r\n\tif (typeof schema == \"undefined\" ) throw \"jsonSchemaInstance: invalid schema\";\r\n\treturn jsonFactory.instantiate(schema);\r\n}\r\nexports.jsonToSchema = function(obj) {\r\n\tif (typeof obj == \"undefined\" ) throw \"jsonToSchema: invalid schema\";\r\n\treturn toJsonSchema(obj);\r\n}\r\n\r\n/*\r\nDisplays a Json Error alert to the user.\r\n*/\r\nexports.jsonError = function(e, title){\r\n\tif(!title) title = \"unknown tiddler\";\r\n\tvar jsonError = \"$:/temp/jsonError/\"+title.replace(/^(\\$\\:\\/)/,\"\");\r\n\tvar error = $tw.wiki.getTiddler(jsonError);\r\n\tif (typeof error == \"undefined\") {\r\n\t\tvar error = new $tw.Tiddler($tw.wiki.getCreationFields(),{},{\r\n\t\t\ttitle: jsonError,\r\n\t\t\t\"draft.title\": undefined,\r\n\t\t\t\"draft.of\": undefined\r\n\t\t},$tw.wiki.getModificationFields());\r\n\t}\r\n\tvar modification = $tw.wiki.getModificationFields();\r\n\tmodification.text = \"<div class='json-error'>{{$:/core/images/warning}} ''JSON Error''</div>\\n\\n\"+\r\n\t\"[[\"+title+\"]]\\n\\n\"+e.toString();\r\n\tmodification.tags = \"$:/tags/Alert\"\r\n\t$tw.wiki.addTiddler(new $tw.Tiddler(error, modification));\r\n}\r\n\r\n/*\r\nTests a json tiddler for valid json syntax.\r\n*/\r\nexports.jsonIsValid = function(titleOrTiddler, data) {\r\n\tvar tiddler = titleOrTiddler;\r\n\tif(!(tiddler instanceof $tw.Tiddler)) {\r\n\t\ttiddler = $tw.wiki.getTiddler(tiddler);\t\r\n\t}\r\n\tif(!(data)){\r\n\t\tdata = tiddler.fields.text;\r\n\t}\r\n\tif(tiddler && data) {\r\n\t\ttry {\r\n\t\t\tif(/^\\s*[{[]/.test(data.toString())){\r\n\t\t\t\tJSON.parse(data);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow \"Json tiddlers must be objects or arrays at the root level.\";\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\t$tw.utils.jsonError(e, tiddler.fields.title);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n};\r\n\r\n/*\r\nTests a json tiddler for a possible numerals-as-key-names array in the root object.\r\n*/\r\nexports.jsonIsObjArray = function(data) {\r\n    if(data.constructor === Array){\r\n        return true;    \r\n\t}\r\n    var allInts = true, allKeys = Object.keys(data);\r\n    for (let i = 0; i < allKeys.length; i++) {\r\n        const key = allKeys[i];\r\n        if(!((key % 1) === 0)){\r\n            allInts = false;\r\n        }\r\n    }\r\n    return allInts;\r\n};\r\n\r\n/*\r\nTests if the current tiddler's type is 'application/json', and if the tiddler has a 'plugin-type' field.\r\nDisplays a warning alert if true.\r\n*/\r\nexports.jsonIsPlugin = function(tiddler, context) {\r\n\tif($tw.wiki.getTiddlerText(\"$:/config/JsonPluginChangeAlerts\") == \"no\") return;\r\n\tvar target = $tw.wiki.getTiddler(tiddler);\r\n    try {\r\n\t   if(!(target.fields[\"draft.of\"]) && (target.fields.type == 'application/json' && target.fields[\"plugin-type\"])) throw \"\"+\r\n\t   \"JsonMangler just modified a plugin tiddler.\\n\\n\"+\r\n\t   \"If you did not intend this to happen, it may be time to revert to a backup,\"+\r\n\t   \"or manually inspect the affected plugin tiddler.\\n\\nYour wiki will error on loading \"+\r\n\t   \"if it does not have valid Json syntax in the text field.\\n\\n\"+\r\n\t   \"Context: \"+context;\r\n    } catch (e) {\r\n\t\t$tw.utils.jsonError(e, target.fields.title);\r\n    }\t\r\n};\r\n\r\n/*\r\nTests for existence of an index\r\nReturns true if the literal index (leading \"/\" optional) exists in \r\nthe top level keys, else returns true if the index (leading \"/\" optional) \r\nis a valid json-pointer path in the object.\r\n*/\r\nexports.jsonHas= function(obj, index) {\r\n\tif(!obj) throw \"jsonHas error, no object\";\r\n\tif(!index || index.length == 0 || index == \"\" || index == \"/\")  return false;//throw \"jsonHas error, missing or invalid index\";\r\n\r\n\tif (!(index.charAt( 0 ) == '/')) {\r\n\t\tindex = \"/\" + index;\r\n\t};\r\n\tvar legacyIndexEsc = \"/\" + pointer.escape(index.substring(1));\r\n\tvar indexEsc = \"/\" + pointer.escape(index);\r\n\tif(pointer.has(obj, legacyIndexEsc)) {\r\n\t\treturn true;\r\n\t}\r\n\tif(pointer.has(obj, indexEsc)) {\r\n\t\treturn true;\r\n\t}\r\n\tif(!pointer.has(obj, legacyIndexEsc) && !pointer.has(obj, indexEsc)){\r\n\t\tvar value = pointer.has(obj,index);\r\n\treturn value;\r\n\t};\r\n\t\r\n};\r\n\r\n/*\r\nReads and returns data from an index path, prefers leading \"/\" (optional)\r\nTests to see if literal key exists at the top level, and returns that value\r\nElse, returns 'nested' data located at index via json-pointer get().\r\n*/\r\nexports.jsonGet= function(obj, index, stringify) {\r\n\tstringify = typeof(stringify) == \"boolean\" ? stringify : true;\r\n\tif(!obj) throw \"jsonGet error, no object\";\r\n\tif(!index || index.length == 0 || index == \"\" || index == \"/\") throw \"jsonGet error, missing or invalid index\";\r\n\r\n\tvar value;\r\n\tif (!(index.charAt( 0 ) == '/')) {\r\n\t\tindex = \"/\" + index;\r\n\t};\r\n\tif($tw.utils.hop(obj, index.substring(1))) {\r\n\t\tvalue = obj[index.substring(1)];\r\n\t}\r\n\telse if($tw.utils.hop(obj, index)) {\r\n\t\tvalue = obj[index] || \"\";\r\n\t}\r\n\telse if(pointer.has(obj,index)){\r\n\t\tvalue = pointer.get(obj,index); \r\n\t}\r\n\telse {value = \"\";}\r\n\tif (stringify) return String(value) === value ? value : JSON.stringify(value, null, 2)\r\n\telse return value;\t\r\n};\r\n\r\n/*\r\nSets a value at an index path, prefers leading \"/\" (optional).\r\nTests if the string value passed is an integer, or a valid json  \r\nobject/array, and if so calls the appropriate parse() method.\r\nTests to see if a literal key exists at the top level, and sets \r\nthe value there, else we set the value at the 'nested' location.\r\n*/\r\nexports.jsonSet= function(obj, index, value) {\r\n\tif(!obj) throw \"jsonSet error, no obj\";\r\n\tif(!index || index.length == 0 || index == \"\" || index == \"/\") throw \"jsonSet error, missing or invalid index\";\r\n\tif (!(index.charAt( 0 ) == '/')) {\r\n\t\tindex = \"/\" + index;\r\n\t};\r\n\tif(typeof value == \"undefined\") value = null;\r\n\r\n\t//fix for blank root obj and numeral index/array init\r\n\tif (JSON.stringify(obj) === \"{}\") {\r\n\t\tvar pathArray = pointer.parse(index)\r\n\t\tif(/^(?:\\d+|-)$/.test(pathArray[0])) obj = [];\r\n\t}\r\n\t\r\n\tvar setValue;\r\n\tif(String(value) === value && !(value === \"\")){\r\n\t\tif(!isNaN(parseFloat(value)) && isFinite(value)){\r\n\t\t\tif(parseInt(value) % 1 === 0){\r\n\t\t\t\t//Int\r\n\t\t\t\ttry{\r\n\t\t\t\t\tvar i = parseInt(value);\r\n\t\t\t\t\tif (i && typeof i === \"number\") {\r\n\t\t\t\t\t\tsetValue = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e){};\r\n\t\t\t}\r\n\t\t\tif (parseFloat(value) % 1 !== 0) {\r\n\t\t\t\t//Float\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar f = parseFloat(value);\r\n\t\t\t\t\tif (f && typeof f === \"number\") {\r\n\t\t\t\t\t\tsetValue = f;\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (setValue === undefined) {\r\n\t\t\ttry{\r\n\t\t\t\tvar o = JSON.parse(value);\r\n\t\t\t\tif ((o && typeof(o) === \"object\") || o === null || typeof(o) == typeof(true)) {\r\n\t\t\t\t\tsetValue = o;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(e){};\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tif (setValue === undefined) { setValue = value };\r\n\t\r\n\tvar legacyIndex = index.substring(1);\r\n\tvar legacyIndexEsc = \"/\" + pointer.escape(legacyIndex);\r\n\tvar indexEsc = \"/\" + pointer.escape(index);\r\n\tif(pointer.has(obj, legacyIndexEsc)) {\r\n\t\tobj[legacyIndex] = setValue;\r\n\t\treturn;\r\n\t}\r\n\tif(!pointer.has(obj, legacyIndexEsc) && pointer.has(obj, indexEsc)) {\r\n\t\tobj[index] = setValue;\r\n\t\treturn;\r\n\t}\r\n\tif(!pointer.has(obj, legacyIndexEsc) && !pointer.has(obj, indexEsc)){\r\n\t\tpointer.set(obj,index,setValue);\r\n\t};\t\r\n};\r\n\r\n/*\r\nDeletes all keys that match the specified index.\r\n*/\r\nexports.jsonRemove= function(obj, index) {\r\n\tif(!obj) throw \"jsonRemove error, no object\";\r\n\tif(!index || index.length == 0 || index == \"\" || index == \"/\") throw \"jsoRemove error, missing or invalid index\";\r\n\r\n\tif (!(index.charAt( 0 ) == '/')) {\r\n\t\tindex = \"/\" + index;\r\n\t};\r\n\tvar legacyIndexEsc = \"/\" + pointer.escape(index.substring(1));\r\n\tvar indexEsc = \"/\" + pointer.escape(index);\r\n\tif(pointer.has(obj, legacyIndexEsc)) {\r\n\t\tpointer.remove(obj,legacyIndexEsc);\r\n\t}\r\n\tif(!pointer.has(obj, legacyIndexEsc) && pointer.has(obj, indexEsc)) {\r\n\t\tpointer.remove(obj,indexEsc);\r\n\t}\r\n\tif(pointer.has(obj, index)){\r\n\t\tpointer.remove(obj,index);\r\n\t};\r\n};\r\n\r\n/* JSON Utility Functions */\r\n\r\nexports.jsonFlatten = function (data) {\r\n\tif(!data) throw \"jsonFlatten error, no data object\";\r\n\tif ($tw.utils.jsonIsFlat(data)) {\r\n\t\treturn data;\r\n\t}\r\n    var surfaceKeys = {}, nestedKeys = {};\r\n    pointer.walk(data, function (value, path) {\r\n\t\t//Count instances of '/'\r\n\t\tvar match = path.match(/\\//g);\r\n\t\tvar count = match ? match.length : 0;\r\n\t\tif (count <= 1) {\r\n\t\t\tpath = pointer.parse(path)[0];\r\n\t\t\tsurfaceKeys[path] = value;\r\n\t\t}\r\n\t}, false);\r\n\tpointer.walk(data, function (value, path) {\r\n\t\t//Count instances of '/'\r\n\t\tvar match = path.match(/\\//g);\r\n\t\tvar count = match ? match.length : 0;\r\n\t\tif (count > 1) {\r\n\t\t\tnestedKeys[path] = value;\r\n\t\t}        \r\n\t}, undefined);\t\r\n\tvar result = Object.assign({}, surfaceKeys, nestedKeys);\r\n    //console.log(\"Json Flatten\");\r\n    return result;\r\n};\r\n\r\nexports.jsonExpand = function (data) {\r\n\tif(!data) throw \"jsonExpand error, no object\";\r\n\tif (Object(data) !== data || Array.isArray(data)) return data;\r\n\ttry {\r\n\t\t//validate json obj here\r\n\t\tpointer.walk(data, function (value, path) {\r\n\t\t\t//get value & parse path\r\n\t\t\tpath = pointer.parse(path)[0];\r\n\t\t\t//Count instances of '/'\r\n\t\t\tvar match = path.match(/\\//g);\r\n\t\t\tvar count = match ? match.length : 0;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tvalue = pointer.get(data, pointer.compile([path]));\r\n\t\t\t\tif (!(path.charAt( 0 ) == '/')) {\r\n\t\t\t\t\tpath = \"/\" + path;\r\n\t\t\t\t};\r\n\t\t\t\tvar refTokens = pointer.parse(path);\r\n\t\t\t\tpointer.set(data, refTokens, value);\r\n\t\t\t\tpointer.remove(data, \"/\"+pointer.escape(path));\r\n\t\t\t};\r\n\t\t}, false);\r\n\t\treturn data;\r\n\t} catch (e) {\r\n\t\tthrow \t\"jsonExpand error: \"+e.toString();\r\n\t}\r\n};\r\n\r\nexports.jsonIsFlat = function (data) {\r\n    var objKeys = Object.keys(data),\r\n        flat = true;\r\n    if (objKeys) {\r\n        objKeys.forEach(function (d) {\r\n            var a = data[d];\r\n            if ((!!a) && (a.constructor === Array)) {\r\n                flat = false;\r\n            }\r\n            if ((!!a) && (a.constructor === Object)) {\r\n                flat = false;\r\n            }\r\n        })\r\n    }\r\n    return flat;\r\n};\r\n\r\n/*\r\nReturns a list of all keys on the object.\r\nTop level keys are returned as-is.\r\nNested keys are returned as an index/pointer.\r\n*/\r\nexports.jsonIndexes = function (data, descend) {\r\n\tvar objKeys = [],\r\n        results = [];\r\n\tobjKeys = Object.keys(pointer.dict(data, descend));\r\n    \r\n    if (objKeys) { \r\n\t\t// Convert top level keys with '~1' back into their literal form.\r\n        objKeys.forEach(function (key) {\r\n\t\t\t//Count instances of '/'\r\n\t\t\tvar match = key.match(/\\//g);\r\n\t\t\tvar count = match ? match.length : 0;\r\n\t\t\tif (count == 1) {\r\n\t\t\t\tresults.push(pointer.unescape(key.substring(1)))\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tresults.push(key);\r\n\t\t\t}\r\n        })\r\n\t}\r\n    return results;\r\n};\r\n\r\n/* Sorts strings in an array, gets longest & shortest, then gets longest common prefix */\r\nexports.longestCommonPrefix = function (strs) {\r\n\tif (!strs)\r\n\treturn '';\r\n\r\n\tlet smallest = strs.reduce( (min, str) => min < str ? min : str, strs[0] );\r\n\tlet largest  = strs.reduce( (min, str) => min > str ? min : str, strs[0] );\r\n\r\n\tfor (let i=0; i<smallest.length; i++) {\r\n\t\tif (smallest[i] != largest[i])\r\n\t\t\treturn smallest.substr(0,i);\r\n\t}\r\n\r\n\treturn '';\r\n};\r\n\r\n/* Recurses through a path and finds the longest valid prefix */\r\nexports.longestValidPrefix = function (data, str, sep) {\r\n\tif (!str)\r\n\treturn '';\r\n\tif(!sep) sep = \"/\";\r\n\tvar escStr = (sep && sep != '/') ? pointer.escape(str).replace(sep, '/') : str;\r\n\tvar tokens = pointer.parse(escStr);\r\n\tvar results = [];\r\n\r\n\tfor (let i=0; i<tokens.length; i++) {\r\n\t\tif ($tw.utils.jsonHas(data, tokens.slice(0, i))) results.push(tokens[i]);\r\n\t}\r\n\tvar finalStr;\r\n\tif (results.length > 0) finalStr = pointer.unescape(results.join(sep))\r\n\treturn (finalStr) ? finalStr : '';\r\n};\r\n\r\n/* Sorts object by top level keys, using custom alphanum tokenized sorting */\r\nexports.jsonSort = function (data) {\r\n\treturn data.sort(alphanum.alphanum);\r\n};\r\n\r\n/* Sorts object by top level keys, using custom alphanum tokenized sorting, returns string */\r\nexports.jsonOrderedStringify = function (data, padding) {\r\n\tif(!padding) padding = 0;\r\n\tconst allKeys = [];\r\n\tJSON.stringify(data, (k, v) => { allKeys.push(k); return v; });\r\n\tallKeys.sort(alphanum.alphanum);\r\n\treturn JSON.stringify(data, allKeys, padding);\r\n};\r\n\r\n/* https://stackoverflow.com/users/4079235/johan-persson\r\n * Compare two objects by reducing an array of keys in obj1, having the\r\n * keys in obj2 as the intial value of the result. Key points:\r\n * - All keys of obj2 are initially in the result.\r\n * - If the loop finds a key (from obj1, remember) not in obj2, it adds\r\n *   it to the result.\r\n * - If the loop finds a key that are both in obj1 and obj2, it compares\r\n *   the value. If it's the same value, the key is removed from the result.\r\n */\r\nexports.jsonDiff = function(obj1, obj2) {\r\n\tif(typeof obj1 == \"undefined\" || typeof obj2 == \"undefined\") throw \"jsonDiff: invalid object reference\";\r\n    const diff = Object.keys(obj1).reduce((result, key) => {\r\n        if (!obj2.hasOwnProperty(key)) {\r\n            result.push(key);\r\n        } else if (this.jsonIsEqual(obj1[key], obj2[key])) {\r\n            const resultKeyIndex = result.indexOf(key);\r\n            result.splice(resultKeyIndex, 1);\r\n        }\r\n        return result;\r\n    }, Object.keys(obj2));\r\n\r\n    return diff;\r\n}\r\n\r\n/* \t\r\nResolves all top level keys that have '/' in them.\r\nThe values of these top level keys are set to the 'nested' location,\r\nand this overwrites the existing values at those locations.\r\nThis method should only be called for user-called(button driven, etc)\r\nactions until debugged.\r\n*/\r\nexports.jsonDedupe = function (data) {\r\n\tif(!data) throw \"jsonDedupe error, no data object\";\r\n\tvar allKeys = [];\r\n\t//Get top-level keys\r\n\tJSON.stringify(data, (k, v) => { allKeys.push(k); return v; });\r\n\tfor (let i = 0; i < allKeys.length; i++) {\r\n\t\tconst key = allKeys[i];\r\n\t\t//Count instances of '/'\r\n\t\tvar match = key.match(/\\//g);\r\n\t\tvar count = match ? match.length : 0;\r\n\t\t//Test for leading '/'\r\n\t\tvar path = (key.charAt( 0 ) == '/') ? key : '/' + key;\r\n\t\tif (count > 0 && pointer.has(data, path)) {\r\n\t\t\t//If the key is a path (count > 0), and the object has data at that path,\r\n\t\t\t//set the data there and delete the top level key.\r\n\t\t\tpointer.set(data, path, data[key]);\r\n\t\t\tdelete data [key];\r\n\t\t};\r\n\t}\r\n\treturn data;\r\n};\r\n\r\n/* \t\r\nTests the object to see if all key names are integers.\r\nIf so, the root object is converted into a 0 index array.\r\nIf the object is already an array, it is converted into\r\nan object where all key names are integers.\r\n*/\r\nexports.jsonConvert = function (data) {\r\n\tif(!data) throw \"jsonConvert error, no data object\";\r\n\tdata = pointer.reassign(data);\r\n\treturn data;\r\n};\r\n\r\n/* \t\r\nCalls the .splice() method at a specific pointer location.\r\n'startIndex' is a path that needs to end in an Int,\r\n'deleteCount' needs to be an Int.\r\nSupports multiple values in array form.\r\nReturns the updated data object, and an array of any removed elements.\r\n*/\r\nexports.jsonSplice = function (data, startIndex, deleteCount, insert, ...value) {\r\n\tif(!data) throw \"jsonSplice error, no data object\";\r\n\tif(!startIndex) throw \"jsonSplice error, no startIndex\";\r\n\tdeleteCount = parseInt(deleteCount, 10) || 0;\r\n\r\n\tvar refTokens = pointer.parse(startIndex), i, arrayPath, modArr, remArr;\r\n\tif (refTokens && refTokens.length > 0) {\r\n\t\ti = refTokens[refTokens.length - 1];\r\n\t\trefTokens.splice(refTokens.length - 1, 1);\r\n\t\tif (refTokens.length === 0) { arrayPath = ''; }\r\n\t\telse{\r\n\t\t\tarrayPath = '/' + refTokens.map(pointer.escape).join('/');\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tmodArr = (arrayPath === '') ? data : pointer.get(data, arrayPath);\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonSplice error, data is not an array\";\r\n\t\t\tif (value.length == 0)\r\n\t\t\t{\r\n\t\t\t\tremArr = modArr.splice(i, deleteCount);\r\n\t\t\t}\r\n\t\t\telse if(value.length > 0 && insert == true)\r\n\t\t\t{\r\n\t\t\t\tremArr = modArr.splice(...[i, deleteCount].concat(value));\r\n\t\t\t}\r\n\t\t\telse if(value.length > 1 && insert == false)\r\n\t\t\t{\r\n\t\t\t\tremArr = modArr.splice(i, deleteCount, value);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tremArr = modArr.splice(i, deleteCount, value[0]);\r\n\t\t\t}\r\n\t\t\tif (arrayPath === ''){ data = modArr; }\r\n\t\t\telse{ pointer.set(data, arrayPath, modArr);\t}\r\n\t\t} catch (e) {\r\n\t\t\tthrow \"jsonSplice error: \" + e.toString();\r\n\t\t}\r\n\t}\r\n\treturn {data, remArr};\r\n};\r\n\r\n/* \t\r\nCalls the .push() method at a specific pointer location, 'arrPath'.\r\nSupports multiple values in array form.\r\nReturns the updated data object, and the new length of the array.\r\n*/\r\nexports.jsonPush = function (data, arrPath, values) {\r\n\tif(!data) throw \"jsonPush error, no data object\";\t\r\n\tvar modArr, newLength;\r\n\ttry {\r\n\t\tif (arrPath === '') {\r\n\t\t\tmodArr = data;\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonPush error, data is not an array\";\r\n\t\t\tnewLength = modArr.push(values);\r\n\t\t\tdata = modArr;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tmodArr = pointer.get(data, arrPath);\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonPush error, no array found at arrayPath\";\r\n\t\t\tnewLength = modArr.push(values);\r\n\t\t\tpointer.set(data, arrPath, modArr);\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tthrow \"jsonPush error: \" + e.toString();\r\n\t}\r\n\treturn {data, newLength};\r\n};\r\n\r\n/* \t\r\nCalls the .pop() method at a specific pointer location, 'arrPath'.\r\nReturns the updated data object and the last item of the array.\r\n*/\r\nexports.jsonPop = function (data, arrPath) {\r\n\tif(!data) throw \"jsonPop error, no data object\";\t\r\n\tvar modArr, dataItem;\r\n\ttry {\r\n\t\tif (arrPath === '') {\r\n\t\t\tmodArr = data;\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonPop error, data is not an array\";\r\n\t\t\tdataItem = modArr.pop();\r\n\t\t\tdata = modArr;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tmodArr = pointer.get(data, arrPath);\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonPop error, no array found at arrayPath\";\r\n\t\t\tdataItem = modArr.pop();\r\n\t\t\tpointer.set(data, arrPath, modArr);\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tthrow \"jsonPop error: \" + e.toString();\r\n\t}\r\n\treturn {data, dataItem};\r\n};\r\n\r\n/* \t\r\nCalls the .shift() method at a specific pointer location.\r\nReturns the new data object and the first item of the array.\r\n*/\r\nexports.jsonShift = function (data, arrPath) {\r\n\tif(!data) throw \"jsonShift error, no data object\";\t\r\n\tvar modArr, dataItem;\r\n\ttry {\r\n\t\tif (arrPath === '') {\r\n\t\t\tmodArr = data;\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonShift error, data is not an array\";\r\n\t\t\tdataItem = modArr.shift();\r\n\t\t\tdata = modArr;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tmodArr = pointer.get(data, arrPath);\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonShift error, no array found at arrayPath\";\r\n\t\t\tdataItem = modArr.shift();\r\n\t\t\tpointer.set(data, arrPath, modArr);\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tthrow \"jsonShift error: \" + e.toString();\r\n\t}\r\n\treturn {data, dataItem};\r\n};\r\n\r\n/* \t\r\nCalls the .unshift() method at a specific pointer location.\r\nSupports multiple values in array form.\r\nReturns the new data object and the new kength of the array.\r\n*/\r\nexports.jsonUnshift = function (data, arrPath, values) {\r\n\tif(!data) throw \"jsonUnshift error, no data object\";\r\n\tvar modArr, newLength;\r\n\ttry {\r\n\t\tif (arrPath === '') {\r\n\t\t\tmodArr = data;\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonUnshift error, data is not an array\";\r\n\t\t\tnewLength = modArr.unshift(values);\r\n\t\t\tdata = modArr;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tmodArr = pointer.get(data, arrPath);\r\n\t\t\tif(!Array.isArray(modArr)) throw \"jsonUnshift error, no array found at arrayPath\";\r\n\t\t\tnewLength = modArr.unshift(values);\r\n\t\t\tpointer.set(data, arrPath, modArr);\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tthrow \"jsonUnshift error: \" + e.toString();\r\n\t}\r\n\treturn {data, newLength};\r\n};\r\n\r\n})();",
            "type": "application/javascript",
            "module-type": "utils",
            "created": "20181204014355517",
            "modified": "20190214024606691",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/modules/utils/slugify.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/modules/utils/slugify.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/modules/utils/slugify.js\r\ntype: application/javascript\r\nmodule-type: utils\r\n\r\nhttps://github.com/Jermolene/TiddlyWiki5/issues/3379\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nexports.slugifyText = function(wiki,title) {\r\n\tvar tiddler = wiki.getTiddler(title),\r\n\t\tslug;\r\n\tif(tiddler && tiddler.fields.slug) {\r\n\t\tslug = tiddler.fields.slug;\r\n\t} else {\r\n        slug =\r\n            // $tw.utils.transliterate(title.toString().toLowerCase()) // Replace diacritics with basic lowercase ASCII\r\n            title.toString().toLowerCase()\r\n            .replace(/\\s+/g,\"-\")                                       // Replace spaces with -\r\n\t\t\t.replace(/[^\\w\\-\\.]+/g,\"\")                                 // Remove all non-word chars except dash and dot\r\n\t\t\t.replace(/\\-\\-+/g,\"-\")                                     // Replace multiple - with single -\r\n\t\t\t.replace(/^-+/,\"\")                                         // Trim - from start of text\r\n            .replace(/-+$/,\"\")                                        // Trim - from end of text\r\n            .replace(/^[^a-z0-9]+$/g, \"_\");                            // Remove diacritics\r\n\t}\r\n\t// If the resulting slug is blank (eg because the title is just punctuation characters)\r\n\tif(!slug) {\r\n\t\t// ...then just use the character codes of the title\r\n\t\tslug = title.split(\"\").map(function(char) {\r\n\t\t\treturn char.charCodeAt(0).toString();\r\n\t\t}).join(\"-\");\r\n\t}\r\n\treturn slug;\r\n};\r\n\r\n})();\r\n",
            "type": "application/javascript",
            "module-type": "utils",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/patchSource/core/modules/wiki.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/patchSource/core/modules/wiki.js",
            "text": "/*\\\r\ntitle: $:/core/modules/wiki.js\r\ntype: application/javascript\r\nmodule-type: wikimethod\r\n\r\nExtension methods for the $tw.Wiki object\r\n\r\nAdds the following properties to the wiki object:\r\n\r\n* `eventListeners` is a hashmap by type of arrays of listener functions\r\n* `changedTiddlers` is a hashmap describing changes to named tiddlers since wiki change events were last dispatched. Each entry is a hashmap containing two fields:\r\n\tmodified: true/false\r\n\tdeleted: true/false\r\n* `changeCount` is a hashmap by tiddler title containing a numerical index that starts at zero and is incremented each time a tiddler is created changed or deleted\r\n* `caches` is a hashmap by tiddler title containing a further hashmap of named cache objects. Caches are automatically cleared when a tiddler is modified or deleted\r\n* `globalCache` is a hashmap by cache name of cache objects that are cleared whenever any tiddler change occurs\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar widget = require(\"$:/core/modules/widgets/widget.js\");\r\n\r\nvar USER_NAME_TITLE = \"$:/status/UserName\",\r\n\tTIMESTAMP_DISABLE_TITLE = \"$:/config/TimestampDisable\";\r\n\r\n/*\r\nAdd available indexers to this wiki\r\n*/\r\nexports.addIndexersToWiki = function() {\r\n\tvar self = this;\r\n\t$tw.utils.each($tw.modules.applyMethods(\"indexer\"),function(Indexer,name) {\r\n\t\tself.addIndexer(new Indexer(self),name);\r\n\t});\r\n};\r\n\r\n/*\r\nGet the value of a text reference. Text references can have any of these forms:\r\n\t<tiddlertitle>\r\n\t<tiddlertitle>!!<fieldname>\r\n\t!!<fieldname> - specifies a field of the current tiddlers\r\n\t<tiddlertitle>##<index>\r\n*/\r\nexports.getTextReference = function(textRef,defaultText,currTiddlerTitle) {\r\n\tvar tr = $tw.utils.parseTextReference(textRef),\r\n\t\ttitle = tr.title || currTiddlerTitle;\r\n\tif(tr.field) {\r\n\t\tvar tiddler = this.getTiddler(title);\r\n\t\tif(tr.field === \"title\") { // Special case so we can return the title of a non-existent tiddler\r\n\t\t\treturn title;\r\n\t\t} else if(tiddler && $tw.utils.hop(tiddler.fields,tr.field)) {\r\n\t\t\treturn tiddler.getFieldString(tr.field);\r\n\t\t} else {\r\n\t\t\treturn defaultText;\r\n\t\t}\r\n\t} else if(tr.index) {\r\n\t\treturn this.extractTiddlerDataItem(title,tr.index,defaultText);\r\n\t} else {\r\n\t\treturn this.getTiddlerText(title,defaultText);\r\n\t}\r\n};\r\n\r\nexports.setTextReference = function(textRef,value,currTiddlerTitle) {\r\n\tvar tr = $tw.utils.parseTextReference(textRef),\r\n\t\ttitle = tr.title || currTiddlerTitle;\r\n\tthis.setText(title,tr.field,tr.index,value);\r\n};\r\n\r\nexports.setText = function(title,field,index,value,options) {\r\n\toptions = options || {};\r\n\tvar creationFields = options.suppressTimestamp ? {} : this.getCreationFields(),\r\n\t\tmodificationFields = options.suppressTimestamp ? {} : this.getModificationFields();\r\n\t// Check if it is a reference to a tiddler field\r\n\tif(index) {\r\n\t\tvar data = this.getTiddlerData(title,Object.create(null));\r\n\t\tif(value !== undefined) {\r\n\t\t\t$tw.utils.jsonSet(data, index, value);\r\n\t\t} else {\r\n\t\t\t$tw.utils.jsonRemove(data, index);\r\n\t\t}; $tw.utils.jsonIsPlugin(title, \"setText\");\r\n\t\tthis.setTiddlerData(title,data,modificationFields);\r\n\t} else {\r\n\t\tvar tiddler = this.getTiddler(title),\r\n\t\t\tfields = {title: title};\r\n\t\tfields[field || \"text\"] = value;\r\n\t\tthis.addTiddler(new $tw.Tiddler(creationFields,tiddler,fields,modificationFields));\r\n\t}\r\n};\r\n\r\nexports.deleteTextReference = function(textRef,currTiddlerTitle) {\r\n\tvar tr = $tw.utils.parseTextReference(textRef),\r\n\t\ttitle,tiddler,fields;\r\n\t// Check if it is a reference to a tiddler\r\n\tif(tr.title && !tr.field) {\r\n\t\tthis.deleteTiddler(tr.title);\r\n\t// Else check for a field reference\r\n\t} else if(tr.field) {\r\n\t\ttitle = tr.title || currTiddlerTitle;\r\n\t\ttiddler = this.getTiddler(title);\r\n\t\tif(tiddler && $tw.utils.hop(tiddler.fields,tr.field)) {\r\n\t\t\tfields = Object.create(null);\r\n\t\t\tfields[tr.field] = undefined;\r\n\t\t\tthis.addTiddler(new $tw.Tiddler(tiddler,fields,this.getModificationFields()));\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexports.addEventListener = function(type,listener) {\r\n\tthis.eventListeners = this.eventListeners || {};\r\n\tthis.eventListeners[type] = this.eventListeners[type]  || [];\r\n\tthis.eventListeners[type].push(listener);\t\r\n};\r\n\r\nexports.removeEventListener = function(type,listener) {\r\n\tvar listeners = this.eventListeners[type];\r\n\tif(listeners) {\r\n\t\tvar p = listeners.indexOf(listener);\r\n\t\tif(p !== -1) {\r\n\t\t\tlisteners.splice(p,1);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexports.dispatchEvent = function(type /*, args */) {\r\n\tvar args = Array.prototype.slice.call(arguments,1),\r\n\t\tlisteners = this.eventListeners[type];\r\n\tif(listeners) {\r\n\t\tfor(var p=0; p<listeners.length; p++) {\r\n\t\t\tvar listener = listeners[p];\r\n\t\t\tlistener.apply(listener,args);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/*\r\nCauses a tiddler to be marked as changed, incrementing the change count, and triggers event handlers.\r\nThis method should be called after the changes it describes have been made to the wiki.tiddlers[] array.\r\n\ttitle: Title of tiddler\r\n\tisDeleted: defaults to false (meaning the tiddler has been created or modified),\r\n\t\ttrue if the tiddler has been deleted\r\n*/\r\nexports.enqueueTiddlerEvent = function(title,isDeleted) {\r\n\t// Record the touch in the list of changed tiddlers\r\n\tthis.changedTiddlers = this.changedTiddlers || Object.create(null);\r\n\tthis.changedTiddlers[title] = this.changedTiddlers[title] || Object.create(null);\r\n\tthis.changedTiddlers[title][isDeleted ? \"deleted\" : \"modified\"] = true;\r\n\t// Increment the change count\r\n\tthis.changeCount = this.changeCount || Object.create(null);\r\n\tif($tw.utils.hop(this.changeCount,title)) {\r\n\t\tthis.changeCount[title]++;\r\n\t} else {\r\n\t\tthis.changeCount[title] = 1;\r\n\t}\r\n\t// Trigger events\r\n\tthis.eventListeners = this.eventListeners || {};\r\n\tif(!this.eventsTriggered) {\r\n\t\tvar self = this;\r\n\t\t$tw.utils.nextTick(function() {\r\n\t\t\tvar changes = self.changedTiddlers;\r\n\t\t\tself.changedTiddlers = Object.create(null);\r\n\t\t\tself.eventsTriggered = false;\r\n\t\t\tif($tw.utils.count(changes) > 0) {\r\n\t\t\t\tself.dispatchEvent(\"change\",changes);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.eventsTriggered = true;\r\n\t}\r\n};\r\n\r\nexports.getSizeOfTiddlerEventQueue = function() {\r\n\treturn $tw.utils.count(this.changedTiddlers);\r\n};\r\n\r\nexports.clearTiddlerEventQueue = function() {\r\n\tthis.changedTiddlers = Object.create(null);\r\n\tthis.changeCount = Object.create(null);\r\n};\r\n\r\nexports.getChangeCount = function(title) {\r\n\tthis.changeCount = this.changeCount || Object.create(null);\r\n\tif($tw.utils.hop(this.changeCount,title)) {\r\n\t\treturn this.changeCount[title];\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n};\r\n\r\n/*\r\nGenerate an unused title from the specified base\r\n*/\r\nexports.generateNewTitle = function(baseTitle,options) {\r\n\toptions = options || {};\r\n\tvar c = 0,\r\n\t\ttitle = baseTitle;\r\n\twhile(this.tiddlerExists(title) || this.isShadowTiddler(title) || this.findDraft(title)) {\r\n\t\ttitle = baseTitle + \r\n\t\t\t(options.prefix || \" \") + \r\n\t\t\t(++c);\r\n\t}\r\n\treturn title;\r\n};\r\n\r\nexports.isSystemTiddler = function(title) {\r\n\treturn title && title.indexOf(\"$:/\") === 0;\r\n};\r\n\r\nexports.isTemporaryTiddler = function(title) {\r\n\treturn title && title.indexOf(\"$:/temp/\") === 0;\r\n};\r\n\r\nexports.isImageTiddler = function(title) {\r\n\tvar tiddler = this.getTiddler(title);\r\n\tif(tiddler) {\t\t\r\n\t\tvar contentTypeInfo = $tw.config.contentTypeInfo[tiddler.fields.type || \"text/vnd.tiddlywiki\"];\r\n\t\treturn !!contentTypeInfo && contentTypeInfo.flags.indexOf(\"image\") !== -1;\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexports.isBinaryTiddler = function(title) {\r\n\tvar tiddler = this.getTiddler(title);\r\n\tif(tiddler) {\t\t\r\n\t\tvar contentTypeInfo = $tw.config.contentTypeInfo[tiddler.fields.type || \"text/vnd.tiddlywiki\"];\r\n\t\treturn !!contentTypeInfo && contentTypeInfo.encoding === \"base64\";\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\n/*\r\nLike addTiddler() except it will silently reject any plugin tiddlers that are older than the currently loaded version. Returns true if the tiddler was imported\r\n*/\r\nexports.importTiddler = function(tiddler) {\r\n\tvar existingTiddler = this.getTiddler(tiddler.fields.title);\r\n\t// Check if we're dealing with a plugin\r\n\tif(tiddler && tiddler.hasField(\"plugin-type\") && tiddler.hasField(\"version\") && existingTiddler && existingTiddler.hasField(\"plugin-type\") && existingTiddler.hasField(\"version\")) {\r\n\t\t// Reject the incoming plugin if it is older\r\n\t\tif(!$tw.utils.checkVersions(tiddler.fields.version,existingTiddler.fields.version)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t// Fall through to adding the tiddler\r\n\tthis.addTiddler(tiddler);\r\n\treturn true;\r\n};\r\n\r\n/*\r\nReturn a hashmap of the fields that should be set when a tiddler is created\r\n*/\r\nexports.getCreationFields = function() {\r\n\tif(this.getTiddlerText(TIMESTAMP_DISABLE_TITLE,\"\").toLowerCase() !== \"yes\") {\r\n\t\tvar fields = {\r\n\t\t\t\tcreated: new Date()\r\n\t\t\t},\r\n\t\t\tcreator = this.getTiddlerText(USER_NAME_TITLE);\r\n\t\tif(creator) {\r\n\t\t\tfields.creator = creator;\r\n\t\t}\r\n\t\treturn fields;\r\n\t} else {\r\n\t\treturn {};\r\n\t}\r\n};\r\n\r\n/*\r\nReturn a hashmap of the fields that should be set when a tiddler is modified\r\n*/\r\nexports.getModificationFields = function() {\r\n\tif(this.getTiddlerText(TIMESTAMP_DISABLE_TITLE,\"\").toLowerCase() !== \"yes\") {\r\n\t\tvar fields = Object.create(null),\r\n\t\t\tmodifier = this.getTiddlerText(USER_NAME_TITLE);\r\n\t\tfields.modified = new Date();\r\n\t\tif(modifier) {\r\n\t\t\tfields.modifier = modifier;\r\n\t\t}\r\n\t\treturn fields;\r\n\t} else {\r\n\t\treturn {};\r\n\t}\r\n};\r\n\r\n/*\r\nReturn a sorted array of tiddler titles.  Options include:\r\nsortField: field to sort by\r\nexcludeTag: tag to exclude\r\nincludeSystem: whether to include system tiddlers (defaults to false)\r\n*/\r\nexports.getTiddlers = function(options) {\r\n\toptions = options || Object.create(null);\r\n\tvar self = this,\r\n\t\tsortField = options.sortField || \"title\",\r\n\t\ttiddlers = [], t, titles = [];\r\n\tthis.each(function(tiddler,title) {\r\n\t\tif(options.includeSystem || !self.isSystemTiddler(title)) {\r\n\t\t\tif(!options.excludeTag || !tiddler.hasTag(options.excludeTag)) {\r\n\t\t\t\ttiddlers.push(tiddler);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\ttiddlers.sort(function(a,b) {\r\n\t\tvar aa = a.fields[sortField].toLowerCase() || \"\",\r\n\t\t\tbb = b.fields[sortField].toLowerCase() || \"\";\r\n\t\tif(aa < bb) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\tif(aa > bb) {\r\n\t\t\t\treturn 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tfor(t=0; t<tiddlers.length; t++) {\r\n\t\ttitles.push(tiddlers[t].fields.title);\r\n\t}\r\n\treturn titles;\r\n};\r\n\r\nexports.countTiddlers = function(excludeTag) {\r\n\tvar tiddlers = this.getTiddlers({excludeTag: excludeTag});\r\n\treturn $tw.utils.count(tiddlers);\r\n};\r\n\r\n/*\r\nReturns a function iterator(callback) that iterates through the specified titles, and invokes the callback with callback(tiddler,title)\r\n*/\r\nexports.makeTiddlerIterator = function(titles) {\r\n\tvar self = this;\r\n\tif(!$tw.utils.isArray(titles)) {\r\n\t\ttitles = Object.keys(titles);\r\n\t} else {\r\n\t\ttitles = titles.slice(0);\r\n\t}\r\n\treturn function(callback) {\r\n\t\ttitles.forEach(function(title) {\r\n\t\t\tcallback(self.getTiddler(title),title);\r\n\t\t});\r\n\t};\r\n};\r\n\r\n/*\r\nSort an array of tiddler titles by a specified field\r\n\ttitles: array of titles (sorted in place)\r\n\tsortField: name of field to sort by\r\n\tisDescending: true if the sort should be descending\r\n\tisCaseSensitive: true if the sort should consider upper and lower case letters to be different\r\n*/\r\nexports.sortTiddlers = function(titles,sortField,isDescending,isCaseSensitive,isNumeric,isAlphaNumeric) {\r\n\tvar self = this;\r\n\ttitles.sort(function(a,b) {\r\n\t\tvar x,y,\r\n\t\t\tcompareNumbers = function(x,y) {\r\n\t\t\t\tvar result = \r\n\t\t\t\t\tisNaN(x) && !isNaN(y) ? (isDescending ? -1 : 1) :\r\n\t\t\t\t\t!isNaN(x) && isNaN(y) ? (isDescending ? 1 : -1) :\r\n\t\t\t\t\t\t\t\t\t\t\t(isDescending ? y - x :  x - y);\r\n\t\t\t\treturn result;\r\n\t\t\t};\r\n\t\tif(sortField !== \"title\") {\r\n\t\t\tvar tiddlerA = self.getTiddler(a),\r\n\t\t\t\ttiddlerB = self.getTiddler(b);\r\n\t\t\tif(tiddlerA) {\r\n\t\t\t\ta = tiddlerA.fields[sortField] || \"\";\r\n\t\t\t} else {\r\n\t\t\t\ta = \"\";\r\n\t\t\t}\r\n\t\t\tif(tiddlerB) {\r\n\t\t\t\tb = tiddlerB.fields[sortField] || \"\";\r\n\t\t\t} else {\r\n\t\t\t\tb = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tx = Number(a);\r\n\t\ty = Number(b);\r\n\t\tif(isNumeric && (!isNaN(x) || !isNaN(y))) {\r\n\t\t\treturn compareNumbers(x,y);\r\n\t\t} else if(isAlphaNumeric) {\r\n\t\t\treturn isDescending ? b.localeCompare(a,undefined,{numeric: true,sensitivity: \"base\"}) : a.localeCompare(b,undefined,{numeric: true,sensitivity: \"base\"});\r\n\t\t} else if($tw.utils.isDate(a) && $tw.utils.isDate(b)) {\r\n\t\t\treturn isDescending ? b - a : a - b;\r\n\t\t} else {\r\n\t\t\ta = String(a);\r\n\t\t\tb = String(b);\r\n\t\t\tif(!isCaseSensitive) {\r\n\t\t\t\ta = a.toLowerCase();\r\n\t\t\t\tb = b.toLowerCase();\r\n\t\t\t}\r\n\t\t\treturn isDescending ? b.localeCompare(a) : a.localeCompare(b);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/*\r\nFor every tiddler invoke a callback(title,tiddler) with `this` set to the wiki object. Options include:\r\nsortField: field to sort by\r\nexcludeTag: tag to exclude\r\nincludeSystem: whether to include system tiddlers (defaults to false)\r\n*/\r\nexports.forEachTiddler = function(/* [options,]callback */) {\r\n\tvar arg = 0,\r\n\t\toptions = arguments.length >= 2 ? arguments[arg++] : {},\r\n\t\tcallback = arguments[arg++],\r\n\t\ttitles = this.getTiddlers(options),\r\n\t\tt, tiddler;\r\n\tfor(t=0; t<titles.length; t++) {\r\n\t\ttiddler = this.getTiddler(titles[t]);\r\n\t\tif(tiddler) {\r\n\t\t\tcallback.call(this,tiddler.fields.title,tiddler);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/*\r\nReturn an array of tiddler titles that are directly linked within the given parse tree\r\n */\r\nexports.extractLinks = function(parseTreeRoot) {\r\n\t// Count up the links\r\n\tvar links = [],\r\n\t\tcheckParseTree = function(parseTree) {\r\n\t\t\tfor(var t=0; t<parseTree.length; t++) {\r\n\t\t\t\tvar parseTreeNode = parseTree[t];\r\n\t\t\t\tif(parseTreeNode.type === \"link\" && parseTreeNode.attributes.to && parseTreeNode.attributes.to.type === \"string\") {\r\n\t\t\t\t\tvar value = parseTreeNode.attributes.to.value;\r\n\t\t\t\t\tif(links.indexOf(value) === -1) {\r\n\t\t\t\t\t\tlinks.push(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(parseTreeNode.children) {\r\n\t\t\t\t\tcheckParseTree(parseTreeNode.children);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\tcheckParseTree(parseTreeRoot);\r\n\treturn links;\r\n};\r\n\r\n/*\r\nReturn an array of tiddler titles that are directly linked from the specified tiddler\r\n*/\r\nexports.getTiddlerLinks = function(title) {\r\n\tvar self = this;\r\n\t// We'll cache the links so they only get computed if the tiddler changes\r\n\treturn this.getCacheForTiddler(title,\"links\",function() {\r\n\t\t// Parse the tiddler\r\n\t\tvar parser = self.parseTiddler(title);\r\n\t\tif(parser) {\r\n\t\t\treturn self.extractLinks(parser.tree);\r\n\t\t}\r\n\t\treturn [];\r\n\t});\r\n};\r\n\r\n/*\r\nReturn an array of tiddler titles that link to the specified tiddler\r\n*/\r\nexports.getTiddlerBacklinks = function(targetTitle) {\r\n\tvar self = this,\r\n\t\tbacklinksIndexer = this.getIndexer(\"BacklinksIndexer\"),\r\n\t\tbacklinks = backlinksIndexer && backlinksIndexer.lookup(targetTitle);\r\n\r\n\tif(!backlinks) {\r\n\t\tbacklinks = [];\r\n\t\tthis.forEachTiddler(function(title,tiddler) {\r\n\t\t\tvar links = self.getTiddlerLinks(title);\r\n\t\t\tif(links.indexOf(targetTitle) !== -1) {\r\n\t\t\t\tbacklinks.push(title);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn backlinks;\r\n};\r\n\r\n/*\r\nReturn a hashmap of tiddler titles that are referenced but not defined. Each value is the number of times the missing tiddler is referenced\r\n*/\r\nexports.getMissingTitles = function() {\r\n\tvar self = this,\r\n\t\tmissing = [];\r\n// We should cache the missing tiddler list, even if we recreate it every time any tiddler is modified\r\n\tthis.forEachTiddler(function(title,tiddler) {\r\n\t\tvar links = self.getTiddlerLinks(title);\r\n\t\t$tw.utils.each(links,function(link) {\r\n\t\t\tif((!self.tiddlerExists(link) && !self.isShadowTiddler(link)) && missing.indexOf(link) === -1) {\r\n\t\t\t\tmissing.push(link);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn missing;\r\n};\r\n\r\nexports.getOrphanTitles = function() {\r\n\tvar self = this,\r\n\t\torphans = this.getTiddlers();\r\n\tthis.forEachTiddler(function(title,tiddler) {\r\n\t\tvar links = self.getTiddlerLinks(title);\r\n\t\t$tw.utils.each(links,function(link) {\r\n\t\t\tvar p = orphans.indexOf(link);\r\n\t\t\tif(p !== -1) {\r\n\t\t\t\torphans.splice(p,1);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn orphans; // Todo\r\n};\r\n\r\n/*\r\nRetrieves a list of the tiddler titles that are tagged with a given tag\r\n*/\r\nexports.getTiddlersWithTag = function(tag) {\r\n\t// Try to use the indexer\r\n\tvar self = this,\r\n\t\ttagIndexer = this.getIndexer(\"TagIndexer\"),\r\n\t\tresults = tagIndexer && tagIndexer.subIndexers[3].lookup(tag);\r\n\tif(!results) {\r\n\t\t// If not available, perform a manual scan\r\n\t\tresults = this.getGlobalCache(\"taglist-\" + tag,function() {\r\n\t\t\tvar tagmap = self.getTagMap();\r\n\t\t\treturn self.sortByList(tagmap[tag],tag);\r\n\t\t});\r\n\t}\r\n\treturn results;\r\n};\r\n\r\n/*\r\nGet a hashmap by tag of arrays of tiddler titles\r\n*/\r\nexports.getTagMap = function() {\r\n\tvar self = this;\r\n\treturn this.getGlobalCache(\"tagmap\",function() {\r\n\t\tvar tags = Object.create(null),\r\n\t\t\tstoreTags = function(tagArray,title) {\r\n\t\t\t\tif(tagArray) {\r\n\t\t\t\t\tfor(var index=0; index<tagArray.length; index++) {\r\n\t\t\t\t\t\tvar tag = tagArray[index];\r\n\t\t\t\t\t\tif($tw.utils.hop(tags,tag)) {\r\n\t\t\t\t\t\t\ttags[tag].push(title);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttags[tag] = [title];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\ttitle, tiddler;\r\n\t\t// Collect up all the tags\r\n\t\tself.eachShadow(function(tiddler,title) {\r\n\t\t\tif(!self.tiddlerExists(title)) {\r\n\t\t\t\ttiddler = self.getTiddler(title);\r\n\t\t\t\tstoreTags(tiddler.fields.tags,title);\r\n\t\t\t}\r\n\t\t});\r\n\t\tself.each(function(tiddler,title) {\r\n\t\t\tstoreTags(tiddler.fields.tags,title);\r\n\t\t});\r\n\t\treturn tags;\r\n\t});\r\n};\r\n\r\n/*\r\nLookup a given tiddler and return a list of all the tiddlers that include it in the specified list field\r\n*/\r\nexports.findListingsOfTiddler = function(targetTitle,fieldName) {\r\n\tfieldName = fieldName || \"list\";\r\n\tvar titles = [];\r\n\tthis.each(function(tiddler,title) {\r\n\t\tvar list = $tw.utils.parseStringArray(tiddler.fields[fieldName]);\r\n\t\tif(list && list.indexOf(targetTitle) !== -1) {\r\n\t\t\ttitles.push(title);\r\n\t\t}\r\n\t});\r\n\treturn titles;\r\n};\r\n\r\n/*\r\nSorts an array of tiddler titles according to an ordered list\r\n*/\r\nexports.sortByList = function(array,listTitle) {\r\n\tvar self = this,\r\n\t\treplacedTitles = Object.create(null);\r\n\t// Given a title, this function will place it in the correct location\r\n\t// within titles.\r\n\tfunction moveItemInList(title) {\r\n\t\tif(!$tw.utils.hop(replacedTitles, title)) {\r\n\t\t\treplacedTitles[title] = true;\r\n\t\t\tvar newPos = -1,\r\n\t\t\t\ttiddler = self.getTiddler(title);\r\n\t\t\tif(tiddler) {\r\n\t\t\t\tvar beforeTitle = tiddler.fields[\"list-before\"],\r\n\t\t\t\t\tafterTitle = tiddler.fields[\"list-after\"];\r\n\t\t\t\tif(beforeTitle === \"\") {\r\n\t\t\t\t\tnewPos = 0;\r\n\t\t\t\t} else if(afterTitle === \"\") {\r\n\t\t\t\t\tnewPos = titles.length;\r\n\t\t\t\t} else if(beforeTitle) {\r\n\t\t\t\t\t// if this title is placed relative\r\n\t\t\t\t\t// to another title, make sure that\r\n\t\t\t\t\t// title is placed before we place\r\n\t\t\t\t\t// this one.\r\n\t\t\t\t\tmoveItemInList(beforeTitle);\r\n\t\t\t\t\tnewPos = titles.indexOf(beforeTitle);\r\n\t\t\t\t} else if(afterTitle) {\r\n\t\t\t\t\t// Same deal\r\n\t\t\t\t\tmoveItemInList(afterTitle);\r\n\t\t\t\t\tnewPos = titles.indexOf(afterTitle);\r\n\t\t\t\t\tif(newPos >= 0) {\r\n\t\t\t\t\t\t++newPos;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// If a new position is specified, let's move it\r\n\t\t\t\tif (newPos !== -1) {\r\n\t\t\t\t\t// get its current Pos, and make sure\r\n\t\t\t\t\t// sure that it's _actually_ in the list\r\n\t\t\t\t\t// and that it would _actually_ move\r\n\t\t\t\t\t// (#4275) We don't bother calling\r\n\t\t\t\t\t//         indexOf unless we have a new\r\n\t\t\t\t\t//         position to work with\r\n\t\t\t\t\tvar currPos = titles.indexOf(title);\r\n\t\t\t\t\tif(currPos >= 0 && newPos !== currPos) {\r\n\t\t\t\t\t\t// move it!\r\n\t\t\t\t\t\ttitles.splice(currPos,1);\r\n\t\t\t\t\t\tif(newPos >= currPos) {\r\n\t\t\t\t\t\t\tnewPos--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttitles.splice(newPos,0,title);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar list = this.getTiddlerList(listTitle);\r\n\tif(!array || array.length === 0) {\r\n\t\treturn [];\r\n\t} else {\r\n\t\tvar titles = [], t, title;\r\n\t\t// First place any entries that are present in the list\r\n\t\tfor(t=0; t<list.length; t++) {\r\n\t\t\ttitle = list[t];\r\n\t\t\tif(array.indexOf(title) !== -1) {\r\n\t\t\t\ttitles.push(title);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Then place any remaining entries\r\n\t\tfor(t=0; t<array.length; t++) {\r\n\t\t\ttitle = array[t];\r\n\t\t\tif(list.indexOf(title) === -1) {\r\n\t\t\t\ttitles.push(title);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Finally obey the list-before and list-after fields of each tiddler in turn\r\n\t\tvar sortedTitles = titles.slice(0);\r\n\t\tfor(t=0; t<sortedTitles.length; t++) {\r\n\t\t\ttitle = sortedTitles[t];\r\n\t\t\tmoveItemInList(title);\r\n\t\t}\r\n\t\treturn titles;\r\n\t}\r\n};\r\n\r\nexports.getSubTiddler = function(title,subTiddlerTitle) {\r\n\tvar bundleInfo = this.getPluginInfo(title) || this.getTiddlerDataCached(title);\r\n\tif(bundleInfo && bundleInfo.tiddlers) {\r\n\t\tvar subTiddler = bundleInfo.tiddlers[subTiddlerTitle];\r\n\t\tif(subTiddler) {\r\n\t\t\treturn new $tw.Tiddler(subTiddler);\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n/*\r\nRetrieve a tiddler as a JSON string of the fields\r\n*/\r\nexports.getTiddlerAsJson = function(title) {\r\n\tvar tiddler = this.getTiddler(title);\r\n\tif(tiddler) {\r\n\t\tvar fields = Object.create(null);\r\n\t\t$tw.utils.each(tiddler.fields,function(value,name) {\r\n\t\t\tfields[name] = tiddler.getFieldString(name);\r\n\t\t});\r\n\t\treturn JSON.stringify(fields);\r\n\t} else {\r\n\t\treturn JSON.stringify({title: title});\r\n\t}\r\n};\r\n\r\nexports.getTiddlersAsJson = function(filter,spaces) {\r\n\tvar tiddlers = this.filterTiddlers(filter),\r\n\t\tspaces = (spaces === undefined) ? $tw.config.preferences.jsonSpaces : spaces,\r\n\t\tdata = [];\r\n\tfor(var t=0;t<tiddlers.length; t++) {\r\n\t\tvar tiddler = this.getTiddler(tiddlers[t]);\r\n\t\tif(tiddler) {\r\n\t\t\tvar fields = new Object();\r\n\t\t\tfor(var field in tiddler.fields) {\r\n\t\t\t\tfields[field] = tiddler.getFieldString(field);\r\n\t\t\t}\r\n\t\t\tdata.push(fields);\r\n\t\t}\r\n\t}\r\n\treturn JSON.stringify(data,null,spaces);\r\n};\r\n\r\n/*\r\nGet the content of a tiddler as a JavaScript object. How this is done depends on the type of the tiddler:\r\n\r\napplication/json: the tiddler JSON is parsed into an object\r\napplication/x-tiddler-dictionary: the tiddler is parsed as sequence of name:value pairs\r\n\r\nOther types currently just return null.\r\n\r\ntitleOrTiddler: string tiddler title or a tiddler object\r\ndefaultData: default data to be returned if the tiddler is missing or doesn't contain data\r\n\r\nNote that the same value is returned for repeated calls for the same tiddler data. The value is frozen to prevent modification; otherwise modifications would be visible to all callers\r\n*/\r\nexports.getTiddlerDataCached = function(titleOrTiddler,defaultData) {\r\n\tvar self = this,\r\n\t\ttiddler = titleOrTiddler;\r\n\tif(!(tiddler instanceof $tw.Tiddler)) {\r\n\t\ttiddler = this.getTiddler(tiddler);\t\r\n\t}\r\n\tif(tiddler) {\r\n\t\treturn this.getCacheForTiddler(tiddler.fields.title,\"data\",function() {\r\n\t\t\t// Return the frozen value\r\n\t\t\tvar value = self.getTiddlerData(tiddler.fields.title,undefined);\r\n\t\t\t$tw.utils.deepFreeze(value);\r\n\t\t\treturn value;\r\n\t\t}) || defaultData;\r\n\t} else {\r\n\t\treturn defaultData;\r\n\t}\r\n};\r\n\r\n/*\r\nAlternative, uncached version of getTiddlerDataCached(). The return value can be mutated freely and reused\r\n*/\r\nexports.getTiddlerData = function(titleOrTiddler,defaultData) {\r\n\tvar tiddler = titleOrTiddler,\r\n\t\tdata;\r\n\tif(!(tiddler instanceof $tw.Tiddler)) {\r\n\t\ttiddler = this.getTiddler(tiddler);\t\r\n\t}\r\n\tif(tiddler && tiddler.fields.text) {\r\n\t\tswitch(tiddler.fields.type) {\r\n\t\t\tcase \"application/json\":\r\n\t\t\t\t// JSON tiddler\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif($tw.utils.jsonIsValid(tiddler)){data = JSON.parse(tiddler.fields.text);}else{throw \"Invalid application/json tiddler text: \"+tiddler.fields.title;}\r\n\t\t\t\t} catch(ex) {\r\n\t\t\t\t\treturn defaultData;\r\n\t\t\t\t}\r\n\t\t\t\treturn data;\r\n\t\t\tcase \"application/x-tiddler-dictionary\":\r\n\t\t\t\treturn $tw.utils.parseFields(tiddler.fields.text);\r\n\t\t}\r\n\t}\r\n\treturn defaultData;\r\n};\r\n\r\n/*\r\nExtract an indexed field from within a data tiddler\r\n*/\r\nexports.extractTiddlerDataItem = function(titleOrTiddler,index,defaultText) {\r\n\tvar data = this.getTiddlerDataCached(titleOrTiddler,Object.create(null)),\r\n\t\ttext;\r\n    if(data && $tw.utils.jsonHas(data,index)) {\r\n        text = $tw.utils.jsonGet(data,index);\r\n\t}\r\n\tif(typeof text === \"string\" || typeof text === \"number\") {\r\n\t\treturn text.toString();\r\n\t} else {\r\n\t\treturn defaultText;\r\n\t}\r\n};\r\n\r\n/*\r\nSet a tiddlers content to a JavaScript object. Currently this is done by setting the tiddler's type to \"application/json\" and setting the text to the JSON text of the data.\r\ntitle: title of tiddler\r\ndata: object that can be serialised to JSON\r\nfields: optional hashmap of additional tiddler fields to be set\r\n*/\r\nexports.setTiddlerData = function(title,data,fields) {\r\n\tvar existingTiddler = this.getTiddler(title),\r\n\t\tnewFields = {\r\n\t\t\ttitle: title\r\n\t};\r\n\tif(existingTiddler && existingTiddler.fields.type === \"application/x-tiddler-dictionary\") {\r\n\t\tnewFields.text = $tw.utils.makeTiddlerDictionary(data);\r\n\t} else {\r\n\t\tnewFields.type = \"application/json\";\r\n\t\tnewFields.text = JSON.stringify(data,null,$tw.config.preferences.jsonSpaces);\r\n\t}\r\n\tthis.addTiddler(new $tw.Tiddler(this.getCreationFields(),existingTiddler,fields,newFields,this.getModificationFields()));\r\n};\r\n\r\n/*\r\nReturn the content of a tiddler as an array containing each line\r\n*/\r\nexports.getTiddlerList = function(title,field,index) {\r\n\tif(index) {\r\n\t\treturn $tw.utils.parseStringArray(this.extractTiddlerDataItem(title,index,\"\"));\r\n\t}\r\n\tfield = field || \"list\";\r\n\tvar tiddler = this.getTiddler(title);\r\n\tif(tiddler) {\r\n\t\treturn ($tw.utils.parseStringArray(tiddler.fields[field]) || []).slice(0);\r\n\t}\r\n\treturn [];\r\n};\r\n\r\n// Return a named global cache object. Global cache objects are cleared whenever a tiddler change occurs\r\nexports.getGlobalCache = function(cacheName,initializer) {\r\n\tthis.globalCache = this.globalCache || Object.create(null);\r\n\tif($tw.utils.hop(this.globalCache,cacheName)) {\r\n\t\treturn this.globalCache[cacheName];\r\n\t} else {\r\n\t\tthis.globalCache[cacheName] = initializer();\r\n\t\treturn this.globalCache[cacheName];\r\n\t}\r\n};\r\n\r\nexports.clearGlobalCache = function() {\r\n\tthis.globalCache = Object.create(null);\r\n};\r\n\r\n// Return the named cache object for a tiddler. If the cache doesn't exist then the initializer function is invoked to create it\r\nexports.getCacheForTiddler = function(title,cacheName,initializer) {\r\n\tthis.caches = this.caches || Object.create(null);\r\n\tvar caches = this.caches[title];\r\n\tif(caches && caches[cacheName]) {\r\n\t\treturn caches[cacheName];\r\n\t} else {\r\n\t\tif(!caches) {\r\n\t\t\tcaches = Object.create(null);\r\n\t\t\tthis.caches[title] = caches;\r\n\t\t}\r\n\t\tcaches[cacheName] = initializer();\r\n\t\treturn caches[cacheName];\r\n\t}\r\n};\r\n\r\n// Clear all caches associated with a particular tiddler, or, if the title is null, clear all the caches for all the tiddlers\r\nexports.clearCache = function(title) {\r\n\tif(title) {\r\n\t\tthis.caches = this.caches || Object.create(null);\r\n\t\tif($tw.utils.hop(this.caches,title)) {\r\n\t\t\tdelete this.caches[title];\r\n\t\t}\r\n\t} else {\r\n\t\tthis.caches = Object.create(null);\r\n\t}\r\n};\r\n\r\nexports.initParsers = function(moduleType) {\r\n\t// Install the parser modules\r\n\t$tw.Wiki.parsers = {};\r\n\tvar self = this;\r\n\t$tw.modules.forEachModuleOfType(\"parser\",function(title,module) {\r\n\t\tfor(var f in module) {\r\n\t\t\tif($tw.utils.hop(module,f)) {\r\n\t\t\t\t$tw.Wiki.parsers[f] = module[f]; // Store the parser class\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t// Use the generic binary parser for any binary types not registered so far\r\n\tif($tw.Wiki.parsers[\"application/octet-stream\"]) {\r\n\t\tObject.keys($tw.config.contentTypeInfo).forEach(function(type) {\r\n\t\t\tif(!$tw.utils.hop($tw.Wiki.parsers,type) && $tw.config.contentTypeInfo[type].encoding === \"base64\") {\r\n\t\t\t\t$tw.Wiki.parsers[type] = $tw.Wiki.parsers[\"application/octet-stream\"];\r\n\t\t\t}\r\n\t\t});\t\t\r\n\t}\r\n};\r\n\r\n/*\r\nParse a block of text of a specified MIME type\r\n\ttype: content type of text to be parsed\r\n\ttext: text\r\n\toptions: see below\r\nOptions include:\r\n\tparseAsInline: if true, the text of the tiddler will be parsed as an inline run\r\n\t_canonical_uri: optional string of the canonical URI of this content\r\n*/\r\nexports.parseText = function(type,text,options) {\r\n\ttext = text || \"\";\r\n\toptions = options || {};\r\n\t// Select a parser\r\n\tvar Parser = $tw.Wiki.parsers[type];\r\n\tif(!Parser && $tw.utils.getFileExtensionInfo(type)) {\r\n\t\tParser = $tw.Wiki.parsers[$tw.utils.getFileExtensionInfo(type).type];\r\n\t}\r\n\tif(!Parser) {\r\n\t\tParser = $tw.Wiki.parsers[options.defaultType || \"text/vnd.tiddlywiki\"];\r\n\t}\r\n\tif(!Parser) {\r\n\t\treturn null;\r\n\t}\r\n\t// Return the parser instance\r\n\treturn new Parser(type,text,{\r\n\t\tparseAsInline: options.parseAsInline,\r\n\t\twiki: this,\r\n\t\t_canonical_uri: options._canonical_uri\r\n\t});\r\n};\r\n\r\n/*\r\nParse a tiddler according to its MIME type\r\n*/\r\nexports.parseTiddler = function(title,options) {\r\n\toptions = $tw.utils.extend({},options);\r\n\tvar cacheType = options.parseAsInline ? \"inlineParseTree\" : \"blockParseTree\",\r\n\t\ttiddler = this.getTiddler(title),\r\n\t\tself = this;\r\n\treturn tiddler ? this.getCacheForTiddler(title,cacheType,function() {\r\n\t\t\tif(tiddler.hasField(\"_canonical_uri\")) {\r\n\t\t\t\toptions._canonical_uri = tiddler.fields._canonical_uri;\r\n\t\t\t}\r\n\t\t\treturn self.parseText(tiddler.fields.type,tiddler.fields.text,options);\r\n\t\t}) : null;\r\n};\r\n\r\nexports.parseTextReference = function(title,field,index,options) {\r\n\tvar tiddler,text;\r\n\tif(options.subTiddler) {\r\n\t\ttiddler = this.getSubTiddler(title,options.subTiddler);\r\n\t} else {\r\n\t\ttiddler = this.getTiddler(title);\r\n\t\tif(field === \"text\" || (!field && !index)) {\r\n\t\t\tthis.getTiddlerText(title); // Force the tiddler to be lazily loaded\r\n\t\t\treturn this.parseTiddler(title,options);\r\n\t\t}\r\n\t}\r\n\tif(field === \"text\" || (!field && !index)) {\r\n\t\tif(tiddler && tiddler.fields) {\r\n\t\t\treturn this.parseText(tiddler.fields.type,tiddler.fields.text,options);\t\t\t\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t} else if(field) {\r\n\t\tif(field === \"title\") {\r\n\t\t\ttext = title;\r\n\t\t} else {\r\n\t\t\tif(!tiddler || !tiddler.hasField(field)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\ttext = tiddler.fields[field];\r\n\t\t}\r\n\t\treturn this.parseText(\"text/vnd.tiddlywiki\",text.toString(),options);\r\n\t} else if(index) {\r\n\t\tthis.getTiddlerText(title); // Force the tiddler to be lazily loaded\r\n\t\ttext = this.extractTiddlerDataItem(tiddler,index,undefined);\r\n\t\tif(text === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.parseText(\"text/vnd.tiddlywiki\",text,options);\r\n\t}\r\n};\r\n\r\n/*\r\nMake a widget tree for a parse tree\r\nparser: parser object\r\noptions: see below\r\nOptions include:\r\ndocument: optional document to use\r\nvariables: hashmap of variables to set\r\nparentWidget: optional parent widget for the root node\r\n*/\r\nexports.makeWidget = function(parser,options) {\r\n\toptions = options || {};\r\n\tvar widgetNode = {\r\n\t\t\ttype: \"widget\",\r\n\t\t\tchildren: []\r\n\t\t},\r\n\t\tcurrWidgetNode = widgetNode;\r\n\t// Create set variable widgets for each variable\r\n\t$tw.utils.each(options.variables,function(value,name) {\r\n\t\tvar setVariableWidget = {\r\n\t\t\ttype: \"set\",\r\n\t\t\tattributes: {\r\n\t\t\t\tname: {type: \"string\", value: name},\r\n\t\t\t\tvalue: {type: \"string\", value: value}\r\n\t\t\t},\r\n\t\t\tchildren: []\r\n\t\t};\r\n\t\tcurrWidgetNode.children = [setVariableWidget];\r\n\t\tcurrWidgetNode = setVariableWidget;\r\n\t});\r\n\t// Add in the supplied parse tree nodes\r\n\tcurrWidgetNode.children = parser ? parser.tree : [];\r\n\t// Create the widget\r\n\treturn new widget.widget(widgetNode,{\r\n\t\twiki: this,\r\n\t\tdocument: options.document || $tw.fakeDocument,\r\n\t\tparentWidget: options.parentWidget\r\n\t});\r\n};\r\n\r\n/*\r\nMake a widget tree for transclusion\r\ntitle: target tiddler title\r\noptions: as for wiki.makeWidget() plus:\r\noptions.field: optional field to transclude (defaults to \"text\")\r\noptions.mode: transclusion mode \"inline\" or \"block\"\r\noptions.children: optional array of children for the transclude widget\r\noptions.importVariables: optional importvariables filter string for macros to be included\r\noptions.importPageMacros: optional boolean; if true, equivalent to passing \"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\" to options.importVariables\r\n*/\r\nexports.makeTranscludeWidget = function(title,options) {\r\n\toptions = options || {};\r\n\tvar parseTreeDiv = {tree: [{\r\n\t\t\ttype: \"element\",\r\n\t\t\ttag: \"div\",\r\n\t\t\tchildren: []}]},\r\n\t\tparseTreeImportVariables = {\r\n\t\t\ttype: \"importvariables\",\r\n\t\t\tattributes: {\r\n\t\t\t\tfilter: {\r\n\t\t\t\t\tname: \"filter\",\r\n\t\t\t\t\ttype: \"string\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tisBlock: false,\r\n\t\t\tchildren: []},\r\n\t\tparseTreeTransclude = {\r\n\t\t\ttype: \"transclude\",\r\n\t\t\tattributes: {\r\n\t\t\t\ttiddler: {\r\n\t\t\t\t\tname: \"tiddler\",\r\n\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\tvalue: title}},\r\n\t\t\tisBlock: !options.parseAsInline};\r\n\tif(options.importVariables || options.importPageMacros) {\r\n\t\tif(options.importVariables) {\r\n\t\t\tparseTreeImportVariables.attributes.filter.value = options.importVariables;\r\n\t\t} else if(options.importPageMacros) {\r\n\t\t\tparseTreeImportVariables.attributes.filter.value = \"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\";\r\n\t\t}\r\n\t\tparseTreeDiv.tree[0].children.push(parseTreeImportVariables);\r\n\t\tparseTreeImportVariables.children.push(parseTreeTransclude);\r\n\t} else {\r\n\t\tparseTreeDiv.tree[0].children.push(parseTreeTransclude);\r\n\t}\r\n\tif(options.field) {\r\n\t\tparseTreeTransclude.attributes.field = {type: \"string\", value: options.field};\r\n\t}\r\n\tif(options.mode) {\r\n\t\tparseTreeTransclude.attributes.mode = {type: \"string\", value: options.mode};\r\n\t}\r\n\tif(options.children) {\r\n\t\tparseTreeTransclude.children = options.children;\r\n\t}\r\n\treturn $tw.wiki.makeWidget(parseTreeDiv,options);\r\n};\r\n\r\n/*\r\nParse text in a specified format and render it into another format\r\n\toutputType: content type for the output\r\n\ttextType: content type of the input text\r\n\ttext: input text\r\n\toptions: see below\r\nOptions include:\r\nvariables: hashmap of variables to set\r\nparentWidget: optional parent widget for the root node\r\n*/\r\nexports.renderText = function(outputType,textType,text,options) {\r\n\toptions = options || {};\r\n\tvar parser = this.parseText(textType,text,options),\r\n\t\twidgetNode = this.makeWidget(parser,options);\r\n\tvar container = $tw.fakeDocument.createElement(\"div\");\r\n\twidgetNode.render(container,null);\r\n\treturn outputType === \"text/html\" ? container.innerHTML : container.textContent;\r\n};\r\n\r\n/*\r\nParse text from a tiddler and render it into another format\r\n\toutputType: content type for the output\r\n\ttitle: title of the tiddler to be rendered\r\n\toptions: see below\r\nOptions include:\r\nvariables: hashmap of variables to set\r\nparentWidget: optional parent widget for the root node\r\n*/\r\nexports.renderTiddler = function(outputType,title,options) {\r\n\toptions = options || {};\r\n\tvar parser = this.parseTiddler(title,options),\r\n\t\twidgetNode = this.makeWidget(parser,options);\r\n\tvar container = $tw.fakeDocument.createElement(\"div\");\r\n\twidgetNode.render(container,null);\r\n\treturn outputType === \"text/html\" ? container.innerHTML : (outputType === \"text/plain-formatted\" ? container.formattedTextContent : container.textContent);\r\n};\r\n\r\n/*\r\nReturn an array of tiddler titles that match a search string\r\n\ttext: The text string to search for\r\n\toptions: see below\r\nOptions available:\r\n\tsource: an iterator function for the source tiddlers, called source(iterator), where iterator is called as iterator(tiddler,title)\r\n\texclude: An array of tiddler titles to exclude from the search\r\n\tinvert: If true returns tiddlers that do not contain the specified string\r\n\tcaseSensitive: If true forces a case sensitive search\r\n\tfield: If specified, restricts the search to the specified field, or an array of field names\r\n\tanchored: If true, forces all but regexp searches to be anchored to the start of text\r\n\texcludeField: If true, the field options are inverted to specify the fields that are not to be searched\r\n\tThe search mode is determined by the first of these boolean flags to be true\r\n\t\tliteral: searches for literal string\r\n\t\twhitespace: same as literal except runs of whitespace are treated as a single space\r\n\t\tregexp: treats the search term as a regular expression\r\n\t\twords: (default) treats search string as a list of tokens, and matches if all tokens are found, regardless of adjacency or ordering\r\n*/\r\nexports.search = function(text,options) {\r\n\toptions = options || {};\r\n\tvar self = this,\r\n\t\tt,\r\n\t\tinvert = !!options.invert;\r\n\t// Convert the search string into a regexp for each term\r\n\tvar terms, searchTermsRegExps,\r\n\t\tflags = options.caseSensitive ? \"\" : \"i\",\r\n\t\tanchor = options.anchored ? \"^\" : \"\";\r\n\tif(options.literal) {\r\n\t\tif(text.length === 0) {\r\n\t\t\tsearchTermsRegExps = null;\r\n\t\t} else {\r\n\t\t\tsearchTermsRegExps = [new RegExp(\"(\" + anchor + $tw.utils.escapeRegExp(text) + \")\",flags)];\r\n\t\t}\r\n\t} else if(options.whitespace) {\r\n\t\tterms = [];\r\n\t\t$tw.utils.each(text.split(/\\s+/g),function(term) {\r\n\t\t\tif(term) {\r\n\t\t\t\tterms.push($tw.utils.escapeRegExp(term));\r\n\t\t\t}\r\n\t\t});\r\n\t\tsearchTermsRegExps = [new RegExp(\"(\" + anchor + terms.join(\"\\\\s+\") + \")\",flags)];\r\n\t} else if(options.regexp) {\r\n\t\ttry {\r\n\t\t\tsearchTermsRegExps = [new RegExp(\"(\" + text + \")\",flags)];\t\t\t\r\n\t\t} catch(e) {\r\n\t\t\tsearchTermsRegExps = null;\r\n\t\t\tconsole.log(\"Regexp error parsing /(\" + text + \")/\" + flags + \": \",e);\r\n\t\t}\r\n\t} else {\r\n\t\tterms = text.split(/ +/);\r\n\t\tif(terms.length === 1 && terms[0] === \"\") {\r\n\t\t\tsearchTermsRegExps = null;\r\n\t\t} else {\r\n\t\t\tsearchTermsRegExps = [];\r\n\t\t\tfor(t=0; t<terms.length; t++) {\r\n\t\t\t\tsearchTermsRegExps.push(new RegExp(\"(\" + anchor + $tw.utils.escapeRegExp(terms[t]) + \")\",flags));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// Accumulate the array of fields to be searched or excluded from the search\r\n\tvar fields = [];\r\n\tif(options.field) {\r\n\t\tif($tw.utils.isArray(options.field)) {\r\n\t\t\t$tw.utils.each(options.field,function(fieldName) {\r\n\t\t\t\tif(fieldName) {\r\n\t\t\t\t\tfields.push(fieldName);\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tfields.push(options.field);\r\n\t\t}\r\n\t}\r\n\t// Use default fields if none specified and we're not excluding fields (excluding fields with an empty field array is the same as searching all fields)\r\n\tif(fields.length === 0 && !options.excludeField) {\r\n\t\tfields.push(\"title\");\r\n\t\tfields.push(\"tags\");\r\n\t\tfields.push(\"text\");\r\n\t}\r\n\t// Function to check a given tiddler for the search term\r\n\tvar searchTiddler = function(title) {\r\n\t\tif(!searchTermsRegExps) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tvar notYetFound = searchTermsRegExps.slice();\r\n\r\n\t\tvar tiddler = self.getTiddler(title);\r\n\t\tif(!tiddler) {\r\n\t\t\ttiddler = new $tw.Tiddler({title: title, text: \"\", type: \"text/vnd.tiddlywiki\"});\r\n\t\t}\r\n\t\tvar contentTypeInfo = $tw.config.contentTypeInfo[tiddler.fields.type] || $tw.config.contentTypeInfo[\"text/vnd.tiddlywiki\"],\r\n\t\t\tsearchFields;\r\n\t\t// Get the list of fields we're searching\r\n\t\tif(options.excludeField) {\r\n\t\t\tsearchFields = Object.keys(tiddler.fields);\r\n\t\t\t$tw.utils.each(fields,function(fieldName) {\r\n\t\t\t\tvar p = searchFields.indexOf(fieldName);\r\n\t\t\t\tif(p !== -1) {\r\n\t\t\t\t\tsearchFields.splice(p,1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsearchFields = fields;\r\n\t\t}\r\n\t\tfor(var fieldIndex=0; notYetFound.length>0 && fieldIndex<searchFields.length; fieldIndex++) {\r\n\t\t\t// Don't search the text field if the content type is binary\r\n\t\t\tvar fieldName = searchFields[fieldIndex];\r\n\t\t\tif(fieldName === \"text\" && contentTypeInfo.encoding !== \"utf8\") {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar str = tiddler.fields[fieldName],\r\n\t\t\t\tt;\r\n\t\t\tif(str) {\r\n\t\t\t\tif($tw.utils.isArray(str)) {\r\n\t\t\t\t\t// If the field value is an array, test each regexp against each field array entry and fail if each regexp doesn't match at least one field array entry\r\n\t\t\t\t\tfor(var s=0; s<str.length; s++) {\r\n\t\t\t\t\t\tfor(t=0; t<notYetFound.length;) {\r\n\t\t\t\t\t\t\tif(notYetFound[t].test(str[s])) {\r\n\t\t\t\t\t\t\t\tnotYetFound.splice(t, 1);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tt++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If the field isn't an array, force it to a string and test each regexp against it and fail if any do not match\r\n\t\t\t\t\tstr = tiddler.getFieldString(fieldName);\r\n\t\t\t\t\tfor(t=0; t<notYetFound.length;) {\r\n\t\t\t\t\t\tif(notYetFound[t].test(str)) {\r\n\t\t\t\t\t\t\tnotYetFound.splice(t, 1);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tt++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn notYetFound.length == 0;\r\n\t};\r\n\t// Loop through all the tiddlers doing the search\r\n\tvar results = [],\r\n\t\tsource = options.source || this.each;\r\n\tsource(function(tiddler,title) {\r\n\t\tif(searchTiddler(title) !== options.invert) {\r\n\t\t\tresults.push(title);\r\n\t\t}\r\n\t});\r\n\t// Remove any of the results we have to exclude\r\n\tif(options.exclude) {\r\n\t\tfor(t=0; t<options.exclude.length; t++) {\r\n\t\t\tvar p = results.indexOf(options.exclude[t]);\r\n\t\t\tif(p !== -1) {\r\n\t\t\t\tresults.splice(p,1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn results;\r\n};\r\n\r\n/*\r\nTrigger a load for a tiddler if it is skinny. Returns the text, or undefined if the tiddler is missing, null if the tiddler is being lazily loaded.\r\n*/\r\nexports.getTiddlerText = function(title,defaultText) {\r\n\tvar tiddler = this.getTiddler(title);\r\n\t// Return undefined if the tiddler isn't found\r\n\tif(!tiddler) {\r\n\t\treturn defaultText;\r\n\t}\r\n\tif(!tiddler.hasField(\"_is_skinny\")) {\r\n\t\t// Just return the text if we've got it\r\n\t\treturn tiddler.fields.text || \"\";\r\n\t} else {\r\n\t\t// Tell any listeners about the need to lazily load this tiddler\r\n\t\tthis.dispatchEvent(\"lazyLoad\",title);\r\n\t\t// Indicate that the text is being loaded\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\n/*\r\nCheck whether the text of a tiddler matches a given value. By default, the comparison is case insensitive, and any spaces at either end of the tiddler text is trimmed\r\n*/\r\nexports.checkTiddlerText = function(title,targetText,options) {\r\n\toptions = options || {};\r\n\tvar text = this.getTiddlerText(title,\"\");\r\n\tif(!options.noTrim) {\r\n\t\ttext = text.trim();\r\n\t}\r\n\tif(!options.caseSensitive) {\r\n\t\ttext = text.toLowerCase();\r\n\t\ttargetText = targetText.toLowerCase();\r\n\t}\r\n\treturn text === targetText;\r\n}\r\n\r\n/*\r\nRead an array of browser File objects, invoking callback(tiddlerFieldsArray) once they're all read\r\n*/\r\nexports.readFiles = function(files,options) {\r\n\tvar callback;\r\n\tif(typeof options === \"function\") {\r\n\t\tcallback = options;\r\n\t\toptions = {};\r\n\t} else {\r\n\t\tcallback = options.callback;\r\n\t}\r\n\tvar result = [],\r\n\t\toutstanding = files.length,\r\n\t\treadFileCallback = function(tiddlerFieldsArray) {\r\n\t\t\tresult.push.apply(result,tiddlerFieldsArray);\r\n\t\t\tif(--outstanding === 0) {\r\n\t\t\t\tcallback(result);\r\n\t\t\t}\r\n\t\t};\r\n\tfor(var f=0; f<files.length; f++) {\r\n\t\tthis.readFile(files[f],$tw.utils.extend({},options,{callback: readFileCallback}));\r\n\t}\r\n\treturn files.length;\r\n};\r\n\r\n/*\r\nRead a browser File object, invoking callback(tiddlerFieldsArray) with an array of tiddler fields objects\r\n*/\r\nexports.readFile = function(file,options) {\r\n\tvar callback;\r\n\tif(typeof options === \"function\") {\r\n\t\tcallback = options;\r\n\t\toptions = {};\r\n\t} else {\r\n\t\tcallback = options.callback;\r\n\t}\r\n\t// Get the type, falling back to the filename extension\r\n\tvar self = this,\r\n\t\ttype = file.type;\r\n\tif(type === \"\" || !type) {\r\n\t\tvar dotPos = file.name.lastIndexOf(\".\");\r\n\t\tif(dotPos !== -1) {\r\n\t\t\tvar fileExtensionInfo = $tw.utils.getFileExtensionInfo(file.name.substr(dotPos));\r\n\t\t\tif(fileExtensionInfo) {\r\n\t\t\t\ttype = fileExtensionInfo.type;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// Figure out if we're reading a binary file\r\n\tvar contentTypeInfo = $tw.config.contentTypeInfo[type],\r\n\t\tisBinary = contentTypeInfo ? contentTypeInfo.encoding === \"base64\" : false;\r\n\t// Log some debugging information\r\n\tif($tw.log.IMPORT) {\r\n\t\tconsole.log(\"Importing file '\" + file.name + \"', type: '\" + type + \"', isBinary: \" + isBinary);\r\n\t}\r\n\t// Give the hook a chance to process the drag\r\n\tif($tw.hooks.invokeHook(\"th-importing-file\",{\r\n\t\tfile: file,\r\n\t\ttype: type,\r\n\t\tisBinary: isBinary,\r\n\t\tcallback: callback\r\n\t}) !== true) {\r\n\t\tthis.readFileContent(file,type,isBinary,options.deserializer,callback);\r\n\t}\r\n};\r\n\r\n/*\r\nLower level utility to read the content of a browser File object, invoking callback(tiddlerFieldsArray) with an array of tiddler fields objects\r\n*/\r\nexports.readFileContent = function(file,type,isBinary,deserializer,callback) {\r\n\tvar self = this;\r\n\t// Create the FileReader\r\n\tvar reader = new FileReader();\r\n\t// Onload\r\n\treader.onload = function(event) {\r\n\t\tvar text = event.target.result,\r\n\t\t\ttiddlerFields = {title: file.name || \"Untitled\", type: type};\r\n\t\tif(isBinary) {\r\n\t\t\tvar commaPos = text.indexOf(\",\");\r\n\t\t\tif(commaPos !== -1) {\r\n\t\t\t\ttext = text.substr(commaPos + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check whether this is an encrypted TiddlyWiki file\r\n\t\tvar encryptedJson = $tw.utils.extractEncryptedStoreArea(text);\r\n\t\tif(encryptedJson) {\r\n\t\t\t// If so, attempt to decrypt it with the current password\r\n\t\t\t$tw.utils.decryptStoreAreaInteractive(encryptedJson,function(tiddlers) {\r\n\t\t\t\tcallback(tiddlers);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Otherwise, just try to deserialise any tiddlers in the file\r\n\t\t\tcallback(self.deserializeTiddlers(type,text,tiddlerFields,{deserializer: deserializer}));\r\n\t\t}\r\n\t};\r\n\t// Kick off the read\r\n\tif(isBinary) {\r\n\t\treader.readAsDataURL(file);\r\n\t} else {\r\n\t\treader.readAsText(file);\r\n\t}\r\n};\r\n\r\n/*\r\nFind any existing draft of a specified tiddler\r\n*/\r\nexports.findDraft = function(targetTitle) {\r\n\tvar draftTitle = undefined;\r\n\tthis.forEachTiddler({includeSystem: true},function(title,tiddler) {\r\n\t\tif(tiddler.fields[\"draft.title\"] && tiddler.fields[\"draft.of\"] === targetTitle) {\r\n\t\t\tdraftTitle = title;\r\n\t\t}\r\n\t});\r\n\treturn draftTitle;\r\n}\r\n\r\n/*\r\nCheck whether the specified draft tiddler has been modified.\r\nIf the original tiddler doesn't exist, create  a vanilla tiddler variable,\r\nto check if additional fields have been added.\r\n*/\r\nexports.isDraftModified = function(title) {\r\n\tvar tiddler = this.getTiddler(title);\r\n\tif(!tiddler.isDraft()) {\r\n\t\treturn false;\r\n\t}\r\n\tvar ignoredFields = [\"created\", \"modified\", \"title\", \"draft.title\", \"draft.of\"],\r\n\t\torigTiddler = this.getTiddler(tiddler.fields[\"draft.of\"]) || new $tw.Tiddler({text:\"\", tags:[]}),\r\n\t\ttitleModified = tiddler.fields[\"draft.title\"] !== tiddler.fields[\"draft.of\"];\r\n\treturn titleModified || !tiddler.isEqual(origTiddler,ignoredFields);\r\n};\r\n\r\n/*\r\nAdd a new record to the top of the history stack\r\ntitle: a title string or an array of title strings\r\nfromPageRect: page coordinates of the origin of the navigation\r\nhistoryTitle: title of history tiddler (defaults to $:/HistoryList)\r\n*/\r\nexports.addToHistory = function(title,fromPageRect,historyTitle) {\r\n\tvar story = new $tw.Story({wiki: this, historyTitle: historyTitle});\r\n\tstory.addToHistory(title,fromPageRect);\t\t\r\n};\r\n\r\n/*\r\nAdd a new tiddler to the story river\r\ntitle: a title string or an array of title strings\r\nfromTitle: the title of the tiddler from which the navigation originated\r\nstoryTitle: title of story tiddler (defaults to $:/StoryList)\r\noptions: see story.js\r\n*/\r\nexports.addToStory = function(title,fromTitle,storyTitle,options) {\r\n\tvar story = new $tw.Story({wiki: this, storyTitle: storyTitle});\r\n\tstory.addToStory(title,fromTitle,options);\t\t\r\n};\r\n\r\n/*\r\nGenerate a title for the draft of a given tiddler\r\n*/\r\nexports.generateDraftTitle = function(title) {\r\n\tvar c = 0,\r\n\t\tdraftTitle,\r\n\t\tusername = this.getTiddlerText(\"$:/status/UserName\"),\r\n\t\tattribution = username ? \" by \" + username : \"\";\r\n\tdo {\r\n\t\tdraftTitle = \"Draft \" + (c ? (c + 1) + \" \" : \"\") + \"of '\" + title + \"'\" + attribution;\r\n\t\tc++;\r\n\t} while(this.tiddlerExists(draftTitle));\r\n\treturn draftTitle;\r\n};\r\n\r\n/*\r\nInvoke the available upgrader modules\r\ntitles: array of tiddler titles to be processed\r\ntiddlers: hashmap by title of tiddler fields of pending import tiddlers. These can be modified by the upgraders. An entry with no fields indicates a tiddler that was pending import has been suppressed. When entries are added to the pending import the tiddlers hashmap may have entries that are not present in the titles array\r\nReturns a hashmap of messages keyed by tiddler title.\r\n*/\r\nexports.invokeUpgraders = function(titles,tiddlers) {\r\n\t// Collect up the available upgrader modules\r\n\tvar self = this;\r\n\tif(!this.upgraderModules) {\r\n\t\tthis.upgraderModules = [];\r\n\t\t$tw.modules.forEachModuleOfType(\"upgrader\",function(title,module) {\r\n\t\t\tif(module.upgrade) {\r\n\t\t\t\tself.upgraderModules.push(module);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t// Invoke each upgrader in turn\r\n\tvar messages = {};\r\n\tfor(var t=0; t<this.upgraderModules.length; t++) {\r\n\t\tvar upgrader = this.upgraderModules[t],\r\n\t\t\tupgraderMessages = upgrader.upgrade(this,titles,tiddlers);\r\n\t\t$tw.utils.extend(messages,upgraderMessages);\r\n\t}\r\n\treturn messages;\r\n};\r\n\r\n// Determine whether a plugin by title is dynamically loadable\r\nexports.doesPluginRequireReload = function(title) {\r\n\treturn this.doesPluginInfoRequireReload(this.getPluginInfo(title) || this.getTiddlerDataCached(title));\r\n};\r\n\r\n// Determine whether a plugin info structure is dynamically loadable\r\nexports.doesPluginInfoRequireReload = function(pluginInfo) {\r\n\tif(pluginInfo) {\r\n\t\tvar foundModule = false;\r\n\t\t$tw.utils.each(pluginInfo.tiddlers,function(tiddler) {\r\n\t\t\tif(tiddler.type === \"application/javascript\" && $tw.utils.hop(tiddler,\"module-type\")) {\r\n\t\t\t\tfoundModule = true;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn foundModule;\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\n})();\r\n\r\n",
            "type": "application/javascript",
            "module-type": "wikimethod",
            "created": "20200123001416145",
            "modified": "20200123001454077",
            "source": "$:/core/modules/wiki.js",
            "tags": "",
            "version": "5.1.22"
        },
        "$:/plugins/joshuafontany/jsonmangler/readme/csvHelp": {
            "title": "$:/plugins/joshuafontany/jsonmangler/readme/csvHelp",
            "tags": "$:/plugins/joshuafontany/jsonmangler/readme",
            "text": "!! ''Csv Widget''\n\nCsv tiddlers, where `type` equals `application/csv`, are now rendered through a new $csv widget. This widget exposes options for the [ext[PapaParse library|https://www.papaparse.com/docs]], automatically parses and renders the csv data as an html table (with \"page-ination\" options), and allow you to import the csv data as other tiddlywiki-data-schemes: one tiddler per row, one json tiddler per row, or one json tiddler of the entire array. See [[Import Help|$:/plugins/joshuafontany/jsonmangler/readme/csvImportHelp]] for more information."
        },
        "$:/plugins/joshuafontany/jsonmangler/readme/csvImportHelp": {
            "title": "$:/plugins/joshuafontany/jsonmangler/readme/csvImportHelp",
            "tags": "",
            "text": "!! ''Csv Import Help''\n\n\"Importing\" a Csv tiddler converts the data into one Tiddler for each row (or into one or more Json Tiddlers).\n\nThe results depend on certain options set on the Csv Tiddler (above) such as Headers, Skip Empty Lines, the Peek / Preview values, etc - as well as the Import rules (below). There are a number of \"placeholder variables\" used in the import procces as described below. These are not set as normal tiddlywiki variables, and are only used when the import is performed.\n\n!!! Individual Row Tiddlers | Json Row Tiddlers\n\nIn these modes each individual row is rendered to a tiddler, then these tiddlers are packaged as shadow-tiddlers into a plugin. This takes advantage of the shadow-tiddler features such as replaceing an import all-at-once, comparing multiple snapshots, overwriting and restoring shadow tiddlers, etc.\n\nThe `[<primaryKey>]` placeholder variable is automatically set to the row number being proccesed during import of individual jsons or tiddlers (not used during array import). When Headers Row equals `yes`, you can override this by selecting a column number from a dropdown. Columns are zero indexed, and the contents of this column in each row will be used as the `[<primaryKey>]` variable while that row is proccessed. If the values in this column are not unique IDs, then data may be overwritten during the import operation.\n\n!!! Column Names\n\n//Tiddlers mode only:// If Headers Row equals `no`, then the `[<columnNumber>]` variable is used to generate field names. Custom field names are only used when Headers Row equals `yes`. When importing named fields, the Header text for that columnis automatically 'slugged' to be a valid field name - with all alpha characters converted to lowercase and all illegal characters replaced by dash `-`, or underscore `_`, before being stored as `[<columnName>]`.\n\nThis import type also generates a subtiddler using the chosen filter with `[<primaryKey>]` set to \"Headers_Tiddler\". This tiddler will use each \"slugged\" fieldname to store the original \"unslugged\" text as its value. This can help manage complex column names and retains a 1:1 mapping with the rest of the imported data fields.\n\nIf this causes errors or unexpected results, import this Csv with Headers unchecked. Then reference the tiddler with `[<primaryKey>]` equal to 0 (zero) using the numbered field names to get the original column header values."
        },
        "$:/plugins/joshuafontany/jsonmangler/readme/Deduplication": {
            "title": "$:/plugins/joshuafontany/jsonmangler/readme/Deduplication",
            "caption": "Deduplication",
            "created": "20181203050420523",
            "modified": "20190214024606691",
            "tags": "$:/plugins/joshuafontany/jsonmangler/readme",
            "type": "text/vnd.tiddlywiki",
            "text": "!! ''{{$:/plugins/joshuafontany/jsonmangler/readme/Deduplication!!caption}}''\r\n!!!The Backwards Compatibility Problem\r\nThis plugin changes the methods tiddlywiki uses to retrieve and set data with json data tiddlers, and there is now a possibility of \"duplicate values\" within tiddler objects.\n\nAn index path can refer to:\n\n<ol>\r\n<li> A top-level key that is a literal match to the input path.</li>\r\n<li> A top-level key that matches the input path by adding or removing a prefixed slash ('/').</li>\r\n<li>A nested key whose position matches each token in the input path in order (leading slash optional).</li>\r\n</ol>\n\nEach of these can contain values, and different values at that. How do we resolve this?\n\n!!!Preference Order\r\nEach ''get'' or ''set'' operation will have a preference if more than one of the above cases are true.\n\n* ''get'' operations will prefer a top-level key without a trailing slash. If no value is found there, a slash prefix is added to the path and this top-level key is tested for a value. Lastly, if no value is found there, then the path is tokenized and a value is searched for in nested objects.\n\n*''set'' operations follow the same preference based on the existence of the key. First a literal with no slash prefix, then with a slash prefix, and finally if these keys do not exist the value is set at the nested location.\n\n!!!Deduplication of Values\r\nAll `tm-json-` messages handled by the `<$jsonmangler>` widget will test the json data tiddler for duplicate keys. If found, a //deduplication// operation will be performed.\n\nThis follows the above preferences, taking any top level keys that match a nested value location, writing the top-level value to the nested location, and then deleteding the top-level key.\n\n//Note: Deduplication does not apply to duplicate values within an array, as these values will have different indexes.//"
        },
        "$:/plugins/joshuafontany/jsonmangler/readme/IndexPaths": {
            "title": "$:/plugins/joshuafontany/jsonmangler/readme/IndexPaths",
            "caption": "Index Paths",
            "created": "20181203050446184",
            "modified": "20190214044436165",
            "tags": "$:/plugins/joshuafontany/jsonmangler/readme",
            "type": "text/vnd.tiddlywiki",
            "text": "!! ''{{$:/plugins/joshuafontany/jsonmangler/readme/IndexPaths!!caption}}''\n\nThis plugin changes the methods tiddlywiki uses to retrieve and set values in json data tiddlers. It does this in a way that aims for //backwards compatibility//.\n\n''Index Paths'' are a new way of referring to indexes in TextReferences that allows full access to nested objects and arrays. Each forward slash ` / ` character in the index separates it into a set of key-name tokens. These tokens are then queried in order to access values in nested objects and arrays. If a key is a numeral, and the current object is an array, this is handled automatically by the widget. Indexes are 0 (zero) based.\n\n//Leading slashes are optional.//\n\n//`/test == test, /0/nested == 0/nested`//\n\nExample: `/key1/5` refers to the sixth index of an array found in the root object's \"key1\" property. In the below object, this value would be \"FooBar\".\n\n```json\r\n{\"key1\":[0,1,2,3,4,\"FooBar\",6,7,8,9]}\r\n```\n\nTo handle cases where there are literal `/`s in a key-name token, write them as `~1` (and write andy `~`s as `~0`). These will automatically be converted when querying the current object's keys. To make things a bit easier, a new pair of filter operators, ''encodeindex[]'' and ''decodeindex[]'' are provided with the plugin. These can be used to encode or decode key-name tokens or whole index paths.\r\n"
        },
        "$:/plugins/joshuafontany/jsonmangler/readme/Installation": {
            "title": "$:/plugins/joshuafontany/jsonmangler/readme/Installation",
            "caption": "Installation",
            "created": "20181203050502346",
            "modified": "20190310051517340",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "[[JsonMangler|$:/plugins/joshuafontany/jsonmangler]] requires the following excellent plugin:\n\n* [[ModLoader|$:/plugins/ebalster/modloader]] by Evan Balster\n\nThanks Evan!\n\n!! Single-file .html wikis / Node served tid files saved to wiki folder\n\nDrag and drop the following links to install the plugins, then restart your server and(or) refresh your wiki.\n\n* $:/plugins/ebalster/modloader\n* $:/plugins/joshuafontany/jsonmangler\n\n!! Node served from TiddlyWiki's plugin folder\n\nUse Git to clone my `master` repository into a folder in your TiddlyWiki5 repo's plugin folder, `./plugins/joshuafontany/jsonmangler/`, then setup folders for the required ModLoader plugin or import it as above.\n\nAlternately, it may be simpler to use single-file `plugin.info` versions under node.js, which are packaged into the *.zip files found in the Releases tab.\n\nGo to [ext[Json Mangler Github Releases|https://github.com/joshuafontany/TW5-JsonMangler/releases]] and download the latest *.zip file.\n\nPlace the *.zip file in your `.\\TiddlyWiki5` directory, right click and select `Extract Here` (7zip) or `Extract to here` (Winzip).\n\nA plugin.info (json) file containing all the tiddlers for each required plugin will then be placed in the right folders within your `.\\TiddlyWiki5\\plugins` folder.\n\nEdit any wiki's `tiddlywiki.info` file to include the following in the `plugins` array.\n\n```\n\"joshuafontany/jsonmangler\",\n\"ebalster/modloader\"\n```\n\nFinally, restart your server.\n\n!!Related Plugins\n\nThis wiki comes pre-loaded with a couple of non-required plugins useful in testing.\n\nIf you would like to install them from here, drag and drop these links to your wiki:\n\n* $:/plugins/ebalster/formula\n* $:/plugins/ebalster/attribute-modules\n\nThese are included in the current release *.zip as plugin.info folders."
        },
        "$:/plugins/joshuafontany/jsonmangler/readme.md": {
            "title": "$:/plugins/joshuafontany/jsonmangler/readme.md",
            "text": "## readme.md\n\n20th Feb 2020 at 11:00am\n\n<div class=\"tc-tiddler-body tc-reveal\">\n\n# **Hello There**\n\nTW5-JsonMangler\n\nComplex JSON Support & Tools by [Joshua Fontany](https://github.com/joshuafontany), v 2.1.1\n\nThis plugin changes the methods tiddlywiki uses to retrieve and set values in json data tiddlers. It does so in a way that aims for _backwards compatibility_.\n\nIt introduces new features, widgets, and filter operators to manage, edit, and view json and csv tiddlers:\n\n*   Allows Tiddlywiki TextReferences to target nested values (\"complex json\").\n*   An automatic **alert** when calling actions on an invalid json data tiddler, or when plugin tiddlers have been edited.\n*   New buttons in the **editTemplate** for 'application/json' data tiddlers.\n*   **$jsonmangler**, a widget that catches messages to edit json data tiddlers (used in the editTemplate).\n*   A new $:/ControlPanel tab, **Plugin Management** which allows plugin creation and editing using the new json libraries.\n*   New filter operators:\n    * An updated ''indexes[] operator'' that can show the immediate (\"root\") or `all` indexes in the data tiddler. See the documentation for the new operator syntax.\n    * An updated ''has[] operator'' that parses paths when the `index` suffix is used.\n    *   A new **tsort[] operator** that uses a _tokenized sorting method_ to resolve pesky sorting problems.\n    *   A new pair of filter operators: **encodeindex[]** and **decodeindex[]**. These are used to \"escape\" or \"unescape\" the index path separation character `/` (and the encoding character `~` ). This can be used to build paths with literal `/`s in a key name token. This is very useful and must be studied closely.\n    *   A new **encodetiddler[]** operator, which returns each tiddler in the input as a full json object. Used with the previous pair of operators, this can be used to pack plugin tiddlers.\n*   New Csv (Character Seperated Value) tiddler and import features! See the demo wiki for more information.\n\n# Installation\n\n[JsonMangler](https://joshuafontany.github.io/TW5-JsonMangler/) requires the following excellent plugin:\n\n*   ModLoader by Evan Balster\n\nThanks Evan!\n\n## For Single-file .html wikis / Node served tid files saved to wiki folder:\n\nGo to the [JsonMangler Example Wiki](https://joshuafontany.github.io/TW5-JsonMangler/).\nScroll to the $:/plugins/joshuafontany/jsonmangler tiddler.\nDrag and drop the following links to your own wiki to install the plugins.\nRestart your server and(or) refresh your wiki.\n\n*   $:/plugins/ebalster/modloader\n*   $:/plugins/joshuafontany/jsonmangler\n\n## For Node served from TiddlyWiki's plugin folder (tiddlywiki on node.js, Bob on node.js, etc):\n\nUse Git to clone my `master` repository into a folder in your TiddlyWiki5 repo's plugin folder, `./plugins/joshuafontany/jsonmangler/`, then setup folders for the required ModLoader plugin or import it as above.\n\nAlternately, it may be simpler to use single-file `plugin.info` versions under node.js, which are packaged into the *.zip files found in the Releases tab.\n\nGo to [Json Mangler Github Releases](https://github.com/joshuafontany/TW5-JsonMangler/releases) and download the latest *.zip file.\n\nPlace the *.zip file in your `.\\TiddlyWiki5` directory (or the root above your custom `.\\plugins` folder), right click and select `Extract Here` (7zip) or `Extract to here` (Winzip).\n\nA series of folders and a plugin.info (json) file containing all the tiddlers for each required plugin will then be placed in  within your `.\\plugins` folder.\n\nEdit any wiki's `tiddlywiki.info` file to include the following in the `plugins` array.\n\n    \"joshuafontany/jsonmangler\",\n    \"ebalster/modloader\"\n\nFinally, restart your server.\n\n# Important Info\n\nFurther documentation is available in the example wiki:\n\n## [https://joshuafontany.github.io/TW5-JsonMangler/](https://joshuafontany.github.io/TW5-JsonMangler/)\n\nThis plugin is a work in progress; any suggestions or bug reports are very welcome.\n\nPlease report any issues on [GitHub](#GitHub): [https://github.com/joshuafontany/TW5-JsonMangler/issues](https://github.com/joshuafontany/TW5-JsonMangler/issues)\n\nIf you find this useful and would care to donate, please use my [PayPal](#PayPal): [https://paypal.me/JoshuaFontany](https://paypal.me/JoshuaFontany)\n\n</div>",
            "type": "text/plain",
            "created": "20191105233951453",
            "modified": "20191106000945197"
        },
        "$:/plugins/joshuafontany/jsonmangler/readme": {
            "title": "$:/plugins/joshuafontany/jsonmangler/readme",
            "created": "20181203050357914",
            "list": "$:/plugins/joshuafontany/jsonmangler/readme/csvHelp $:/plugins/joshuafontany/jsonmangler/readme/IndexPaths $:/plugins/joshuafontany/jsonmangler/readme/Deduplication",
            "modified": "20190801040303862",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "!!TW5-JsonMangler\n\nComplex JSON Support & Tools by [[Joshua Fontany|https://github.com/joshuafontany]], v {{$:/plugins/joshuafontany/jsonmangler!!version}}\n\nThis tiddlywiki plugin changes the methods tiddlywiki uses to retrieve and set values in json data tiddlers. It does so in a way that aims for //backwards compatibility//.\n\nIt introduces new features, widgets, and filter operators to manage, edit, and view json and csv tiddlers:\n\n* Allows all TextReferences to target nested values (\"complex json, i.e. `/this/is/a/nested/index/5`\").\n* An automatic ''alert'' when calling actions on an invalid json data tiddler, or when plugin tiddlers have been edited.\n* New buttons in the ''editTemplate'' and ''viewTemplate'' for 'application/json' data tiddlers.\n* `<$jsonmangler>`, a new widget that catches tiddlywiki messages. Used to edit json data tiddlers, similar to the `<$fieldmangler>`'s functionality.\n* A new [[$:/ControlPanel]] tab, ''Plugin Management'' which allows plugin creation and editing using the new json libraries.\n* New ''Filter Operators'':\n** A new ''tsort[] operator'' which uses a //tokenized sorting method// to resolve pesky sorting problems. Sort numbers with leading zeros such as `0005, 010, 23`, or alpha-numeric strings such as `This-010-that-00005, This-002-`.\n** An updated ''indexes[] operator'' that can show the immediate (\"root\") or `all` indexes in the data tiddler. See the documentation for the new operator syntax.\n** An updated ''has[] operator'' that parses paths when the `index` suffix is used.\n** A new pair of filter operators: ''encodeindex[]'' and ''decodeindex[]''. These are used to \"escape\" or \"unescape\" the index path separation character ` / ` (and the encoding character ` ~ `). This can be used to build paths with literal `/`s in a key name token. This is very useful and must be studied closely.\n** A new ''encodetiddler[]'' operator, which returns each tiddler in the input as a full json object. Used with the previous pair of operators, this can be used to pack plugin tiddlers.\n* New Csv (Character Seperated Value) tiddler and import features!\n\nFurther documentation is available in the example wiki: <br/>\nhttps://joshuafontany.github.io/TW5-JsonMangler/\n\nThis plugin is a work in progress; any suggestions or bug reports are very welcome.\n\nPlease report any issues on GitHub: <br/>\nhttps://github.com/joshuafontany/TW5-JsonMangerPlugin/issues\n\n!Important Info\n\n<$list filter=\"[all[shadows+tiddlers]tag[$:/plugins/joshuafontany/jsonmangler/readme]remove[$:/plugins/joshuafontany/jsonmangler/readme/Installation]sort{!!list}]\" variable=\"currentTiddler\">\n\n{{}}\n</$list>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/css/application_csv": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/css/application_csv",
            "text": ".tc-csv-widget button svg {\n    fill: <<colour primary>>;\n}\n\n.tc-csv-table tbody tr:nth-child(odd) {\n    background: <<colour page-background>>;\n}\n\n.tc-csv-options, .tc-csv-options-table {\n    margin: 0.2em;\n    clear: both;\n}\n\n.tc-csv-controls, .tc-csv-options {\n    width: 100%;\n    text-align: left;\n}\n\n.tc-csv-options-table, .tc-csv-options-table td {\n   border-collapse: collapse;\n   border: none;\n}\n\n.tc-csv-options-table  td:first-child {\n    text-align: right;\n    vertical-align: top;\n}\n\n.tc-csv-options-table td:first-child + td {\n    text-align: left;\n    vertical-align: top;\n    font-weight: normal;\n}\n\n.tc-csv-options-table td button {\n    padding: 0 0.2em 0 0;\n}\n\n.tc-csv-control {\n    width: auto;\n    float:left;\n    text-align: left;\n    padding: 0 0.2em 0 0;\n}\n\n.tc-csv-control-final {\n    width: auto;\n    clear: both;\n}\n\n.tc-csv-import-options {\n    font-weight: normal; \n    display: block; \n    white-space: normal;\n    width: 22em;\n    text-align: left;\n}\n\n.filter-textarea {\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\n\twidth: 25em;\n}",
            "created": "20200131095448366",
            "modified": "20200201080220951",
            "tags": "$:/tags/Stylesheet",
            "type": "text/vnd.tiddlywiki"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/css/jsonButtons.css": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/css/jsonButtons.css",
            "text": ".json-mangler p {\r\n    margin-block-start: 0em;\r\n    margin-block-end: 0em;\r\n    margin-inline-start: 0px;\r\n    margin-inline-end: 0px;\r\n}",
            "tags": "$:/tags/Stylesheet",
            "type": "text/css"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/css/notification": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/css/notification",
            "text": ".tc-notification .json-error {\r\n border-bottom: 2px solid black;\r\n}\r\n\r\n.tc-notification svg {\r\nfloat: right;\r\nfill: red;\r\nwidth: 1.5em;\r\nheight: 1.5em;\r\n}",
            "created": "20181204022819552",
            "modified": "20190214024606692",
            "tags": "$:/tags/Stylesheet",
            "type": "text/css"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/editTemplates/json": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/editTemplates/json",
            "created": "20181204022819553",
            "list-after": "$:/core/ui/ViewTemplate/classic",
            "modified": "20190214092136292",
            "tags": "$:/tags/EditTemplate $:/tags/ViewTemplate",
            "type": "text/vnd.tiddlywiki",
            "text": "<$list filter=\"[is[current]type[application/json]!has[plugin-type]]\">\r\n<div class=\"json-tools\">\r\n<$jsonmangler title=<<currentTiddler>> >\n\n<!-- /* Flatten/Expand */ -->\r\n<$button tooltip=\"Flatten This Json\" class=\"tc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 0.5em; padding: 4px;\">\r\n<$action-sendmessage $message=\"tm-json-flatten\" />\r\n<<fa-icon \"list-ul\" \"fa-lg fa-fw\">> ''Flatten''\r\n</$button>\n\n<$button tooltip=\"Expand This Json\" class=\"tc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 0.5em; padding: 4px;\">\r\n<$action-sendmessage $message=\"tm-json-expand\"/>\r\n<<fa-icon \"share-alt\" \"fa-lg fa-fw\">> ''Expand''\r\n</$button>\n\n<!-- /* Convert/Format*/ -->\r\n<$button tooltip=\"Converts Objects and Arrays.\" class=\"tc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 0.5em; padding: 4px;\">\r\n<$action-sendmessage $message=\"tm-json-convert\" />\r\n<<fa-icon \"list-ul\" \"fa-lg fa-fw\">> ''Convert''\r\n</$button>\n\n<!-- /* Generate Schema*/ -->\r\n<$button tooltip=\"Generates a Schema Tiddler from this Json Tiddler's current data. Set this tiddler's schema field to set the location to save the schema (or it will default to $:/schema/<<currentTiddler>>). This can be used to validate or to generate editors with the jsoneditor plugin.\" class=\"tc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 0.5em; padding: 4px;\">\r\n<$action-sendmessage $message=\"tm-json-toschema\" schema={{!!schema}}/>\r\n<<fa-icon \"list-ul\" \"fa-lg fa-fw\">> ''Create Schema''\r\n</$button>\n\n<!-- /* Refresh Json */ -->\r\n<$button tooltip=\"Refresh Json Formatting. Padding value determines layout.\" class=\"tc-btn-invisible tc-tiddlylink\" style=\"float: left; margin-right: 0.5em; padding: 4px;\">\r\n<$action-sendmessage $message=\"tm-json-refresh\" padding={{!!padding}} sort={{!!sort}}/>\r\n<<fa-icon \"retweet\" \"fa-lg fa-fw\">> ''Refresh''\r\n</$button>\r\n<div style=\"float: left; margin-right: 0.25em;\">\r\n<$checkbox field=\"padding\" checked=\"\" unchecked=\"0\" default=\"\" style=\"padding: 4px;\"> Padding?</$checkbox>\r\n<$checkbox field=\"sort\" checked=\"true\" unchecked=\"false\" default=\"false\" style=\"padding: 4px;\"> Sort?</$checkbox>\r\n</div>\n\n</$jsonmangler>\r\n    </div><div class=\"clear\" style=\"clear: both;\"></div>\r\n</$list>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvControls": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvControls",
            "created": "20200131090025719",
            "modified": "20200201082113012",
            "tags": "",
            "text": "\\define csvControls()\n<div class=\"tc-csv-options\">\n<$reveal type=\"nomatch\" stateTitle=<<csvState>> stateField=\"show_options\" text=\"yes\">\n<$button setTitle=<<csvState>> setField=\"show_options\" setTo=\"yes\" class=\"tc-btn-invisible\" tooltip=\"Csv Options\" aria-label=\"Show the Csv Options\">\n<i class=\"fas fa-file-csv fa-lg fa-fw\"/> {{$:/core/images/chevron-right}}\n</$button>\n</$reveal>\n<$reveal type=\"match\" stateTitle=<<csvState>> stateField=\"show_options\" text=\"yes\">\n<$button setTitle=<<csvState>> setField=\"show_options\" setTo=\"no\" class=\"tc-btn-invisible\" tooltip=\"Csv Options\" aria-label=\"Hide the Csv Options\">\n<i class=\"fas fa-file-csv fa-lg fa-fw\"/> {{$:/core/images/chevron-down}}\n</$button>\n<table class=\"tc-csv-options-table\"><tbody>\n<tr><td>Reset Csv: </td><td><$button setTitle=<<csvState>> class=\"tc-btn-invisible\" tooltip=\"Reset Csv Options\" aria-label=\"Reset the Csv Options\">\n<$action-deletetiddler $tiddler=<<csvState>>/>\n<$action-deletetiddler $tiddler=<<csvImport>>/>\n{{$:/core/images/delete-button}} ''Reset State''\n</$button></td><td></td></tr>\n<$list variable=\"csvDebug\" filter=\"[<csvState>get[debug]] -[[yes]]\" emptyMessage=\"\"\"\n<tr><td>Debug Csv: </td><td><$checkbox tiddler=<<csvState>> field=\"debug\" checked=\"yes\" unchecked=\"no\" default=\"no\"> <$view tiddler=<<csvState>> field=\"debug\"/></$checkbox></td><td></td></tr>\n\"\"\" >\n<tr><td>Debug Csv: </td><td><$checkbox tiddler=<<csvState>> field=\"debug\" checked=\"yes\" unchecked=\"no\" default=\"no\"> <$view tiddler=<<csvState>> field=\"debug\"/></$checkbox></td><td></td></tr>\n<tr><td>Headers Row: </td><td><$checkbox tiddler=<<csvState>> field=\"headers\" checked=\"yes\" unchecked=\"no\" default=\"yes\"> <$view tiddler=<<csvState>> field=\"headers\"/></$checkbox></td><td></td></tr>\n<tr><td>Skip Empty Lines: </td><td><$checkbox tiddler=<<csvState>> field=\"skip_empty\" checked=\"yes\" unchecked=\"no\" default=\"yes\"> <$view tiddler=<<csvState>> field=\"skip_empty\"/></$checkbox></td><td></td></tr>\n<tr><td>Peek / Preview: </td><td><$checkbox tiddler=<<csvState>> field=\"peek\" checked=\"yes\" unchecked=\"no\" default=\"yes\"> <$view tiddler=<<csvState>> field=\"peek\"/></$checkbox></td><td></td></tr>\n<$list variable=\"showPreview\" filter=\"[<csvState>get[peek]] -[[no]]\" emptyMessage=\"\">\n<tr><td>[ <$view tiddler=<<csvState>> field=\"preview\" size=\"3\"/> / <<csvLength>> ]</td><td><$edit-text tiddler=\"$:/temp/type/application/csv/preview\" default={{$(csvState)$!!preview}} size=\"3\" tag=\"input\"/> <$button setTitle=<<csvState>> setField=\"preview\" setTo={{$:/temp/type/application/csv/preview}} class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Update the Preview Value\" aria-label=\"Update the Preview Value\">{{$:/core/images/done-button}}</$button><$button class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Reset the Preview Value\" aria-label=\"Reset the Preview Value\"><$action-deletetiddler $tiddler=\"$:/temp/type/application/csv/preview\"/><$action-setfield $tiddler=<<csvState>> $field=\"preview\" $value={{$:/config/type/application/csv!!preview}}/>{{$:/core/images/close-button}}</$button></td><td></td></tr></$list>\n<tr><td>Rows per Page: </td><td><$edit-text tiddler=\"$:/temp/type/application/csv/per_page\" default={{$(csvState)$!!per_page}} size=\"3\" tag=\"input\"/> <$button setTitle=<<csvState>> setField=\"per_page\" setTo={{$:/temp/type/application/csv/per_page}} class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Update the Per-Page Value\" aria-label=\"Update the Per-Page Value\">{{$:/core/images/done-button}}</$button><$button class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Reset the per-Page Value\" aria-label=\"Reset the Per-Page Value\"><$action-deletetiddler $tiddler=\"$:/temp/type/application/csv/per_page\"/><$action-setfield $tiddler=<<csvState>> $field=\"per_page\" $value={{$:/config/type/application/csv!!per_page}}/>{{$:/core/images/close-button}}</$button></td><td></td></tr>\n<tr><td>Skip to Page: </td><td><$edit-text tiddler=\"$:/temp/type/application/csv/start_page\" default={{$(csvState)$!!start_page}} size=\"3\" tag=\"input\"/> <$button setTitle=<<csvState>> setField=\"start_page\" setTo={{$:/temp/type/application/csv/start_page}} class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Skip to a Page\" aria-label=\"Skip to a Page\">{{$:/core/images/done-button}}</$button><$button class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Reset the Start Page Value\" aria-label=\"Reset the Start Page Value\"><$action-deletetiddler $tiddler=\"$:/temp/type/application/csv/start_page\"/><$action-setfield $tiddler=<<csvState>> $field=\"start_page\" $value={{$:/config/type/application/csv!!start_page}}/>{{$:/core/images/close-button}}</$button></td><td></td></tr>\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvParse\" />\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport\" />\n</$list>\n</tbody></table>\n</$reveal>\n</div>\n<$list variable=\"csvDebug\" filter=\"[<csvState>get[debug]] -[[yes]]\">\n<div class=\"tc-csv-controls\">\n<div class=\"tc-csv-control\">\n<$button setTitle=<<csvState>> setField=\"start_page\" setTo=\"1\" class=\"tc-btn-invisible\" tooltip=\"First Page\" aria-label=\"Go to the First Page\">\n{{$:/core/images/chevron-left}}\n</$button>\n</div>\n<div class=\"tc-csv-control\">\n<$button setTitle=<<csvState>> setField=\"start_page\" setTo=<<csvPrevPage>> class=\"tc-btn-invisible\" tooltip=\"Prev Page\" aria-label=\"Go to the Previous Page\">\n{{$:/core/images/left-arrow}}\n</$button>\n</div>\n<div class=\"tc-csv-control\">\nPage <$view tiddler=<<csvState>> field=\"start_page\"/> / <<csvFinalPage>>\n</div>\n<div class=\"tc-csv-control\">\n<$button setTitle=<<csvState>> setField=\"start_page\" setTo=<<csvNextPage>> class=\"tc-btn-invisible\" tooltip=\"Next Page\" aria-label=\"Go to the Next Page\">\n{{$:/core/images/right-arrow}}\n</$button>\n</div>\n<div class=\"tc-csv-control\">\n<$button setTitle=<<csvState>> setField=\"start_page\" setTo=<<csvFinalPage>> class=\"tc-btn-invisible\" tooltip=\"Final Page\" aria-label=\"Go to the Final Page\">\n{{$:/core/images/chevron-right}}\n</$button>\n</div>\n<div class=\"tc-csv-control\">\n( Viewing Line <<csvStartLine>> - <<csvEndLine>> / <<csvLastIndex>> )\n</div>\n<div class=\"tc-csv-control-final\"/>\n</div>\n</$list>\n\\end\n\n<<csvControls>>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/array": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/array",
            "tags": "",
            "text": "<tr><td>Array Name: </td>\r\n<td colspan=\"2\">\r\n<!-- /* Import Json Array */ -->\r\nTiddler name filter:<br/>\r\n<$set name=\"target\" value=\"title\">\r\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit\" />\r\n</$set>\r\n</td></tr>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit",
            "tags": "",
            "text": "\\define filterEdit()\r\n<$edit-text tiddler=<<csvImport>> field=\"import_$(target)$_$(importType)$\" tag=\"textarea\" class=\"filter-textarea\" />\r\n\\end\r\n<<filterEdit>>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/json": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/json",
            "tags": "",
            "text": "\\define columnsRange() 0,$(csvCols)$\n\n<tr><td>Bundle Name: </td>\r\n<td colspan=\"2\">\r\n<!-- /* Import Json Tiddlers */ -->\r\nTiddler name filter:<br/>\r\n<$set name=\"target\" value=\"title\">\r\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit\" />\r\n</$set>\r\n</td></tr>\r\n<$list variable=\"showKey\" filter=\"[<csvState>get[headers]] +[[yes]]\">\r\n<tr><td>Primary Key: </td>\r\n<td colspan=\"2\">\r\n<$select tiddler=<<csvImport>> field=\"primary_key\" default=\"-1\">\r\n<optgroup label='Default'>\r\n<option value=\"-1\" >Row Number</option>\r\n</optgroup>\r\n<optgroup label='Columns'>\r\n<$list variable=\"col\" filter=\"[range<columnsRange>]\">\r\n<option value=<<col>> >Column <<col>></option>\r\n</$list>\r\n</optgroup>\r\n</$select>\r\n</td></tr>\r\n</$list>\r\n<tr><td>Json Names: </td>\r\n<td colspan=\"2\">\r\nShadow Tiddlers name filter:<br/>\r\n<$set name=\"target\" value=\"subtitle\">\r\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit\" />\r\n</$set>\r\n</td></tr>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/select": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/select",
            "tags": "",
            "text": "\\define selectImport()\r\n<$select tiddler=<<csvImport>> field=\"import_type\">\r\n<optgroup label='Tiddlers'>\r\n<option value='tiddlers'>One Tiddler per Row</option>\r\n</optgroup>\r\n<optgroup label='Json'>\r\n<option value='json'>One Json Tiddler per Row</option>\r\n<option value='array'>One Json Array Tiddler</option>\r\n</optgroup>\r\n</$select>\r\n\\end\n\n<tr><td>Import As: </td>\r\n<td colspan=\"2\">\r\n<<selectImport>>\r\n</td></tr>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/tiddlers": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/tiddlers",
            "tags": "",
            "text": "\\define columnsRange() 0,$(csvCols)$\n\n<tr><td>Bundle Name: </td>\r\n<td colspan=\"2\">\r\n<!-- /* Import Tiddlers */ -->\r\nTiddler name filter:<br/>\r\n<$set name=\"target\" value=\"title\">\r\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit\" />\r\n</$set>\r\n</td></tr>\r\n<$list variable=\"showKey\" filter=\"[<csvState>get[headers]] +[[yes]]\">\r\n<tr><td>Primary Key: </td>\r\n<td colspan=\"2\">\r\n<$select tiddler=<<csvImport>> field=\"primary_key\" default=\"-1\">\r\n<optgroup label='Default'>\r\n<option value=\"-1\" >Row Number</option>\r\n</optgroup>\r\n<optgroup label='Columns'>\r\n<$list variable=\"col\" filter=\"[range<columnsRange>]\">\r\n<option value=<<col>> >Column <<col>></option>\r\n</$list>\r\n</optgroup>\r\n</$select>\r\n</td></tr>\r\n</$list>\r\n<tr><td>Tiddler Names: </td>\r\n<td colspan=\"2\">\r\nShadow Tiddlers name filter:<br/>\r\n<$set name=\"target\" value=\"subtitle\">\r\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit\" />\r\n</$set>\r\n</td></tr>\r\n<tr><td>Field Names: </td>\r\n<td colspan=\"2\">\r\n<$list name=\"jsonNamesToggle\" filter=\"[<csvState>get[headers]] +[[yes]]\" emptyMessage=\"\"\"Fields filter:<br/>\r\n<$set name=\"target\" value=\"numbered\"><$set name=\"importType\" value=\"columns\"><$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit\"/></$set></$set>\"\"\" >Fields filter:<br/>\r\n<$set name=\"target\" value=\"named\"><$set name=\"importType\" value=\"columns\"><$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/filterEdit\"/></$set></$set>\r\n</$list>\r\n</td></tr>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport",
            "tags": "",
            "text": "\\define importButton()\r\n<$set name=\"importText\" filter={{$(csvImport)$!!import_title_$(importType)$}}>\r\n<$wikify name=\"importButtonText\" text=\"\"\"<<importText>>\"\"\">\r\n<$action-sendmessage $message=\"tm-json-fromcsv\" state=<<csvState>> options=<<csvImport>>/>\r\n{{$:/core/images/import-button}}  <$text text=<<importButtonText>> />\r\n</$wikify>\r\n</$set>\r\n\\end\n\n<$list variable=\"showImport\" filter=\"[<csvState>get[show_import]] -[[no]]\" emptyMessage=\"\"\"<tr><td>Import Options: </td><td><$button setTitle=<<csvState>> setField=\"show_import\" setTo=\"yes\" class=\"tc-btn-invisible\" tooltip=\"Csv Import Options\" aria-label=\"Show the Csv Import Options\">\r\n{{$:/core/images/import-button}} {{$:/core/images/right-arrow}}\r\n</$button></td><td></td></tr>\"\"\" >\r\n<$set name=\"importType\" filter=\"[<csvImport>get[import_type]]\" >\r\n<$set name=\"importTypeTiddler\" filter=\"[<importType>addprefix[$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/]]\">\r\n<tr><td>Import Options: </td><td><$button setTitle=<<csvState>> setField=\"show_import\" setTo=\"no\" class=\"tc-btn-invisible\" tooltip=\"Csv Import Options\" aria-label=\"Hide the Csv Import Options\">\r\n{{$:/core/images/import-button}} {{$:/core/images/down-arrow}}\r\n</$button></td><td></td></tr>\r\n<tr><td>Help: </td>\r\n<td colspan=\"2\">\r\n<$button to=\"$:/plugins/joshuafontany/jsonmangler/csvImportHelp\" tooltip=\"Help\" aria-label=\"Csv Import Help\" class=\"tc-btn-invisible tc-tiddlylink\" >\r\n{{$:/core/images/help}} Csv Import Help\r\n</$button>\r\n</td><td></td></tr>\r\n<!-- /* Import Csv */ -->\r\n<$transclude tiddler=\"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvImport/select\" />\r\n<$transclude tiddler=<<importTypeTiddler>> />\r\n<tr><td>~$:/Import: </td>\r\n<td colspan=\"2\">\r\n<$jsonmangler title=<<currentTiddler>> >\r\n<$button tooltip=\"Import this Csv\" aria-label=\"Import this Csv\" class=\"tc-btn-invisible tc-tiddlylink\" >\r\n<<importButton>>\r\n</$button>\r\n</$jsonmangler>\r\n</td></tr>\r\n</$set>\r\n</$set>\r\n</$list>"
        },
        "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvParse": {
            "title": "$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvParse",
            "tags": "",
            "text": "<$list variable=\"showParse\" filter=\"[<csvState>get[show_parse]] -[[no]]\" emptyMessage=\"\"\"<tr><td>Parse Options: </td><td><$button setTitle=<<csvState>> setField=\"show_parse\" setTo=\"yes\" class=\"tc-btn-invisible\" tooltip=\"Csv Parse Options\" aria-label=\"Show the Csv Pasrse Options\">\r\n{{$:/core/images/advanced-search-button}} {{$:/core/images/right-arrow}}\r\n</$button></td><td></td></tr>\"\"\" >\r\n<tr><td>Parse Options: </td><td><$button setTitle=<<csvState>> setField=\"show_parse\" setTo=\"no\" class=\"tc-btn-invisible\" tooltip=\"Csv Parse Options\" aria-label=\"Hide the Csv Pasrse Options\">\r\n{{$:/core/images/advanced-search-button}} {{$:/core/images/down-arrow}}\r\n</$button></td><td></td></tr>\r\n<tr><td>Delimiter: </td><td><$edit-text tiddler=\"$:/temp/type/application/csv/delimiter\" default={{$(csvState)$!!delimiter}} size=\"3\" tag=\"input\"/> <$button setTitle=<<csvState>> setField=\"delimiter\" setTo={{$:/temp/type/application/csv/delimiter}} class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Update the Delimiter\" aria-label=\"Update the Delimiter Value\">{{$:/core/images/done-button}}</$button><$button class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Reset the Delimiter\" aria-label=\"Reset the Delimiter Value\"><$action-deletetiddler $tiddler=\"$:/temp/type/application/csv/delimiter\"/><$action-setfield $tiddler=<<csvState>> $field=\"delimiter\" $value={{$:/config/type/application/csv!!delimiter}}/>{{$:/core/images/close-button}}</$button> (defaults to Comma `,`)</td><td></td></tr>\r\n<tr><td>New Line: </td><td><$edit-text tiddler=\"$:/temp/type/application/csv/new_line\" default={{$(csvState)$!!delimiter}} size=\"3\" tag=\"input\"/> <$button setTitle=<<csvState>> setField=\"new_line\" setTo={{$:/temp/type/application/csv/new_line}} class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Update the New Line\" aria-label=\"Update the New Line Value\">{{$:/core/images/done-button}}</$button><$button class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Reset the New Line\" aria-label=\"Reset the New Line Value\"><$action-deletetiddler $tiddler=\"$:/temp/type/application/csv/new_line\"/><$action-setfield $tiddler=<<csvState>> $field=\"new_line\" $value={{$:/config/type/application/csv!!new_line}}/>{{$:/core/images/close-button}}</$button> (defaults to `\\n`)</td><td></td></tr>\r\n<tr><td>Quote Char: </td><td><$edit-text tiddler=\"$:/temp/type/application/csv/quote_char\" default={{$(csvState)$!!delimiter}} size=\"3\" tag=\"input\"/> <$button setTitle=<<csvState>> setField=\"quote_char\" setTo={{$:/temp/type/application/csv/quote_char}} class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Update the Quote Char\" aria-label=\"Update the Quote Character\">{{$:/core/images/done-button}}</$button><$button class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Reset the Quote Char\" aria-label=\"Reset the Quote Character\"><$action-deletetiddler $tiddler=\"$:/temp/type/application/csv/quote_char\"/><$action-setfield $tiddler=<<csvState>> $field=\"quote_char\" $value={{$:/config/type/application/csv!!quote_char}}/>{{$:/core/images/close-button}}</$button> (defaults to Quote `\"`)</td><td></td></tr>\r\n<tr><td>Escape Char: </td><td><$edit-text tiddler=\"$:/temp/type/application/csv/escape_char\" default={{$(csvState)$!!escape_char}} size=\"3\" tag=\"input\"/> <$button setTitle=<<csvState>> setField=\"escape_char\" setTo={{$:/temp/type/application/csv/escape_char}} class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Update the Escape Char\" aria-label=\"Update the Escape Character\">{{$:/core/images/done-button}}</$button><$button class=\"tc-btn-invisible tc-tiddlylink\" tooltip=\"Reset the Escape Char\" aria-label=\"Reset the Escape Character\"><$action-deletetiddler $tiddler=\"$:/temp/type/application/csv/escape_char\"/><$action-setfield $tiddler=<<csvState>> $field=\"escape_char\" $value={{$:/config/type/application/csv!!escape_char}}/>{{$:/core/images/close-button}}</$button> (defaults to Quote `\"`)</td><td></td></tr>\r\n</$list>"
        },
        "$:/plugins/joshuafontany/jsonmangler/widgets/csv.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/widgets/csv.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/widgets/csv.js\r\ntype: application/javascript\r\nmodule-type: widget\r\n\r\nA wrapper that provides the `<$csv>` widget.\r\nCalled by the csv parser:\r\n$:/plugins/joshuafontany/jsonmangler/modules/parsers/csvparser.js\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\r\n\r\nvar CsvWidget = function(parseTreeNode,options) {\r\n    this.state = null;\r\n    this.stateTiddler = null;\r\n    this.options = {};\r\n    this.results = {};\r\n\tthis.initialise(parseTreeNode,options);\r\n\t//this.addEventListeners([]);\r\n};\r\n\r\nvar CSV_CONFIG = \"$:/config/type/application/csv\";\r\n\r\n/*\r\nInherit from the base widget class\r\n*/\r\nCsvWidget.prototype = new Widget();\r\n\r\n/*\r\nRender this widget into the DOM\r\n*/\r\nCsvWidget.prototype.render = function (parent, nextSibling) {\r\n    //Save the parent dom node\r\n    this.parentDomNode = parent;\r\n    //Compute Attributes\r\n    this.computeAttributes();\r\n    //Execute logic\r\n    this.execute();\r\n    // Initialise options from the state tiddler\r\n    this.options = {  \r\n        header: false, //Controls the PapaParse output - false as we are rendering the html from an array\r\n        peek: this.stateTiddler.fields.peek === \"yes\",\r\n        debug: this.stateTiddler.fields.debug  === \"yes\",\r\n        preview: 0,\r\n        skipEmptyLines: this.stateTiddler.fields.skip_empty === \"yes\",\r\n        delimiter: this.stateTiddler.fields.delimiter,\r\n        newline: this.stateTiddler.fields.newline,\r\n        quoteChar: this.stateTiddler.fields.quote_char,\r\n        escapeChar: this.stateTiddler.fields.escape_char\r\n    };\r\n    if (this.options.peek) {\r\n        this.options.preview = parseInt(this.stateTiddler.fields.preview);\r\n        this.options.preview += (this.stateTiddler.fields.headers) ? 1 : 0;\r\n    }\r\n    //Check source\r\n    var source,\r\n        tiddler = this.wiki.getTiddler(this.csvSource);\r\n    if(!tiddler) {\r\n        // The source isn't the title of a tiddler, so we'll assume it's text\r\n        source = this.csvSource;      \r\n    } else if(tiddler.fields.type == \"application/csv\" && !!tiddler.fields.text){\r\n        source = tiddler.fields.text;\r\n    }        \r\n\r\n    this.results = $tw.utils.csvToJson(source, this.options);\r\n    // Create a div to contain the CSV table or error message\r\n    var domNode = this.document.createElement(\"div\");\r\n    // Assign class\r\n    domNode.className = \"tc-csv-widget\";\r\n    try {\r\n\t\t// Generate content into the div\r\n\t\tif(this.options.debug) {\r\n            console.log(\"Render Debug CsvWidget\");\r\n\t\t\tthis.renderDebug(domNode, source);\r\n\t\t} else {\r\n\t\t\tthis.renderCsv(domNode);\r\n\t\t}\r\n\t} catch(ex) {\r\n\t\tdomNode.className = \"tc-csv-error\";\r\n\t\tdomNode.textContent = ex.toString();\r\n\t}\r\n    //Insert\r\n    parent.insertBefore(domNode, nextSibling);\r\n    this.renderChildren(domNode,null);\r\n    this.domNodes.push(domNode);    \r\n};\r\n\r\nCsvWidget.prototype.renderDebug = function(div, source) {\r\n    //set the 'csvState' variable\r\n    this.setVariable(\"csvState\",this.state); \r\n    //Render\r\n\t// Table framework\r\n    var tree = [{\r\n\t\t\"type\": \"scrollable\", \"children\": [\r\n            {\r\n\t\t\t\"type\": \"element\", \"tag\": \"table\", \"children\": [\r\n            {\r\n                \"type\": \"element\", \"tag\": \"thead\", \"children\": []\r\n            },\r\n            {\r\n                \"type\": \"element\", \"tag\": \"tbody\", \"children\": []\r\n            }\r\n            ], \"attributes\": {\r\n\t\t\t\t\"class\": {\"type\": \"string\", \"value\": \"tc-csv-table\"}\r\n\t\t\t}\r\n\t\t}], \"attributes\": {\r\n            \"class\": {\"type\": \"string\", \"value\": \"tc-csv-scrollable\"},\r\n            \"fallthrough\": \"no\"\r\n        }\r\n    }];\r\n    // Add the controls and headers to the parseTree\r\n    var cols = 1;\r\n    var controls = {\r\n        \"type\": \"element\", \"tag\": \"tr\", \"children\": [{\r\n            \"type\": \"element\", \"tag\": \"th\", \"children\": [{\r\n                \"type\": \"transclude\", \"children\": [],\r\n                \"attributes\":{\r\n                    \"tiddler\": { \r\n                        \"type\": \"string\", \r\n                        \"value\": \"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvControls\"\r\n                    }\r\n                }\r\n            }],\r\n            \"attributes\": {\r\n                \"colspan\": {\"type\": \"string\", \"value\": cols}\r\n            }\r\n        }]\r\n    };\r\n    tree[0].children[0].children[0].children.push(controls);\r\n    //Table body\r\n    if(source) {\r\n        var row = {\r\n                \"type\": \"element\", \"tag\": \"tr\", \"children\": []\r\n            };\r\n        row.children.push({\r\n                \"type\": \"element\", \"tag\": \"td\", \"children\": [{\r\n                    \"type\": \"element\", \"tag\": \"pre\", \"children\":[{\r\n                        \"type\": \"text\",\r\n                        \"text\": source\r\n                    }]\r\n                }]\r\n            });\r\n        tree[0].children[0].children[1].children.push(row);\r\n    }\r\n        \r\n    this.parseTreeNode.children = tree;\r\n    // Construct the child widgets\r\n\tthis.makeChildWidgets();\r\n};\r\n\r\nCsvWidget.prototype.renderCsv = function(div) {\r\n    var cols = this.results.data[0].length;\r\n    var x = (this.stateTiddler.fields.headers === \"yes\") ? 1 : 0 ;\r\n    var finalPage = Math.ceil((this.results.data.length-x)/parseInt(this.stateTiddler.fields.per_page)); //Pages are 1 indexed\r\n    var prevPage = (parseInt(this.stateTiddler.fields.start_page) <= 1) ? 1 : parseInt(this.stateTiddler.fields.start_page)-1;\r\n    var nextPage = (parseInt(this.stateTiddler.fields.start_page) >= finalPage) ? finalPage : parseInt(this.stateTiddler.fields.start_page)+1;\r\n    var startLine = ((parseInt(this.stateTiddler.fields.start_page)-1)*parseInt(this.stateTiddler.fields.per_page))+x; //Pages are 1 indexed, lines are 0 indexed\r\n    if (startLine < 0) startLine == 0\r\n    var endLine = startLine + parseInt(this.stateTiddler.fields.per_page);\r\n    if (endLine >= this.results.data.length) endLine = this.results.data.length;\r\n    //set the 'csvState' & 'csvImport' variables\r\n    this.setVariable(\"csvImport\",this.import); \r\n    this.setVariable(\"csvState\",this.state);    \r\n    this.setVariable(\"csvFinalPage\", finalPage.toString());\r\n    this.setVariable(\"csvPrevPage\", prevPage.toString());\r\n    this.setVariable(\"csvNextPage\", nextPage.toString());\r\n    this.setVariable(\"csvStartLine\", startLine.toString());\r\n    this.setVariable(\"csvEndLine\", (endLine-1).toString());\r\n    this.setVariable(\"csvLastIndex\", (this.results.data.length-1).toString());\r\n    this.setVariable(\"csvLength\", this.results.data.length.toString());\r\n    this.setVariable(\"csvCols\", cols.toString());\r\n    // Table framework\r\n    var tree = [{\r\n\t\t\"type\": \"scrollable\", \"children\": [\r\n            {\r\n\t\t\t\"type\": \"element\", \"tag\": \"table\", \"children\": [\r\n            {\r\n                \"type\": \"element\", \"tag\": \"thead\", \"children\": []\r\n            },\r\n            {\r\n                \"type\": \"element\", \"tag\": \"tbody\", \"children\": []\r\n            }\r\n            ], \"attributes\": {\r\n\t\t\t\t\"class\": {\"type\": \"string\", \"value\": \"tc-csv-table\"}\r\n\t\t\t}\r\n\t\t}], \"attributes\": {\r\n            \"class\": {\"type\": \"string\", \"value\": \"tc-csv-scrollable\"},\r\n            \"fallthrough\": \"no\"\r\n        }\r\n    }];\r\n    if (this.results.data && this.results.data.length > 0) {\r\n        // Add the controls and headers to the parseTree\r\n        var controls = {\r\n            \"type\": \"element\", \"tag\": \"tr\", \"children\": [{\r\n                \"type\": \"element\", \"tag\": \"th\", \"children\": [{\r\n                    \"type\": \"transclude\", \"children\": [],\r\n                    \"attributes\":{\r\n                        \"tiddler\": { \r\n                            \"type\": \"string\", \r\n                            \"value\": \"$:/plugins/joshuafontany/jsonmangler/ui/viewTemplates/csvControls\"\r\n                        }\r\n                    }\r\n                }],\r\n                \"attributes\": {\r\n                    \"colspan\": {\"type\": \"string\", \"value\": cols}\r\n                }\r\n            }]\r\n        };\r\n        tree[0].children[0].children[0].children.push(controls);\r\n        if (this.stateTiddler.fields.headers === \"yes\") {\r\n            var lineArr = this.results.data[0];\r\n            var row = {\r\n                \"type\": \"element\", \"tag\": \"tr\", \"children\": []\r\n            };\r\n            for(var column=0; column<lineArr.length; column++) {\r\n                row.children.push({\r\n                        \"type\": \"element\", \"tag\": \"th\", \"children\": [{\r\n                            \"type\": \"text\",\r\n                            \"text\": lineArr[column]\r\n                        }]\r\n                    });\r\n            }\r\n            tree[0].children[0].children[0].children.push(row);\r\n        }\r\n        //Table body\r\n        for(var line=startLine; line<endLine; line++) {\r\n            var lineArr = this.results.data[line];\r\n            if(lineArr) {\r\n                var row = {\r\n                        \"type\": \"element\", \"tag\": \"tr\", \"children\": []\r\n                    };\r\n                for(var column=0; column<lineArr.length; column++) {\r\n                    row.children.push({\r\n                            \"type\": \"element\", \"tag\": \"td\", \"children\": [{\r\n                                \"type\": \"text\",\r\n                                \"text\": lineArr[column]\r\n                            }]\r\n                        });\r\n                }\r\n                tree[0].children[0].children[1].children.push(row);\r\n            }\r\n        }\r\n    }    \r\n    this.parseTreeNode.children = tree;\r\n    // Construct the child widgets\r\n\tthis.makeChildWidgets();\r\n};\r\n\r\n/*\r\nCompute the internal state of the widget\r\n*/\r\nCsvWidget.prototype.execute = function() {\r\n    var config = $tw.wiki.getTiddler(CSV_CONFIG,{});\r\n    // Get our parameters\r\n    this.csvSource = this.getAttribute(\"source\", this.getVariable(\"currentTiddler\")),\r\n    this.state = this.getAttribute(\"state\",\"$:/csv/widget/\" + encodeURIComponent(this.csvSource) + this.getStateQualifier()),\r\n    this.import = this.getAttribute(\"state\",\"$:/csv/import/\" + encodeURIComponent(this.csvSource) + this.getStateQualifier());\r\n    this.stateTiddler = $tw.wiki.getTiddler(this.state);\r\n    var importTiddler = $tw.wiki.getTiddler(this.import);\r\n    if(!this.stateTiddler){\r\n        var config = $tw.wiki.getTiddler(CSV_CONFIG,{}),\r\n            creationFields = this.wiki.getCreationFields(),\r\n            modificationFields = this.wiki.getModificationFields(),\r\n            fields = {\r\n                //render state\r\n                headers: config.fields.headers || \"yes\",\r\n                peek: config.fields.peek || \"no\",\r\n                per_page: config.fields.per_page || \"10\",\r\n                start_page: config.fields.start_page || \"1\",\r\n                //parse options\r\n                debug: config.fields.debug || \"no\",\r\n                preview: config.fields.preview || \"0\",\r\n                skip_empty: config.fields.skip_empty || \"no\",\r\n                delimiter: config.delimiter || \"\",\t// \"\" = auto-detect\r\n                newline: config.newline || \"\",\t// \"\" = auto-detect\r\n                quote_char: config.quote_char || '\"',\r\n                escape_char: config.escape_char || '\"'            };\r\n        this.stateTiddler = new $tw.Tiddler(creationFields,fields,modificationFields,{title: this.state});\r\n        this.wiki.addTiddler(this.stateTiddler);\r\n    }\r\n    if(!importTiddler){\r\n        var creationFields = this.wiki.getCreationFields(),\r\n            modificationFields = this.wiki.getModificationFields(),\r\n            fields = {\r\n                //import options\r\n                import_type: config.fields.import_type || \"\",\r\n                primary_key: config.fields.primary_key || \"-1\",\r\n                import_title_tiddlers: config.fields.import_title_tiddlers,\r\n                import_title_json: config.fields.import_title_json,\r\n                import_title_array: config.fields.import_title_array,\r\n                import_subtitle_tiddlers: config.fields.import_subtitle_tiddlers,\r\n                import_subtitle_json: config.fields.import_subtitle_json,\r\n                import_named_columns: config.fields.import_named_columns,\r\n                import_numbered_columns: config.fields.import_numbered_columns\r\n            };\r\n        importTiddler = new $tw.Tiddler(creationFields,fields,modificationFields,{title: this.import});\r\n        this.wiki.addTiddler(importTiddler);\r\n    }\r\n};\r\n\r\n/*\r\nSelectively refreshes the widget if needed.\r\nReturns true if the widget or any of its children needed re-rendering.\r\n*/\r\nCsvWidget.prototype.refresh = function(changedTiddlers) {\r\n    var changedAttributes = this.computeAttributes();\r\n    var changedState = false;\r\n    if(changedTiddlers[this.state]){\r\n        var newState = $tw.wiki.getTiddler(this.state);\r\n        if (newState) changedState = !$tw.utils.jsonIsEqual(this.stateTiddler.fields, newState.fields);\r\n        else changedState= true;\r\n    }\r\n    var refreshTiddler = Boolean(\r\n        changedAttributes.text || changedTiddlers[CSV_CONFIG] || changedState\r\n    )\r\n\tif(refreshTiddler) {\r\n        this.refreshSelf();\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn this.refreshChildren(changedTiddlers);\t\t\r\n\t}\r\n};\r\n\r\nexports.csv = CsvWidget;\r\n\r\n})();\r\n",
            "type": "application/javascript",
            "module-type": "widget",
            "tags": ""
        },
        "$:/plugins/joshuafontany/jsonmangler/widgets/jsonmangler.js": {
            "title": "$:/plugins/joshuafontany/jsonmangler/widgets/jsonmangler.js",
            "text": "/*\\\r\ntitle: $:/plugins/joshuafontany/jsonmangler/widgets/jsonmangler.js\r\ntype: application/javascript\r\nmodule-type: widget\r\n\r\nJson mangler widget\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\r\n\r\nvar JsonManglerWidget = function(parseTreeNode,options) {\r\n\tthis.initialise(parseTreeNode,options);\r\n\tthis.addEventListeners([\r\n        { type: \"tm-json-convert\", handler: \"handleJsonConvertEvent\" },\r\n\t\t{type: \"tm-json-refresh\", handler: \"handleJsonRefreshEvent\"},\r\n\t\t{type: \"tm-json-flatten\", handler: \"handleJsonFlattenEvent\"},\r\n        { type: \"tm-json-expand\", handler: \"handleJsonExpandEvent\" },\r\n        { type: \"tm-json-splice\", handler: \"handleJsonSpliceEvent\" },\r\n        { type: \"tm-json-insert\", handler: \"handleJsonInsertEvent\" },\r\n        { type: \"tm-json-push\", handler: \"handleJsonPushEvent\" },\r\n        { type: \"tm-json-pop\", handler: \"handleJsonPopEvent\" },\r\n        { type: \"tm-json-shift\", handler: \"handleJsonShiftEvent\" },\r\n        { type: \"tm-json-unshift\", handler: \"handleJsonUnshiftEvent\" },\r\n        { type: \"tm-json-toschema\", handler: \"handleJsonToSchemaEvent\" },\r\n        { type: \"tm-json-tocsv\", handler: \"handleJsonToCsvEvent\" },\r\n        { type: \"tm-json-fromcsv\", handler: \"handleJsonFromCSVEvent\" }\r\n\t]);\r\n};\r\n\r\n/*\r\nInherit from the base widget class\r\n*/\r\nJsonManglerWidget.prototype = new Widget();\r\n\r\n/*\r\nRender this widget into the DOM\r\n*/\r\nJsonManglerWidget.prototype.render = function (parent, nextSibling) {\r\n    //console.log(\"Render JsonMangler\");\r\n    //Save the parent dom node\r\n    this.parentDomNode = parent;\r\n    //Compute Attributes\r\n    this.computeAttributes();\r\n    //Execute logic\r\n    this.execute();\r\n    //Insert the warning if it exists into the DOM and render any children\r\n    var domNode = this.document.createElement(\"div\");\r\n    // Assign class\r\n    domNode.className = \"json-mangler\";\r\n    //Insert\r\n    parent.insertBefore(domNode, nextSibling);\r\n    this.renderChildren(domNode,null);\r\n    this.domNodes.push(domNode);    \r\n};\r\n\r\n/*\r\nCompute the internal state of the widget\r\n*/\r\nJsonManglerWidget.prototype.execute = function() {\r\n\t// Get our parameters\r\n    this.mangleTitle = this.getAttribute(\"tiddler\", this.getVariable(\"currentTiddler\"));\r\n    // Construct the child widgets\r\n\tthis.makeChildWidgets();\r\n};\r\n\r\n/*\r\nSelectively refreshes the widget if needed.\r\nReturns true if the widget or any of its children needed re-rendering.\r\n*/\r\nJsonManglerWidget.prototype.refresh = function(changedTiddlers) {\r\n\tvar changedAttributes = this.computeAttributes();\r\n\tif(changedAttributes.tiddler) {\r\n\t\tthis.refreshSelf();\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn this.refreshChildren(changedTiddlers);\t\t\r\n\t}\r\n};\r\n\r\n/* Event Functions */\r\nJsonManglerWidget.prototype.handleJsonConvertEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 4;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n    \r\n    if (tiddler && tiddler.fields.text) {\r\n        var result, jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n        if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n        if(!$tw.utils.jsonIsObjArray(jsonObj)) {\r\n            var e = \"Unable to convert this Object.\\n\\nAll root level keys must be integers.\";\r\n            $tw.utils.jsonError(e, tiddler.fields.title);\r\n            return false;\r\n        }\r\n        /*Refresh*/\r\n        var modification = this.wiki.getModificationFields();\r\n        result = $tw.utils.jsonConvert(jsonObj);\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(result, padding): JSON.stringify(result, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(result);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n    }\r\n    $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-convert\");\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonRefreshEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var padding = event.paramObject[\"padding\"];\r\n    if (!padding || typeof padding === \"undefined\") padding = 4;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n    \r\n    if (tiddler && tiddler.fields.text) {\r\n        var result, jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n        if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*Refresh*/\r\n        var modification = this.wiki.getModificationFields();\r\n        result = $tw.utils.jsonDedupe(jsonObj);\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(result, padding): JSON.stringify(result, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(result);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n    }\r\n    $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-refresh\");\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonFlattenEvent= function(event) {\r\n\tvar tiddler = this.wiki.getTiddler(this.mangleTitle), padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 4;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n\r\n\tif(tiddler && tiddler.fields.text) {\r\n\t\tvar result, jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n       \t/*Flatten*/\r\n        var modification = this.wiki.getModificationFields();\r\n        result = $tw.utils.jsonFlatten($tw.utils.jsonDedupe(jsonObj));\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(result, padding): JSON.stringify(result, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(result);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\t\t\r\n    }\r\n    $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-flatten\");\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonExpandEvent= function(event) {\r\n\tvar tiddler = this.wiki.getTiddler(this.mangleTitle), padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 4;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n\r\n\tif(tiddler && tiddler.fields.text) {\r\n\t\tvar result, jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n\t\t/*Expand*/\r\n        var modification = this.wiki.getModificationFields();\r\n        result = $tw.utils.jsonExpand($tw.utils.jsonDedupe(jsonObj));\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(result, padding): JSON.stringify(result, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(result);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\t\t\r\n    }\r\n    $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-expand\");\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonSpliceEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var setReference = event.paramObject[\"set\"], index = event.paramObject[\"index\"],\r\n    deleteCount = event.paramObject[\"delete\"], value = event.paramObject[\"value\"], \r\n    padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 0;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n\r\n    if(!index) index = \"\";\r\n    if(!/\\d$/.test(index)) index += \"0\";\r\n    if(!deleteCount) deleteCount = 0;\r\n    if (typeof value != \"undefined\") {\r\n        try {\r\n            //test if an object/array\r\n            value = JSON.parse(value);\r\n        } catch (e) {\r\n            // not a valid object, use it as is\r\n        }\r\n    }\r\n    \r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*DeDupe, Splice, and Refresh Formatting*/\r\n        if (typeof value == \"undefined\") {\r\n            var {data, remArr} = $tw.utils.jsonSplice($tw.utils.jsonDedupe(jsonObj), index, deleteCount, false);\r\n        }\r\n        else {\r\n            var {data, remArr} = $tw.utils.jsonSplice($tw.utils.jsonDedupe(jsonObj), index, deleteCount, false, value);\r\n        }\r\n        var modification = this.wiki.getModificationFields();\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(data, padding): JSON.stringify(data, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(data);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n        if(Array.isArray(remArr) && typeof setReference != 'undefined'){\r\n            this.wiki.setTextReference(setReference, $tw.utils.jsonOrderedStringify(remArr, null, 0), this.getVariable(\"currentTiddler\"));\r\n        };\r\n        $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-splice\");\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonInsertEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var setReference = event.paramObject[\"set\"], index = event.paramObject[\"index\"],\r\n    deleteCount = event.paramObject[\"delete\"], value = event.paramObject[\"value\"], \r\n    padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 0;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n    if (typeof value == \"undefined\") {\r\n        return false;\r\n    }\r\n    if(!index) index = \"\";\r\n    if(!/\\d$/.test(index)) index += \"0\";\r\n    if(!deleteCount) deleteCount = 0;\r\n    var insert = false;\r\n    try {\r\n        //test if an object/array\r\n        value = JSON.parse(value);\r\n        if (Array.isArray(value)) insert = true;\r\n        if(value.length && value.length > 120000) $tw.utils.log(\"jsonMangler Error: value array to insert is too large.\");\r\n    } catch (e) {\r\n        // not a valid object, use it as is\r\n    }\r\n    \r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n        /*DeDupe, Insert (Splice with spread syntax), and Refresh Formatting*/\r\n        var {data, remArr} = $tw.utils.jsonSplice(...[$tw.utils.jsonDedupe(jsonObj), index, deleteCount, insert].concat(value));\r\n        var modification = this.wiki.getModificationFields();\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(data, padding): JSON.stringify(data, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(data);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n        if(Array.isArray(remArr) && typeof setReference != 'undefined'){\r\n            this.wiki.setTextReference(setReference, JSON.stringify(remArr, null, 0), this.getVariable(\"currentTiddler\"));\r\n        };\r\n        $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-insert\");\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonPushEvent = function(event) {\r\n       var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var index = event.paramObject[\"index\"], value = event.paramObject[\"value\"], \r\n    setReference = event.paramObject[\"set\"], padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 0;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n    if(!index) index = \"\";\r\n    if (!value) return false;\r\n    try {\r\n        //test if an object/array\r\n        value = JSON.parse(value);\r\n    } catch (e) {\r\n        // not a valid object, use it as is\r\n    }\r\n\r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*DeDupe, Push, and Refresh Formatting*/\r\n        let {data, newLength} = $tw.utils.jsonPush($tw.utils.jsonDedupe(jsonObj), index, value);\r\n        var modification = this.wiki.getModificationFields();\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(data, padding): JSON.stringify(data, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(data);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n        if(typeof setReference != 'undefined'){\r\n            this.wiki.setTextReference(setReference, newLength, this.getVariable(\"currentTiddler\"));\r\n        };\r\n        $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-push\");\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonPopEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var setReference = event.paramObject[\"set\"], index = event.paramObject[\"index\"], \r\n    padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 0;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n    if(!index) index = \"\";\r\n    \r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*DeDupe, Pop, and Refresh Formatting*/\r\n        var {data, dataItem} = $tw.utils.jsonPop($tw.utils.jsonDedupe(jsonObj), index);\r\n        var modification = this.wiki.getModificationFields();\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(data, padding): JSON.stringify(data, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(data, padding);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n        if(typeof setReference != 'undefined'){\r\n            this.wiki.setTextReference(setReference, dataItem, this.getVariable(\"currentTiddler\"));\r\n        };\r\n        $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-pop\");\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonShiftEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var setReference = event.paramObject[\"set\"], index = event.paramObject[\"index\"], \r\n    padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 0;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n    if(!index) index = \"\";\r\n    \r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*DeDupe, Shift, and Refresh Formatting*/\r\n        var {data, dataItem} = $tw.utils.jsonShift($tw.utils.jsonDedupe(jsonObj), index);\r\n        var modification = this.wiki.getModificationFields();\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(data, padding): JSON.stringify(data, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(data);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n        if(typeof setReference != 'undefined'){\r\n            this.wiki.setTextReference(setReference, dataItem, this.getVariable(\"currentTiddler\"));\r\n        };\r\n        $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-shift\");\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonUnshiftEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var index = event.paramObject[\"index\"], value = event.paramObject[\"value\"], \r\n    setReference = event.paramObject[\"set\"], padding = event.paramObject[\"padding\"] || tiddler.fields.padding;\r\n    if (!padding || typeof padding === \"undefined\") padding = 0;\r\n    if(typeof padding == \"string\")\r\n    {\r\n        if(padding && !(padding === ''+parseInt(padding, 10))) throw \"tm-json-refresh error, invalid padding\";\r\n        padding = parseInt(padding, 10);\r\n    }\r\n    var sort = event.paramObject[\"sort\"];\r\n    if (typeof sort === \"undefined\") sort = false\r\n    else{ sort = (sort === \"true\") };\r\n    if(!index) index = \"\";\r\n    if (!value) return false;\r\n    try {\r\n        //test if an object/array\r\n        value = JSON.parse(value);\r\n    } catch (e) {\r\n        // not a valid object, use it as is\r\n    }\r\n    \r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n       if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*DeDupe, Unshift, and Refresh Formatting */\r\n        var {data, newLength} = $tw.utils.jsonUnshift($tw.utils.jsonDedupe(jsonObj), index, value);\r\n        var modification = this.wiki.getModificationFields();\r\n        modification.text = sort ? $tw.utils.jsonOrderedStringify(data, padding): JSON.stringify(data, null, padding);\r\n        modification.flat = $tw.utils.jsonIsFlat(data);\r\n        this.wiki.addTiddler(new $tw.Tiddler(tiddler, modification));\r\n        if(typeof setReference != 'undefined'){\r\n            this.wiki.setTextReference(setReference, newLength, this.getVariable(\"currentTiddler\"));\r\n        };\r\n        $tw.utils.jsonIsPlugin(this.mangleTitle, this.getVariable(\"currentTiddler\"), \"tm-json-unshift\");\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonToSchemaEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var schemaTitle = event.paramObject[\"schema\"];\r\n    if (!schemaTitle || typeof schemaTitle === \"undefined\" || schemaTitle == \"\") {\r\n        schemaTitle = \"$:/schema/\"+this.mangleTitle;\r\n    }\r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n        if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*Generate the Schema*/\r\n        var jsonSchema = $tw.utils.jsonToSchema(jsonObj),\r\n        fields = {},\r\n\t\tcreationFields = this.wiki.getCreationFields(),\r\n        modificationFields  = this.wiki.getModificationFields();\r\n        fields[\"type\"] = \"application/json\";\r\n        fields[\"text\"] = JSON.stringify(jsonSchema);\r\n        var tiddler = this.wiki.addTiddler(new $tw.Tiddler(creationFields,fields,modificationFields,{title: schemaTitle}));\r\n        this.wiki.setTextReference(this.mangleTitle+\"!!schema\",schemaTitle,this.getVariable(\"currentTiddler\"));\r\n        this.dispatchEvent({\r\n            type: \"tm-navigate\",\r\n            navigateTo: schemaTitle,\r\n            navigateFromTitle: this.mangleTitle,\r\n            navigateFromNode: this,\r\n            navigateFromClientRect: {}\r\n        });\r\n    }\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonToCSVEvent = function(event) {\r\n    var tiddler = this.wiki.getTiddler(this.mangleTitle);\r\n    var schemaTitle = event.paramObject[\"schema\"];\r\n    if (!schemaTitle || typeof schemaTitle === \"undefined\" || schemaTitle == \"\") {\r\n        schemaTitle = \"$:/schema/\"+this.mangleTitle;\r\n    }\r\n    if (tiddler && tiddler.fields.text) {\r\n        var jsonObj,\r\n            a = tiddler.fields.title,\r\n            b = this.wiki.getTextReference(a+\"!!text\");\r\n        if (!b || 0 == b.length) {\r\n            b = \"{}\"\r\n        }\r\n        if(!$tw.utils.jsonIsValid(a, b)) {\r\n            return false;\r\n        }\r\n        jsonObj = JSON.parse(b);\r\n\r\n        /*Generate the Schema*/\r\n        var jsonSchema = $tw.utils.jsonToSchema(jsonObj),\r\n        fields = {},\r\n\t\tcreationFields = this.wiki.getCreationFields(),\r\n        modificationFields  = this.wiki.getModificationFields();\r\n        fields[\"type\"] = \"application/json\";\r\n        fields[\"text\"] = JSON.stringify(jsonSchema);\r\n        var tiddler = this.wiki.addTiddler(new $tw.Tiddler(creationFields,fields,modificationFields,{title: schemaTitle}));\r\n        this.wiki.setTextReference(this.mangleTitle+\"!!schema\",schemaTitle,this.getVariable(\"currentTiddler\"));\r\n        this.dispatchEvent({\r\n            type: \"tm-navigate\",\r\n            navigateTo: schemaTitle,\r\n            navigateFromTitle: this.mangleTitle,\r\n            navigateFromNode: this,\r\n            navigateFromClientRect: {}\r\n        });\r\n    }\r\n\treturn true;\r\n};\r\n\r\nJsonManglerWidget.prototype.handleJsonFromCSVEvent = function(event) {\r\n    var title = event.paramObject[\"title\"] || this.mangleTitle;\r\n    var tiddler = this.wiki.getTiddler(title);\r\n    var stateTitle = event.paramObject[\"state\"];\r\n    var importTitle = event.paramObject[\"options\"];\r\n    var stateTiddler = this.wiki.getTiddler(stateTitle);\r\n    var importTiddler = this.wiki.getTiddler(importTitle);\r\n    if (tiddler && stateTiddler && importTiddler) {\r\n        /* Create the alert tiddler */\r\n        var csvAlert = $tw.utils.csvImportAlert(title);\r\n        var tiddlersArray = [], tiddlersObj = {tiddlers:{}}, dataArray = [];\r\n        //grab row 0 as an array to use as headers as needed\r\n        var headers = $tw.utils.csvToJson(tiddler.fields.text, {header: false, preview: 1, skipEmptyLines: true}).data[0];\r\n        var importStep = (row) => {\r\n            var importTiddlers = (row) => {\r\n                var tidNameFilter = importTiddler.fields[\"import_subtitle_tiddlers\"];\r\n                var pk = Object.keys(tiddlersObj.tiddlers).length;\r\n                if(options.primary_key >= 0 && !options.header) pk = row.data[options.primary_key];\r\n                if(options.primary_key >= 0 && options.header) {\r\n                    var path = headers[options.primary_key];\r\n                    pk = row.data[path];\r\n                }\r\n                this.parentWidget.setVariable(\"primaryKey\", pk);\r\n                var tidName = this.wiki.filterTiddlers(tidNameFilter, this)[0] || \"Data/\"+title+\"/\"+Object.keys(tiddlersObj.tiddlers).length;\r\n                var tid = {\r\n                    title: tidName\r\n                };\r\n                for (let f = 0; f < headers.length; f++) {\r\n                    var fString = $tw.utils.slugifyText(this.wiki, headers[f]);\r\n                    var importType = (options.header) ? \"named\" : \"numbered\";\r\n                    var fPath = \"import_\" + importType + \"_columns\";\r\n                    var colFilter = importTiddler.fields[fPath];\r\n                    if (!options.header){\r\n                        this.parentWidget.setVariable(\"columnNumber\", f);\r\n                    }\r\n                    if (options.header){\r\n                        this.parentWidget.setVariable(\"columnName\", fString);\r\n                    }                        \r\n                    var val, fName = this.wiki.filterTiddlers(colFilter, this)[0] || \"field_\"+f.toString();\r\n                    if(!options.header) val = row.data[f];\r\n                    if(options.header) {\r\n                        var path = headers[f];\r\n                        val = row.data[path];\r\n                    }\r\n                    tid[fName] = val;\r\n                }\r\n                tiddlersObj.tiddlers[tidName] = tid;\r\n            };\r\n            var importJson = (row) => {\r\n                var tidNameFilter = importTiddler.fields[\"import_subtitle_json\"];\r\n                var pk = Object.keys(tiddlersObj.tiddlers).length;\r\n                if(options.primary_key >= 0 && !options.header) pk = row.data[options.primary_key];\r\n                if(options.primary_key >= 0 && options.header) {\r\n                    var path = headers[options.primary_key];\r\n                    pk = row.data[path];\r\n                }\r\n                this.parentWidget.setVariable(\"primaryKey\", pk);\r\n                var tidName = this.wiki.filterTiddlers(tidNameFilter, this)[0] || \"Json/Data/\"+title+\"/\"+Object.keys(tiddlersObj.tiddlers).length;\r\n                var tid = {\r\n                    title: tidName,\r\n                    type: \"application/json\",\r\n                    text: JSON.stringify(row.data)\r\n                };        \r\n                tiddlersObj.tiddlers[tidName] = tid;\r\n            };\r\n            var importArray = (row) => {\r\n                /* Build the import */\r\n                dataArray.push(row.data);\r\n            };\r\n            if(importTiddler.fields.import_type === \"tiddlers\") importTiddlers(row)\r\n            else if(importTiddler.fields.import_type === \"json\") importJson(row)\r\n            else if(importTiddler.fields.import_type === \"array\") importArray(row);\r\n            //console.log(\"Row:\", row.data);\r\n        };\r\n        var importComplete = () => {         \r\n            if(!$tw.wiki.tiddlerExists(csvAlert)) return;\r\n            if( importTiddler.fields.import_type === \"array\"){\r\n                var tidNameFilter = importTiddler.fields[\"import_title_array\"];\r\n                var filterResult = this.wiki.filterTiddlers(tidNameFilter, this);\r\n                var tidName = filterResult[0] || \"Json/\"+title;\r\n                var tid = {\r\n                    title: tidName,\r\n                    type: \"application/json\",\r\n                    text: JSON.stringify(dataArray)\r\n                };\r\n                tiddlersArray[0] = tid;\r\n            }\r\n            else {\r\n                if (importTiddler.fields.import_type == \"tiddlers\" && options.header) {\r\n                    var tidNameFilter = importTiddler.fields[\"import_subtitle_tiddlers\"];\r\n                    this.parentWidget.setVariable(\"primaryKey\", \"Headers_Tiddler\");\r\n                    var tidName = this.wiki.filterTiddlers(tidNameFilter, this)[0] || \"Data/\"+title+\"/Headers_Tiddler\";\r\n                    var tid = {\r\n                        title: tidName\r\n                    };\r\n                    for (let f = 0; f < headers.length; f++) {\r\n                        var fString = $tw.utils.slugifyText(this.wiki, headers[f]);\r\n                        var fPath = \"import_named_columns\";\r\n                        var colFilter = importTiddler.fields[fPath];\r\n                        this.parentWidget.setVariable(\"columnName\", fString);                     \r\n                        var val = headers[f], fName = this.wiki.filterTiddlers(colFilter, this)[0] || \"field_\"+f.toString();\r\n                        tid[fName] = val;\r\n                    }\r\n                    tiddlersObj.tiddlers[tidName] = tid;\r\n                }\r\n                var tidNameFilter = importTiddler.fields[\"import_title_\"+importTiddler.fields.import_type];\r\n                var filterResult = this.wiki.filterTiddlers(tidNameFilter, this);\r\n                var tidName = filterResult[0];\r\n                if(!tidName) tidName = (importTiddler.fields.import_type == \"tiddlers\" )? \"Data/\"+title : \"JsonData/\" +title;\r\n                var tid = {\r\n                    title: tidName,\r\n                    type: \"application/json\",\r\n                    \"plugin-type\": \"plugin\",\r\n                    \"bundle-date\": $tw.utils.formatDateString(new Date(), \"[UTC]YYYY0MM0DD0hh0mm0ssXXX\"),\r\n                    \"source-tiddler\": title,\r\n                    description: \"Csv Imported \"+$tw.utils.formatDateString(new Date(), \"DDth MMM YYYY 0hh:0mm\"),\r\n                    text: JSON.stringify(tiddlersObj)\r\n                };\r\n                tiddlersArray[0] = tid;\r\n            }          \r\n            /* Send the Import Message  if the alter tiddler has not been deleted*/\r\n            var importText = JSON.stringify(tiddlersArray);\r\n            this.dispatchEvent({type: \"tm-import-tiddlers\", param: importText});\r\n        };\r\n\r\n        var options = {\r\n            header: (stateTiddler.fields.headers === \"yes\") || false,\r\n            skipEmptyLines: (stateTiddler.fields.skip_empty === \"yes\") || true,\r\n            primary_key: !isNaN(parseInt(importTiddler.fields.primary_key))? parseInt(importTiddler.fields.primary_key) : -1,\r\n            preview: 0, //avoids a bug that aborts when headers==false when using step and complete functions\r\n            previewVal: (stateTiddler.fields.peek === \"yes\")? parseInt(stateTiddler.fields.preview) : 0,\r\n            delimiter: stateTiddler.fields.delimiter,\r\n            newline: stateTiddler.fields.newline,\r\n            quoteChar: stateTiddler.fields.quote_char,\r\n            escapeChar: stateTiddler.fields.escape_char,\r\n            worker: false,\r\n            step: (row, parser) => {\r\n                if( options.previewVal == 0 ) importStep(row)\r\n                else if( importTiddler.fields.import_type ==\"array\" && options.previewVal > dataArray.length ) importStep(row)\r\n                else if( importTiddler.fields.import_type !==\"array\" && options.previewVal > Object.keys(tiddlersObj.tiddlers).length ) importStep(row)\r\n                else parser.abort(); //should call complete now that preview is locked to 0\r\n            },\r\n            complete: (result) => {\r\n                importComplete();\r\n                this.wiki.deleteTiddler(csvAlert);\r\n                console.log(\"Csv import done!\\n\"+result.toString()+\"\\n\");\r\n            }\r\n        }\r\n        var results = $tw.utils.csvToJson(tiddler.fields.text, options);\r\n    }\r\n\treturn true;\r\n};\r\n\r\nexports.jsonmangler = JsonManglerWidget;\r\n\r\n})();\r\n",
            "type": "application/javascript",
            "module-type": "widget",
            "created": "20181204022819553",
            "modified": "20190214024606692",
            "tags": ""
        }
    }
}